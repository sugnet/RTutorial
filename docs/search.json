[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"book updated version (le Roux & Lubbe, 2021).","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2013","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2013)","text":"R system open-source software project analyzing data constructing graphics. provides general computer language performing tasks like organizing data, statistical analyses, simulation studies, model fitting, building complex graphics many .Central R system high-level R computer language. roots date back birth computer language S May 5, 1976 Bell Labs, Murray Hill, New Jersey (Chambers, 2008). early days S underwent several revisions extensions mainly implementation UNIX operating system. Eventually enhanced version S licensed name S-PLUS became available Windows operating system name S-PLUS Windows. earlier versions R adhered principles functional programming release version S3 middle eighties building blocks dynamically generated, self-describing objects. publication New S Language (Becker, Chambers & Wilks, 1988) provides detailed description S3. next major development S release Statistical Models S (Chambers & Hastie, 1993) involved merging functional style S object-oriented programming concepts classes methods. However, S3 limited formal support classes methods. introduction S4 objects (Chambers, 1998) introduced new class method system retains S3 compatibility. meantime several versions S-PLUS based upon S3 first later S4 released commercial market.R language introduced paper published Ross Ihaka Robert Gentleman Auckland, New Zealand 1996 (Ihaka & Gentleman, 1996). proposal large extent compatible S included features Lisp/Scheme family languages. important aspect R availability open-source system.R S-PLUS can considered clones underlying S. means able program one can quite easily program warned: also fundamental differences two systems.first two decades twenty-first century interest R exceeded possible expectations. Apart well-maintained core system new releases every months currently literally thousands researchers contributing add-packages cutting-edge developments statistics data analysis.book tutorial twofold aim; learning basics R system program efficiently R. result introductory course S-PLUS taught University Stellenbosch since 1995. initial course based book Introduction S S-Plus (Spector, 1994). Since 2002 increasingly emphasis put R extent currently exclusively devoted R. change necessitated preparation class notes ten-day (eight hours day) tutorial course R. result Step--Step R Tutorial: introduction R applications programming.","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2021","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2021)","text":"Since first publication Step--Step R Tutorial: introduction R applications programming R system experienced dramatic evolutionary process. edition still maintains twofold aim first edition adapting contents needs modernization happening within R system . Deprecated outdated material omitted new developments included. follows brief description changes.Chapter 1 contains new section explaining use R Markdown creating PDF HTML documents R output. Chapters 2, 3, 4 5 see minor changes. Chapter 6 changes made data sets used well exercises borrowed later chapters first edition. Chapter 7, ‘Writing R Functions’, notable reference made Rcpp package inclusion C++ code R. package allows compiled code included considerably easier robust. Vectorized programming mapping functions enhanced Chapter 8 discussion function mapply(). major addition discussion section 8.14 writing user-friendly applications using package shiny. replaces usage function menu(). exercise create simple shiny App also included.first part Chapter 9, ‘Reading data files R, formatting printing’, methods reading Microsoft Excel files updated; functions like readRDS() writeRDS() transporting R objects introduced; clipr package discussed. major addition chapter section devoted functionality provided tidyverse collection R packages data manipulation exploration; tibbles discussed detail well pipe operator %>%, tidy data illustrated data manipulation functions dplyr illustrated detail.Chapter 10, ‘R graphics: Round II’, considerably extended inclusion section specify colours; rewritten section quantile plots inclusion material previously Chapter 11. now section density estimation, includes discussion density histograms average shifted histograms. new section 10.14 package ggplot2 discussed many examples capabilities.chapter ‘Modelling R’ (Chapter 11) extensive discussion Analysis Variance Covariance (Chapter 12) previous edition rewritten completely consolidated new Chapter 11. final chapter now Chapter 12, ‘Introduction Optimization’. Apart new data set material similar Chapter 13 previous edition.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introducing the R System","heading":"1 Introducing the R System","text":"","code":""},{"path":"intro.html","id":"introduction","chapter":"1 Introducing the R System","heading":"1.1 Introduction","text":"chapter introduces R system new R user. Windows operating system emphasized material covered also applies operating systems allowing requirements particular operating system use. Users experience R quickly glance chapter making sure mastered topics covered proceeding main tutorial starting Chapter 2.computer age statistics become inseparable able write computer programs. Therefore, let us start reminder Fundamental Goal S:Conversion idea useful softwareThe challenge pursue goal keeping mind Mission R (Chambers, 2008):… enable best thorough exploration data possibleand Prime Directive (Chambers, 2008):… places obligation creators software program way computations can understood trusted.","code":""},{"path":"intro.html","id":"downloading-the-r-system","chapter":"1 Introducing the R System","heading":"1.2 Downloading the R system","text":"Website downloading R.download R computer: Navigate …/bin/windows/base save file R-x.y.z.-win.exe computer. Click file start installation procedure select defaults unless good reason . select ‘Create desktop icon’ installation phase, icon similar one appear desktop. Alternatively, can find R Applications.core R system installed includes several packages. Apart installed packages several thousands dedicated contributed packages available downloaded users need .","code":""},{"path":"intro.html","id":"QuickSample","chapter":"1 Introducing the R System","heading":"1.3 A quick sample R session","text":"Click R icon created desktop open Commands Window Console. Notice R prompt > waiting instruction user.R prompt > enter 5 – 8. follow following convention write instructions:Repeat () enter 5 – see happens:+ secondary R prompt. indicates instruction unfinished. Either respond completing instruction press Esc key start primary prompt.EnterThis instruction creates R object name (label) xx containing vector\n(1, 2, 3, 4, 5, 6, 7, 8, 10).EnterThis instruction creates R object name yy containing random sample 20 values normal distribution mean 50 standard deviation 15.EnterThe example shows name R object entered prompt, R respond displaying contents object.Obtain representation contents object yy created (d).Obtain representation contents object yy created (d).program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.\ncan R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.can R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:Note prompt appear followed mean object yy.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects can removed following instruction: rm(name1, name2, ... ).Objects can removed following instruction: rm(name1, name2, ... ).Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:instructions resulted opening graph window containing required histogram user can switch console graph window back console.R session can terminated closing window entering q() R prompt. Either way user prompted save workspace. user chooses save, objects created session lost.","code":"\n5 - 8\n#> [1] -3> 5 -\n> +\n> +\nxx <- 1:10\nyy <- rnorm(n = 20, mean = 50, sd = 15) \nxx\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nmean(yy) \n#> [1] 49.46584\ngr.data <- rnorm(1000) \nhist(gr.data)"},{"path":"intro.html","id":"working-with-rstudio","chapter":"1 Introducing the R System","heading":"1.4 Working with RStudio","text":"Many users R prefer working RStudio. RStudio free open source integrated development environment R works standard version R available CRAN. can downloaded RStudio home page run desktop (Windows, Mac Linux). Full details functionality RStudio available home page. , brief introduction RStudio given.RStudio installed computer following icon created desktop:Clicking icon open RStudio development environment shown Figure 1.1. order open R workspace RStudio drag corresponding .RData file RStudio icon drop soon ‘Open RStudio’ becomes visible.\nFigure 1.1: RStudio development environment R.\nbottom left-hand panel familiar R console.bottom right-hand panel used :\n() listing files folder workspace (.RData) active project kept\n(b) listing installed packages available attached search path well menus installing updating packages\n(c) graph windows ()\n(d) Help facilities.top left-hand panel can used creating managing script files (see 1.9.1) top right-hand panel provides information objects current folder well history previous commands given console.","code":""},{"path":"intro.html","id":"r-an-interpretive-computer-language","chapter":"1 Introducing the R System","heading":"1.5 R: an interpretive computer language","text":"Essentially, interpretive language instructions given one one. instruction evaluated interpreted turn internal program called interpreter evaluator immediate action taken. example, instruction given 1.3() evaluated R evaluator resulting answer –3 returned. hand, 1.3(b) evaluator found instruction incomplete therefore asked information.advantage interpretive language intermediate results can obtained quickly without first wait complete program finish case compiler language. latter case complete program translated (compiled) program called compiler. compiled program can converted standalone application can called programs perform complete task. general compiler languages handle computer memory relatively efficiently calculations executed speedily.\nCommunication R evaluator takes place set instructions called escape sequences. escape sequences take form backslash preceding character. Examples escape sequences :\\n new line\\r carriage return\\t go next tab stop\\b backspace\\bell\\f form feed\\v vertical tabA consequence role backslash R single backslash filename properly recognized. Therefore, referring R following file path “c:\\Documents\\myFile.txt” backslashes must entered double backslashes .e. \"c:\\\\Documents\\\\myFile.txt\" \"c:/Documents/myFile.txt\".","code":""},{"path":"intro.html","id":"exercise","chapter":"1 Introducing the R System","heading":"1.5.1 Exercise","text":"cat() function can used write text message console. Initialize new R session investigate results following R instructions:purpose semi-colon line ?distinguish two soundings bell? Try following:now distinguish two soundings bell?purpose Sys.sleep() instruction?","code":"\ncat(\"aaa bbb\")\ncat(\"aaa bbb \\n\")\ncat(\"aaa \\n bbb \\n\")\ncat(\"aaa \\nbbb \\n\")\ncat(\"aaa \\t\\t bbb \\n\") \ncat(\"aaa\\b\\b\\bbbb \\n\") \ncat(\"aaa \\n\\a bbb \\a\\n\") \ncat(\"1\\a\\n\"); cat(\"2\\a\\n\")\ncat(\"1\\a\\n\"); Sys.sleep(2); cat(\"2\\a\\n\") "},{"path":"intro.html","id":"exercise-1","chapter":"1 Introducing the R System","heading":"1.5.2 Exercise","text":"Write R code achieve following output:name :Bell sounds .name appears new line.Two distinct sounds bell heard andThank visible new line.cursor appears new line.","code":""},{"path":"intro.html","id":"accessing-the-help-functionality","chapter":"1 Introducing the R System","heading":"1.6 Accessing the Help functionality","text":"Useto obtain help usage R function mean().Find difference instructionsandWhat help available via instructionUseto find obtain help using R function help.search(xx). Note: hep operator reserved word quotes needed, e.g.butor","code":"\n?mean\n?mean\n??mean\nhelp.start()\n?help.search()\n?matrix\n?\"?\"\n?\"for\""},{"path":"intro.html","id":"MoreBasics","chapter":"1 Introducing the R System","heading":"1.7 More R basics","text":"R interactive language allows fast acquisition results.R interactive language allows fast acquisition results.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R objects studied detail later chapters. important now, following:R objects studied detail later chapters. important now, following:Everything R object.different types objects e.g. function objects, data objects, graphics objects, character objects, numeric objects.Usually objects stored current folder called Global environment; recognized R name .GlobalEnv available file system name .RData.Objects created console assignment instructionorIn R names case sensitive .e. peter Peter two different objects.Objects created assignment R session stored permanently Global environment (working directory) unless user chooses save terminating R session.Care must exercised creating new object assignment: object name .object already exists Global environment new object created assigning name .object old .object -written replaced new object without warning.Remember way R evaluator operates: object name given R prompt R evaluator responds displaying content object. Review difference instructionsandThe symbol # marks comment. Everything following # line ignored R evaluator. Check example result instructionUsage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.Usage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.symbol -> assigns object left-hand side name (label) right-hand side.symbol -> assigns object left-hand side name (label) right-hand side.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.help (?) facility: Table 1.1 contains details help available special keywords.help (?) facility: Table 1.1 contains details help available special keywords.Table 1.1:  useful keywords available help queries.","code":"\nname <- object\nobject <- name\nq\nq()\n5+8 # +12\n#> [1] 13"},{"path":"intro.html","id":"regular-expressions-in-r-the-basics","chapter":"1 Introducing the R System","heading":"1.8 Regular expressions in R: the basics","text":"follows 1.7(d) care must taken objects assigned names. Furthermore, Global environment R database may easily contain hundreds objects. Therefore, frequent task search patterns names objects e.g. searching object names starting “Figure” ending “.dat”. R function objects() ls() arguments pos pattern specifying position database search pattern characters appearing name (string), respectively. pattern argument can given regular expression. Regular expressions provide method expressing patterns character values used perform various tasks R. considering task extracting certain specified objects database using pattern argument objects() ls().syntax regular expressions follows different rules syntax ordinary R instructions. Moreover syntax differs depending particular implementation program uses. default, R uses set regular expressions similar used UNIX utilities, function arguments available changing default e.g. setting argument perl = TRUE.Regular expressions consist three components: single characters, character classes modifiers operating single characters character classes.Character classes formed using square brackets surrounding set characters matched e.g. [abc123], [-z], [-zA-Z], [0-9a-z]. Note usage dash indicate range values.modifiers operating characters character classes summarized Table 1.2.Table 1.2:  Modifiers regular expressions.role modifiers forming character classes following characters must preceded backslash literal meaning needed:Note R means whenever one characters needs escaped regular expression must preceded double backslashes. Table 1.3 contains examples regular expressions.Table 1.3:  Examples regular expressions.","code":"[  ]  {  }  (  )  ^  $  .  |  *  +  \\"},{"path":"intro.html","id":"exercise-2","chapter":"1 Introducing the R System","heading":"1.8.1 Exercise","text":"Initialize R sessionAttach MASS package second (default) position search path issuing commandGet listing objects package MASS requestingExplain difference objects(pos=2, pat=\".\") objects(pos=2, patt=\"\\\\.\").Obtain listing objects names starting three letters followed digit.Obtain listing objects names ending three letters followed digit.Obtain listing objects names ending period followed exactly three four letters.","code":"\nlibrary(MASS)\nobjects(pos=2)"},{"path":"intro.html","id":"FunctionIntro","chapter":"1 Introducing the R System","heading":"1.9 From single instructions to sets of instructions: introducing R functions","text":"Consider following problem: R data set sleep contains extra hours sleep 20 patients drug treatment. Suppose data set can considered sample normal population. 95% confidence interval required mean extra hours sleep. known confidence interval given \\(\\left[ \\mathbf{\\bar{x}}- \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025}; \\mathbf{\\bar{x}}+ \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025} \\right]\\). problem can solved entering following instructions one one:situations like , problem can addressed using script file writing function. going introduce two methods writing functions R:using script file andusing function fix().","code":"\nsleep.data <- sleep[ ,1]   \nsleep.mean <- mean(sleep.data)   \nsleep.sd <- sd(sleep.data)    \nt.perc <- qt(0.975,19) \nleft.boundary <- sleep.mean - (sleep.sd/sqrt(length(sleep.data)))*t.perc \nright.boundary <- sleep.mean + (sleep.sd/sqrt(length(sleep.data)))*t.perc\ncat (\"[\", left.boundary, \";\", right.boundary, \"]\\n\")\n#> [ 0.5955845 ; 2.484416 ]"},{"path":"intro.html","id":"script","chapter":"1 Introducing the R System","heading":"1.9.1 Writing an R function using a script file","text":"R top menu select File; New script. script window open simultaneous change menu bar.Type instructions script window.Select typed text run script clicking run icon (Ctrl+R).Note shown R console window.Script files ordinary text files. can saved, edited opened using text editor.convention R script files extension xxxx.r.Next, change spelling last two lines right.boundary Right.boundary. Select text run script. Check output appearing console.Script windows can also used creating R function.Create R function changing text shown .Select text notice happens R commands window (console).Give instruction objects() R prompt. happened?can now run function commands window (console) typing:want create run function conf.int script window add instruction conf.func (x = sleep[,1]) last line script window. Now, select line run . Check R console.happen syntax error made script window? Change code script file follows, deliberately deleting last closing parenthesis last line function.Select final line run . Check R console. problem, function executed correctly. code conf.int script file changed, updated object created running console.Select code script run . Check R console. Discuss.","code":"\nconf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)  \n}\nconf.int (x = sleep[,1])\n#> $lower\n#> [1] 0.5955845\n#> \n#> $upper\n#> [1] 2.484416conf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary\n}\nconf.int (x = sleep[,1])"},{"path":"intro.html","id":"writing-an-r-function-using-fix","chapter":"1 Introducing the R System","heading":"1.9.2 Writing an R function using fix()","text":"using fix() built-R text editor can used using script files windows environment notepad preferably notepad++ Tinn-R preferred.following instruction necessary changing default editor used fix():orEnter fix (.func) R prompt. text editor open. Type instructions shown .Close window. Check happens R console.can now run function commands window (console) similar 1.9.1(l), changing name function conf.int .func.happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?Carefully study message R console syntax error occurred function created fix():Carefully study message R console syntax error occurred function created fix():following correct way respond message R evaluator:simply use fix(.func) point, R editor revert version function previous edit.WARNINGBefore writing function solving problem: make sure problem understood exactly; make 100% sure relevant statistical theory understood correctly. Failure careless dangerous!","code":"\noptions(editor = \"notepad\")\noptions(editor = \"full path to the relevant exe file\")function (x = sleep[,1])\n{\n  x.mean <- mean(x)`\n  x.sd <- sd(x)\n  t.perc <- qt(0.975,19)\n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc\n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)\n}> Error in edit(name, file, title, editor) :\n    unexpected 'yyy' occurred on line xx\n    use a command like\n    x <- edit()\n    to recover\nmy.func <- edit()"},{"path":"intro.html","id":"r-projects","chapter":"1 Introducing the R System","heading":"1.10 R Projects","text":"different windows R Data window, Script window, Graph window Menus Dialog windows. current workspace R .GlobalEnv. function getwd() used obtain path current folder’s .Rdata .Rhistory.Note: order see files .Rdata .Rhistory displayed , may necessary turn option “Hide extensions known file types” Windows Explorer.important make provision different workspaces associated different projects. R, different .Rdata files different folders separate different projects. however much gain using Projects RStudio.","code":""},{"path":"intro.html","id":"creating-a-project-in-rstudio","chapter":"1 Introducing the R System","heading":"1.10.1 Creating a project in RStudio","text":"top menu, select File, New Project. Follow prompts create new project, either existing folder creating new folder project, say MyProject.Navigate folder MyProject Windows Explorer.Notice file MyProject.Rproj created folder.double-clicking file open project RStudio. advantages opening project way :workspace file MyProject.Rdata automatically loadedby placing related files like data set folder MyProject subfolder, say MyProject\\data means code use relative folder references, .e. refer MyProject\\mydata.xlsx MyProject\\data\\mydata.xlsx instead something like c:\\users\\myname\\Documents\\MyProject\\data\\mydata.xlsx.major advantage relative references specific computer makes porting devices possiblesharing project collaborator simply entail copying entire contents MyProject folder.","code":""},{"path":"intro.html","id":"a-note-on-computations-by-a-computer","chapter":"1 Introducing the R System","heading":"1.11 A note on computations by a computer","text":"writing R functions important keep mind way computations performed computer always according rules algebra. Two important occurrences given .mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.Open R session issue commandfor details numerical environment computer.","code":"\n.Machine"},{"path":"intro.html","id":"built-in-data-sets-in-r","chapter":"1 Introducing the R System","heading":"1.12 Built-in data sets in R","text":"R contains several built-data sets collected package datasets. package automatically attached search path. Type ?datasets R prompt details. Apart data sets several data sets packages also used book.","code":""},{"path":"intro.html","id":"the-use-of-.first-and-.last","chapter":"1 Introducing the R System","heading":"1.13 The use of .First() and .Last()","text":"function .First() executed beginning every R session. works R RStudio.Instead specifyeach time R session initialized, create following function save .Rdata exiting R.ensures Notepad text editor subsequent session.Similar .First() function .Last() can created execution end R session.","code":"\noptions(editor = \"notepad\")\n.First <- function() { options(editor = \"notepad\") }"},{"path":"intro.html","id":"security-an-example-of-the-usage-of-.first","chapter":"1 Introducing the R System","heading":"1.13.1 Security: an example of the usage of .First()","text":".First() facility can used prevent access R workspace setting password protection. can done follows:Create new workspace running example security. workspace create following R functionNow create function:Terminate R session open .Discuss construction usage functions.Can break security?Can make changes security make safe?","code":"\npassword <- function()        # Note the structure of a function\n{ cat(\"Password? \\n\")\n  password <- readline()      # What is the usage of readline()? \n  if (password != \"PASSWORD\") \n    q(save=\"no\")              # The meaning of !=  is \"not equal to\"\n  else (cat(\"You can proceed \\n\"))\n}               \n.First <- function()\n{   #  What must you be careful of?\n   password()\n}"},{"path":"intro.html","id":"options","chapter":"1 Introducing the R System","heading":"1.14 Options","text":"Study result instruction > options() R.","code":""},{"path":"intro.html","id":"creating-pdf-and-html-documents-from-r-output-r-markdown","chapter":"1 Introducing the R System","heading":"1.15 Creating PDF and HTML documents from R output: R Markdown","text":"R package knitr used obtain reproducible results R code form PDF HTML documents. addition knitr, R Markdown can used create HTML, PDF even MS Word documents. Markdown -called markup language plain-text-formating syntax. R Markdown document written markdown contains chunks embedded R code. Although render() function package rmarkdown can used (similar knit() function package knitr), create output document R Markdown .Rmd file, R Markdown typically used conjunction RStudio. top menu, select File, New File, R Markdown… open example.Rmd file providing user structure R Markdown file. illustration, select output format HTML.Edit example.Rmd file contain following:top text editor, click Knit create HTML document. Note arrow, options Knit PDF Knit Word can also chosen. output format also specified line 5 text file output: html_document. chosen PDF output format, output: pdf_document. Typically, R Markdown used reporting, directly incorporating R code output. formal documents Figure Table caption references, tables content, etc. R package bookdown used. Install package replace output statement output:bookdown::pdf_document2. information use bookdown, click .","code":"---\ntitle: \"An Illustration of Some Capabilities of R Markdown\"\nauthor: \"Niel le Roux and Sugnet Lubbe\"\ndate: \"22/01/2021\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Short description\n\nCode chunks in .Rmd files are delimited with ` ```{r} ` at the top where a chunk \nlabel and any chunk options can appear and  ` ``` ` at the end. In-line R code \nchunks are indicated with single ` `r ` on either side.\n\n*****\n\nHere is an example containing several chunks of code. Note that in the first \nchunk R code is not shown due to the option `echo = FALSE`. In the remaining \nchunks R code is shown due to the option above 'echo = TRUE'.\n\n_Note R code not shown for this chunk._\n\n```{r y, echo=FALSE}\ny <- 1\ny\n```\n\n```{r rnorm}\nrequire(lattice)\nset.seed(123)\nx <- rnorm(1000, 20, 5)\n```\n\nWe analyse data drawn from $\\mathcal{N}(20,25)$. The mean is \n`r round(mean(x),3)`. The following code shows the distribution via a histogram\n\n```{r histexample}\n  hist(x)\n```\n\nand the code below via a boxplot.\n\n```{r boxexample}\n  boxplot(x)\n```\n\nThe first element of \\texttt{x} is `r x[1]`. Note the usage of ` \\texttt{x} ` \nabove.\n\n*two plots side by side (option fig.show='hold')*\n\n```{r side-by-side, fig.show='hold', out.width=\"50%\"}\n  par(mar=c(4,4,0.1,0.1), cex.lab=0.95, cex.axis=0.9, mgp=c(2,0.7,0), \n      tcl=-0.3, las=1)\n  boxplot(x)\n  hist(x,main=\"\")\n```\n\n```{r linear_model}\n  n <- 10\n  x <- rnorm(n)\n  y <- 2*x + rnorm(n)\n  out <- lm(y ~ x)\n  summary(out)$coef\n```"},{"path":"intro.html","id":"command-line-editing","chapter":"1 Introducing the R System","heading":"1.16 Command line editing","text":"Commands given R session stored together commands given previous sessions file .History folder .RData file. R session previous commands can retrieved R prompt pressing arrow keys. previous command can edited using backspace, delete, home, end keys well shortcuts copy paste.","code":""},{"path":"objects.html","id":"objects","chapter":"2 Managing objects","heading":"2 Managing objects","text":"completing introductory chapter now know toinitialize R session;save workspace;open existing project;execute simple tasks R obtain numerical, text graphical results;obtain help.know also everything R can considered kind object. chapter focus properties different objects manage objects workspace.","code":""},{"path":"objects.html","id":"instructions-and-objects-in-r","chapter":"2 Managing objects","heading":"2.1 Instructions and objects in R","text":"","code":""},{"path":"objects.html","id":"general","chapter":"2 Managing objects","heading":"2.1.1 General","text":"Recall thatinstructions separated semi-colon start new lines;instructions separated semi-colon start new lines;# symbol marks rest line comments;# symbol marks rest line comments;default R (primary) prompt >; secondary default prompt +;default R (primary) prompt >; secondary default prompt +;use <- create objects. (equality sign (=) also accepted. However, avoid practice use\n= function arguments;\n<- assignment;\n== comparison / control structures);\nuse <- create objects. (equality sign (=) also accepted. However, avoid practice use= function arguments;<- assignment;== comparison / control structures);use -> assigning left-hand side name right-hand side.use -> assigning left-hand side name right-hand side.use function assign() assigning names objects. (discussed detail Chapter 3)use function assign() assigning names objects. (discussed detail Chapter 3)","code":""},{"path":"objects.html","id":"examples","chapter":"2 Managing objects","heading":"Examples","text":"Assigning numeric vector name “aa”. Assignment takes place global environment.Assigning character vector name “bb”.Note use argument pos, ” ” ’ ’ used characters. careful mixing single quotes double quotes. See .Explain error message .Explain backslash .","code":"\naa <- 1:10\nAa <- seq(from = 1,to = 10,by = 0.01); yy <- c(\"a\",\"b\",\"c\")\nc(\"a\",\"b\",\"c\") -> bb \nassign(\"aa\", rnorm(10), pos = 1)c(\"u\",'v',\"'w'\",\"\"x\"\",'\"y\"',''z'') -> cc\n#> Error: <text>:1:19: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",\"\"x\n#>                       ^c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z'') -> cc\n#> Error: <text>:1:31: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z\n#>                                   ^\nc(\"u\",'v',\"'w'\",'\"x\"','\"y\"','z') -> cc \ncc\n#> [1] \"u\"     \"v\"     \"'w'\"   \"\\\"x\\\"\" \"\\\"y\\\"\" \"z\"\nobjects()\n#> [1] \"aa\" \"Aa\" \"bb\" \"cc\" \"yy\"\naa\n#>  [1] -0.03157564 -0.91499548  0.60245168 -0.72637880\n#>  [5]  0.52892947  0.93513996 -0.73023318 -0.19905602\n#>  [9]  1.29646665  0.20362354\nbb\n#> [1] \"a\" \"b\" \"c\"\nobjects()[3]\n#> [1] \"bb\"\nparse(text=objects()[3])\n#> expression(bb)\neval(parse(text=objects()[3]))\n#> [1] \"a\" \"b\" \"c\"\nrm(a,b)\n#> Warning in rm(a, b): object 'a' not found\n#> Warning in rm(a, b): object 'b' not found\nrm(aa,bb)\nobjects()\n#> [1] \"Aa\" \"cc\" \"yy\"\nrm(\"cc\")\nobjects()\n#> [1] \"Aa\" \"yy\""},{"path":"objects.html","id":"objects-in-r","chapter":"2 Managing objects","heading":"2.1.2 Objects in R","text":"Everything object many different types objects.Everything object many different types objects.Study also take note following naming conventions:Study also take note following naming conventions:Allowed upper lower case letters, numbers 0 – 9, full stop(s) underscore(s).Must begin number.R case sensitive .e. John john refer different objects.Use full stops (periods) underscores break name meaningful words.Avoid c, s, t, C, F, T, diff well reserved words naming object.use functions conflicts() find() naming objects. instruction conflicts (detail = TRUE) outputs details whether objects identical names exist search path e.g.instruction find (\"object\") outputs details whether objects name object exist search path e.g.Objects can possess several attributes e.g. mode (way object internally stored)lengthnamesdimclass","code":"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nfind(\"kronecker\")\n#> [1] \"package:methods\" \"package:base\""},{"path":"objects.html","id":"examples-1","chapter":"2 Managing objects","heading":"Examples","text":"Levels show categorical variable (object).Mode numeric tells us categorical variable (object) b internally stored set numeric codes.Special attention given class mode integers. object type integer stored internally effectively integer represented double format.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created within function exist long function executed.Objects created within function exist long function executed.Use rm() rm(list = ListOfNames) remove objects workspace.Use rm() rm(list = ListOfNames) remove objects workspace.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.can object printed screen?can object printed screen?Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .","code":"\na <- 1:10\nclass(a)\n#> [1] \"integer\"\nb <- factor(c(\"a\",\"b\",\"c\"))\nclass(b)\n#> [1] \"factor\"\nb\n#> [1] a b c\n#> Levels: a b c\nmode(a)\n#> [1] \"numeric\"\nmode(b)\n#> [1] \"numeric\"\nlength(a)\n#> [1] 10\nlength(b)\n#> [1] 3\ndim(a)\n#> NULL\nmat <- matrix(1:12,nrow=4)\nmat\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12\ndim(mat)\n#> [1] 4 3\nmode(mat)\n#> [1] \"numeric\"\nlogic <- c(TRUE,TRUE,FALSE,TRUE)\nmode(logic)\n#> [1] \"logical\"\nclass(logic)\n#> [1] \"logical\"\nx <- 5\ny <- 5L\ntypeof(x)\n#> [1] \"double\"\ntypeof(y)\n#> [1] \"integer\"\nclass(x)\n#> [1] \"numeric\"\nclass(y)\n#> [1] \"integer\"\nmode(x)\n#> [1] \"numeric\"\nmode(y)\n#> [1] \"numeric\""},{"path":"objects.html","id":"data-in-r","chapter":"2 Managing objects","heading":"2.1.3 Data in R","text":"R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.Study help file c().Study help file c().Study help file scan().Study help file scan().Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.","code":""},{"path":"objects.html","id":"generation-of-data","chapter":"2 Managing objects","heading":"2.1.4 Generation of data","text":"Study operators functions :, seq(), rep(), rev(), rnorm(), runif() following instructions:function rmvnorm() generating multivariate normal samples mvtnorm R package. package must first loaded using instructionAlternatively, generating multivariate normally data also function mvrnorm() R package MASS.","code":"\n1:10\n8:3\nseq(from=1, to=10, length=10)\nseq(from=2, to=10, length=5)\nrev(10:1)\nrnorm (20, mean=50, sd=5)\nrunif (10, min=1, max=3)\nlibrary(mvtnorm)"},{"path":"objects.html","id":"introduction-to-functions-in-r","chapter":"2 Managing objects","heading":"2.2 Introduction to functions in R","text":"introduced R functions section 1.9. basic structure R function follows:function func.name() called, code { } executed.arguments function can inspected using commandThe function str(x) provides information object x. x function output similar args(). Default values given function arguments using construction (argument name = value). good programming practice make extensively use comments describe arguments / particular chunk code .\nusage following function:function argument called dummy argument. happen object working directory?Functions called replacing formal arguments actual arguments. can done position name. Hint: less error prone call functions using named arguments. Create following functionExecute following function calls explain outputNote use prompt() package.skeleton() provide new function help-file.final expression R function automatically returned function completes execution.function consists single line, can written succinctlyor even without { }:general, functions consist lines code often multiple outputs returned. single output object needs returned, object can created last line codeor return() statement:general, outputs combined returned list. final expression function creates list object:return multiple outputs, list simply extended shown :good practice name output objects list, :Finally, place output object processing, function assigned object name:","code":"func.name <- function(list of arguments)\n{\n  # R code\n}args(name of function)\ncube <- function(a) a^3\nDemofunc <- function(vec = 1:10, m,k)\n { # Function to subtract a specified constant from\n   # each element of a given vector and after subtraction\n   # divide each element by a second specified constant.\n   # The result of the above transformation is returned.\n (vec - m)/ k \n}\nDemofunc(3, 2, 5)\n#> [1] 0.2\nDemofunc(2,5)\n#> Error in Demofunc(2, 5): argument \"k\" is missing, with no default\nDemofunc(m = 2, k = 5)\n#>  [1] -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6\nDemofunc(m = 2, k = 5, vec = 1:100)\n#>   [1] -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6  1.8\n#>  [12]  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6  3.8  4.0\n#>  [23]  4.2  4.4  4.6  4.8  5.0  5.2  5.4  5.6  5.8  6.0  6.2\n#>  [34]  6.4  6.6  6.8  7.0  7.2  7.4  7.6  7.8  8.0  8.2  8.4\n#>  [45]  8.6  8.8  9.0  9.2  9.4  9.6  9.8 10.0 10.2 10.4 10.6\n#>  [56] 10.8 11.0 11.2 11.4 11.6 11.8 12.0 12.2 12.4 12.6 12.8\n#>  [67] 13.0 13.2 13.4 13.6 13.8 14.0 14.2 14.4 14.6 14.8 15.0\n#>  [78] 15.2 15.4 15.6 15.8 16.0 16.2 16.4 16.6 16.8 17.0 17.2\n#>  [89] 17.4 17.6 17.8 18.0 18.2 18.4 18.6 18.8 19.0 19.2 19.4\n#> [100] 19.6\nmy.func <- function(a=5) \n{  a+2\n}\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) {  a+2  }\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) a+2\nmy.func()\n#> [1] 7\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     number/a\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     return(number/a)\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number, number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 64\n#> \n#> [[2]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nmy.func()\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nout <- my.func()\nout\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8"},{"path":"objects.html","id":"findData","chapter":"2 Managing objects","heading":"2.3 How R finds data","text":"order understand objects found R necessary understanding conceptsEnvironmentFrameSearch pathParent environmentInheritance.mechanism R uses organize objects based frames environments. frame collection named objects environment consists frame together pointer reference another environment called parent environment. Environments nested parent environment environment directly contains current environment. start R session workspace created always associate environment, global environment. global environment occupies first position search path accessed call globalenv(). Packages databases can added search path call attach() removed search path call detach().R package? difference installing loading package?Work following example:attach package MASSBy default MASS attached second position search path.use detach remove MASS search path.obtain parent global environmentWhen R evaluator looks object find name global environment search parent global environment. carry search along search path first occurrence name. name found return message Error: object 'xx' found. usage double colon :: triple colon ::: access intended object one object name exist search path. two operators use namespace facility R packages. namespace package allow creator package hide functions data meant internal use; provides way operators :: ::: object within particular package. Thus namespace prevent functions breaking user selects name clashes one package. double-colon operator :: selects objects particular namespace. functions exported package can retrieved way. triple-colon operator ::: acts like double-colon operator also allows access hidden objects. Packages often inter-dependent, loading one may cause others automatically loaded. automatically loaded packages added search list.note function call getAnywhere(), searches multiple packages can used finding hidden objects. function called, R creates new (temporary) environment enclosed current (calling) environment. Objects created new environment available parent environment dies function terminates. Objects calling environment available use new environment created function called.Similarly, expression evaluated hierarchy environments created. Search objects continue hierarchy necessary global environment onto search path.Study use arguments pos, .names, pattern function objects().Study behaviour functions conflicts() exists() examples :Study code carefully explain inheritance .example leads conclusion complicated stage. behaviour become clear work coming chapters.Direct access objects search path can achieved function get().\nfunction get() takes first argument name object character string. optional argument pos can used specify search list look object. illustration explain outcomes following function calls:Instead attaching databases function () often preferred. Discuss usage () referring instructions:","code":"\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nlibrary (MASS)\nsearch()\n#>  [1] \".GlobalEnv\"        \"package:MASS\"     \n#>  [3] \"package:stats\"     \"package:graphics\" \n#>  [5] \"package:grDevices\" \"package:utils\"    \n#>  [7] \"package:datasets\"  \"package:methods\"  \n#>  [9] \"Autoloads\"         \"package:base\"\ndetach(\"package:MASS\")\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nparent.env(.GlobalEnv)\n#> <environment: package:stats>\n#> attr(,\"name\")\n#> [1] \"package:stats\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.2/library/stats\"\nparent.env(parent.env(.GlobalEnv))\n#> <environment: package:graphics>\n#> attr(,\"name\")\n#> [1] \"package:graphics\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.2/library/graphics\"\nparent.env(parent.env(parent.env(.GlobalEnv)))\n#> <environment: package:grDevices>\n#> attr(,\"name\")\n#> [1] \"package:grDevices\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.2/library/grDevices\"\nenvironmentName(parent.env(parent.env(parent.env(.GlobalEnv))))\n#> [1] \"package:grDevices\"\nconflicts()\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nexists(\"kronecker\")\n#> [1] TRUE\nexists(\"kronecker\", where = 1)\n#> [1] TRUE\nexists(\"kronecker\", where = 1, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 2)\n#> [1] TRUE\nexists(\"kronecker\", where = 2, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 7, inherits = FALSE)\n#> [1] TRUE\nexists(\"kronecker\", where = 8, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 9, inherits = FALSE)\n#> [1] TRUE\nsapply(search(), function(x) exists(\"kronecker\", where = x, inherits=FALSE))\n#>        .GlobalEnv     package:stats  package:graphics \n#>             FALSE             FALSE             FALSE \n#> package:grDevices     package:utils  package:datasets \n#>             FALSE             FALSE             FALSE \n#>   package:methods         Autoloads      package:base \n#>              TRUE             FALSE              TRUE\nget (\"%o%\") \n#> function (X, Y) \n#> outer(X, Y)\n#> <bytecode: 0x000001c01444f3c0>\n#> <environment: namespace:base>\nmean <- mean (rnorm (1000))\nget (mean)\n#> Error in get(mean): invalid first argument\nget (\"mean\") \n#> [1] -0.06946131\nget (\"mean\", pos = 1) \n#> [1] -0.06946131\nget (\"mean\", pos = 2)\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000001c0122c2158>\n#> <environment: namespace:base>\nrm (mean)\nwith (beaver1, mean(time))\n#> [1] 1312.018\nwith (beaver2, mean(time))\n#> [1] 1446.2"},{"path":"objects.html","id":"the-organisation-of-data-data-structures","chapter":"2 Managing objects","heading":"2.4 The organisation of data (data structures)","text":"Study help files list(), matrix(), data.frame() c() carefully.list created function list(). list basic means storing collection data objects R modes /lengths objects different. List elements accessed using [[ ]] $ objects named. List objects named using constructionand elements retrieved using instructionA matrix R rectangular collection data, mode (e.g. numeric, character/text logical). formed constructionMatrix elements accessed using .matrix[,j]. functions nrow(), ncol(), dim(), dimnames(), colnames() rownames() useful working matrices.dataframe also rectangular collection data columns can different modes. can regarded cross list matrix. Dataframes constructed function data.frame().Study help files functions.","code":"\nmy.list <- list(name1 = 1:10, name2 = mean)\nmy.list\n#> $name1\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> $name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000001c0122c2158>\n#> <environment: namespace:base>\nmy.list[[2]]\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000001c0122c2158>\n#> <environment: namespace:base>\nmy.list$name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000001c0122c2158>\n#> <environment: namespace:base>\nmy.matrix <- matrix(1:12, ncol=3, nrow=4, byrow=FALSE)\nmy.matrix\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12"},{"path":"objects.html","id":"time-series","chapter":"2 Managing objects","heading":"2.5 Time series","text":"Study usage function ts().","code":""},{"path":"objects.html","id":"the-functions-as.xxx-and-is.xxx","chapter":"2 Managing objects","heading":"2.6 The functions as.xxx() and is.xxx()","text":"function .xxx() transforms object best possible specified type e.g. .matrix(mydata) transforms numerical dataframe numerical matrix. .xxx() tests argument certain type e.g. .matrix(mydata) evaluates false mydata satisfy conditions matrix.","code":""},{"path":"objects.html","id":"simple-manipulations-numbers-and-vectors","chapter":"2 Managing objects","heading":"2.7 Simple manipulations; numbers and vectors","text":"Explain vector calculations recycling principle referring example .Logical vectors. Explain behaviour instruction belowMissing values: NA (indicate missing value data), NaN (number)Character vectors: see section 3.5.11Character vectors: see section 3.5.11Subscripting vectors: see section 5.1Subscripting vectors: see section 5.1","code":"\nc(1,3,5,9) + c(1,2,3)\n#> Warning in c(1, 3, 5, 9) + c(1, 2, 3): longer object length\n#> is not a multiple of shorter object length\n#> [1]  2  5  8 10\nsum (c (TRUE, FALSE, TRUE, TRUE, FALSE))\n#> [1] 3\n10/0\n#> [1] Inf\n0/0\n#> [1] NaN"},{"path":"objects.html","id":"objects-their-modes-and-attributes","chapter":"2 Managing objects","heading":"2.8 Objects, their modes and attributes","text":"Vector elements must mode: logical, numeric, complex, characterEmpty object; created (e.g. xx <- numeric()) components may added (e.g. xx[5] <- 22)Getting setting attributes: functions attr() attributes()Class object function unclass() removing class.","code":""},{"path":"objects.html","id":"representation-of-objects","chapter":"2 Managing objects","heading":"2.9 Representation of objects","text":"already seen representation object can obtained calling (entering) name:often convenient full representation returned object . functions head(), str() summary() available extracting partial representation object:many R functions provided getting information R object represents. functions like mode(), class(), length(), levels(), .xxx() .xxx() already encountered others given chapters come.","code":"\ncars\n#>    speed dist\n#> 1      4    2\n#> 2      4   10\n#> 3      7    4\n#> 4      7   22\n#> 5      8   16\n#> 6      9   10\n#> 7     10   18\n#> 8     10   26\n#> 9     10   34\n#> 10    11   17\n#> 11    11   28\n#> 12    12   14\n#> 13    12   20\n#> 14    12   24\n#> 15    12   28\n#> 16    13   26\n#> 17    13   34\n#> 18    13   34\n#> 19    13   46\n#> 20    14   26\n#> 21    14   36\n#> 22    14   60\n#> 23    14   80\n#> 24    15   20\n#> 25    15   26\n#> 26    15   54\n#> 27    16   32\n#> 28    16   40\n#> 29    17   32\n#> 30    17   40\n#> 31    17   50\n#> 32    18   42\n#> 33    18   56\n#> 34    18   76\n#> 35    18   84\n#> 36    19   36\n#> 37    19   46\n#> 38    19   68\n#> 39    20   32\n#> 40    20   48\n#> 41    20   52\n#> 42    20   56\n#> 43    20   64\n#> 44    22   66\n#> 45    23   54\n#> 46    24   70\n#> 47    24   92\n#> 48    24   93\n#> 49    24  120\n#> 50    25   85\nhead(cars)\n#>   speed dist\n#> 1     4    2\n#> 2     4   10\n#> 3     7    4\n#> 4     7   22\n#> 5     8   16\n#> 6     9   10\nsummary(cars)\n#>      speed           dist       \n#>  Min.   : 4.0   Min.   :  2.00  \n#>  1st Qu.:12.0   1st Qu.: 26.00  \n#>  Median :15.0   Median : 36.00  \n#>  Mean   :15.4   Mean   : 42.98  \n#>  3rd Qu.:19.0   3rd Qu.: 56.00  \n#>  Max.   :25.0   Max.   :120.00\nstr(cars)\n#> 'data.frame':    50 obs. of  2 variables:\n#>  $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n#>  $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\nlength(cars) \n#> [1] 2\nlength(as.matrix(cars))\n#> [1] 100\ndim(cars)\n#> [1] 50  2\nis.matrix(cars)\n#> [1] FALSE\nis.data.frame(cars)\n#> [1] TRUE\nis.list(cars)\n#> [1] TRUE\nmode(cars)\n#> [1] \"list\"\nclass(cars)\n#> [1] \"data.frame\"\nlevels(cars)\n#> NULL"},{"path":"objects.html","id":"exercise-3","chapter":"2 Managing objects","heading":"2.10 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"objects.html","id":"exercise-4","chapter":"2 Managing objects","heading":"2.10.1 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.","code":""},{"path":"objects.html","id":"exercise-5","chapter":"2 Managing objects","heading":"2.10.2 Exercise","text":"Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).","code":""},{"path":"objects.html","id":"exercise-6","chapter":"2 Managing objects","heading":"2.10.3 Exercise","text":"Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.","code":""},{"path":"objects.html","id":"exercise-7","chapter":"2 Managing objects","heading":"2.10.4 Exercise","text":"Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"operators.html","id":"operators","chapter":"3 R operators and functions","heading":"3 R operators and functions","text":"completing Chapters 1 2 assumed following now familiar:communicate R;manage workspaces;perform simple tasks using R.chapter take closer look behaviour commonR operatorsR functions.","code":""},{"path":"operators.html","id":"arithmetic-operators","chapter":"3 R operators and functions","heading":"3.1 Arithmetic operators","text":"Study use operators Table 3.1.Table 3.1:  Arithmetic operators.Note arithmetic operators also functions. follows studying following examples:Rules operator expressions vector arguments.Study results following R instructions.Explain following instructions output R:examples illustrated R uses vectorized arithmetic .e. operates vectors wholes. Sometimes recycling principle applied without warning. good R programming habit make use vectorizing calculations possible. effect recycling principle must kept mind since might lead unwanted results.Missing values, infinity “number”.missing value R denoted NA. result computation involving NAs always NA e.g.result computation represented number e.g. 0/0 denoted NaN.\nNote: computational results differently reported R corresponding algebraic equivalents, 5/0 R given Inf algebraically undefined.Scientific notationR uses decimal notation well scientific notation arithmetic calculations. Scientific notation confused \\(exp()\\).numbers represented computer’s memory? implications ?Computers use /(1/0) switches encoding information. single switch called bit group eight bits called byte. single integer represented exactly computer fixed number bytes .e. 32 64 bits. several schemes according integers represented bits computer. representation computer takes place level R control R stores information computing environment object .Machine. element .Machine$integer.max returns largest integer can represented computer R running e.g.Although method representing integers strings bits provides efficient way storing integers computer R usually treats integers similar real numbers using floating point representation. binary floating point notation number x written sequence zeros ones (mantissa) times two exponent say \\(m\\): \\(x=b_0 b_1 b_2…×2^m\\) \\(b_0=1\\) except \\(x=0\\).practice limited number \\(b\\)’s available exponent also limited therefore, general, real numbers can represented exactly computer – can approximated. smallest number \\(x\\) \\(1 + x\\) can distinguished \\(1\\) computer called machine epsilon. R can obtained .Machine$double.eps e.g.Although floating point representation allows computation small (magnitude) large numbers limitations can lead underflow overflow can disastrous consequences practice. Writing good code R must take seriously account.","code":"\n3+7\n#> [1] 10\n\"+\"(3,7)\n#> [1] 10\n17 %% 3\n#> [1] 2\n\"%%\"(17,3)\n#> [1] 2\ncars [,2] * 12 * 25.4 / 1000\n#>  [1]  0.6096  3.0480  1.2192  6.7056  4.8768  3.0480  5.4864\n#>  [8]  7.9248 10.3632  5.1816  8.5344  4.2672  6.0960  7.3152\n#> [15]  8.5344  7.9248 10.3632 10.3632 14.0208  7.9248 10.9728\n#> [22] 18.2880 24.3840  6.0960  7.9248 16.4592  9.7536 12.1920\n#> [29]  9.7536 12.1920 15.2400 12.8016 17.0688 23.1648 25.6032\n#> [36] 10.9728 14.0208 20.7264  9.7536 14.6304 15.8496 17.0688\n#> [43] 19.5072 20.1168 16.4592 21.3360 28.0416 28.3464 36.5760\n#> [50] 25.9080\n7%/%3\n#> [1] 2\n7%%3\n#> [1] 1\nmatrix(1,nrow=4,ncol=4) * matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    3    3    3    3\n#> [2,]    3    3    3    3\n#> [3,]    3    3    3    3\n#> [4,]    3    3    3    3\nmatrix(1,nrow=4,ncol=4) %*% matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   12   12   12\n#> [2,]   12   12   12   12\n#> [3,]   12   12   12   12\n#> [4,]   12   12   12   12\n1:12 + 1:3\n#>  [1]  2  4  6  5  7  9  8 10 12 11 13 15\n1:10 + 1:2\n#>  [1]  2  4  4  6  6  8  8 10 10 12\n1:10 + 1:3\n#> Warning in 1:10 + 1:3: longer object length is not a\n#> multiple of shorter object length\n#>  [1]  2  4  6  5  7  9  8 10 12 11\nmean(c(1,3,NA,12,5))\n#> [1] NA\n0/0\n#> [1] NaN\n5/0\n#> [1] Inf\n-5/0\n#> [1] -Inf\n5/(-0)\n#> [1] -Inf\n60000000\n#> [1] 6e+07\n1/6000000\n#> [1] 1.666667e-07\nexp(15)\n#> [1] 3269017\nexp(-15)\n#> [1] 3.059023e-07\n.Machine$integer.max\n#> [1] 2147483647\n.Machine$double.eps\n#> [1] 2.220446e-16"},{"path":"operators.html","id":"logical-operators","chapter":"3 R operators and functions","heading":"3.2 Logical operators","text":"Logical operators result TRUE, FALSE NA. Study use logical operators Table 3.2. Warning: perfectly legitimate writeit incorrect specifyThe correct code latter case isWhat consequences code? Also take note functions () (). two functions useful combining logical objects. Give necessary instructions carry following tasks:Check states state.x77 data set populations illiteracy rate larger \\(1.6\\) Murder rate \\(10.0\\).Check least one state income greater \\(\\$5000\\) life expectancy less \\(70.0\\) years.Check states income \\(\\$5000\\) illiteracy \\(2.0\\).meant control logical operator?Table 3.2:  Logical operators.Carry instructions:Comment .result sum(c(TRUE, !FALSE, FALSE, TRUE, TRUE))?result sum(c(TRUE, !FALSE, FALSE, NA, TRUE)) ?Explain","code":"\nx[x == -1] <- 0\nx[x == 1] <- 0 x[x == NA] <- 0\nx[x = = NaN] <- 0 \nx[is.na(x)] <- 0\nx[is.nan(x)] <- 0\nmata <- matrix(1:4, ncol = 2)\nmatb <- matrix(c(10, 20, 30, 40), ncol = 2)\nmata\n#>      [,1] [,2]\n#> [1,]    1    3\n#> [2,]    2    4\nmatb\n#>      [,1] [,2]\n#> [1,]   10   30\n#> [2,]   20   40\nmata>1 & matb>1\n#>       [,1] [,2]\n#> [1,] FALSE TRUE\n#> [2,]  TRUE TRUE\nmata>1 | matb>1\n#>      [,1] [,2]\n#> [1,] TRUE TRUE\n#> [2,] TRUE TRUE\nmata>1 && matb>1\n#> Error in mata > 1 && matb > 1: 'length = 4' in coercion to 'logical(1)'\nmata>1 || matb>1\n#> Error in mata > 1 || matb > 1: 'length = 4' in coercion to 'logical(1)'"},{"path":"operators.html","id":"the-operators-----and","chapter":"3 R operators and functions","heading":"3.3 The operators <-, <<- and ~","text":"considering use operators answer following:happen object aa working directory within function following assignment made aa <- 20?happen object aa working directory within function following assignment made aa <- 20?Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.tilde operator used modelling functions, e.g. lm (length ~ age).tilde operator used modelling functions, e.g. lm (length ~ age).","code":""},{"path":"operators.html","id":"operator-precedence","chapter":"3 R operators and functions","heading":"3.4 Operator precedence","text":"Study precedence rules summarized Table 3.4.1. rules followed shown Table 3.3 top bottom left right. Note use ofparentheses ( ) function arguments changing precedence,braces { } demarcating blocks instructionsand brackets [ ] subscripting.correct way extracting fifth element sequence like 1:20 isTable 3.3:  Precedence rules.Explain result following R instructions:","code":"\n(1:20)[5]\n#> [1] 5\n20 / 4 * 12 ^2 - 6 + 1\n#> [1] 715\n(20 / 4) * (12 ^2) + (-6 + 14)\n#> [1] 728\n20 / 4 * 12 ^(2 - 6 + 14)\n#> [1] 309586821120\n20 / 4 * (12 ^2 - 6 + 14)\n#> [1] 760"},{"path":"operators.html","id":"some-mathematical-functions","chapter":"3 R operators and functions","heading":"3.5 Some mathematical functions","text":"","code":""},{"path":"operators.html","id":"general-mathematical-functions","chapter":"3 R operators and functions","heading":"3.5.1 General mathematical functions","text":"abs(), exp(), log(x, base = exp(1)), log10(), gamma(), sign(), sqrt()","code":""},{"path":"operators.html","id":"trigonometric-functions","chapter":"3 R operators and functions","heading":"3.5.2 Trigonometric functions","text":"See Table 3.4.Table 3.4:  Trigonometric functions.","code":""},{"path":"operators.html","id":"complex-numbers","chapter":"3 R operators and functions","heading":"3.5.3 Complex numbers","text":"Arg(), Conj(), Mod(), Re(), Im()","code":""},{"path":"operators.html","id":"functions-for-rounding-and-truncating","chapter":"3 R operators and functions","heading":"3.5.4 Functions for rounding and truncating","text":"round(), ceiling(), floor(), trunc()Study help files functions. Check arguments.","code":""},{"path":"operators.html","id":"functions-for-matrices","chapter":"3 R operators and functions","heading":"3.5.5 Functions for matrices","text":"Study Table 3.5 detail.Two functions play important role matrix calculations functions rbind() cbind() concatenating matrices row-wise column-wise. Also revise functions matrix(), dim(), dimnames(), colnames(), rownames() well scan() read.table().Table 3.5:  Functions matrices.function chol() performs Cholesky decomposition square, symmetric, positive definite matrix \\(\\mathbf{}=\\mathbf{U}'\\mathbf{U}\\) \\(\\mathbf{U}\\) upper triangular matrix.function chol() performs Cholesky decomposition square, symmetric, positive definite matrix \\(\\mathbf{}=\\mathbf{U}'\\mathbf{U}\\) \\(\\mathbf{U}\\) upper triangular matrix.function crossprod (, B) returns matrix \\(\\mathbf{'B}\\).function crossprod (, B) returns matrix \\(\\mathbf{'B}\\).function diag(arg) performs various actions depending argument: arg positive integer diag(arg) returns identity matrix given size; arg vector diag(arg) returns diagonal matrix diagonal elements respective elements given vector; arg matrix diag(arg) returns vector containing diagonal elements given matrix.function diag(arg) performs various actions depending argument: arg positive integer diag(arg) returns identity matrix given size; arg vector diag(arg) returns diagonal matrix diagonal elements respective elements given vector; arg matrix diag(arg) returns vector containing diagonal elements given matrix.difference diag() diag(diag()) square matrix?difference diag() diag(diag()) square matrix?function eigen() operates square matrix returns list named elements values vectors containing respectively, eigenvalues eigenvectors. Study help file eigen() carefully.function eigen() operates square matrix returns list named elements values vectors containing respectively, eigenvalues eigenvectors. Study help file eigen() carefully.function kronecker() returns Kronecker product \\(\\mathbf{} \\otimes \\mathbf{B}\\) matrices \\(\\mathbf{}\\) \\(\\mathbf{B}\\).function kronecker() returns Kronecker product \\(\\mathbf{} \\otimes \\mathbf{B}\\) matrices \\(\\mathbf{}\\) \\(\\mathbf{B}\\).function outer (x, y, f) operates two vectors \\(x:n\\times 1\\) \\(y:p\\times 1\\) return matrix size \\(n \\times p\\) \\(ij\\)th element result applying function f x[] y[j]. default f *.function outer (x, y, f) operates two vectors \\(x:n\\times 1\\) \\(y:p\\times 1\\) return matrix size \\(n \\times p\\) \\(ij\\)th element result applying function f x[] y[j]. default f *.function scale() three arguments: matrix first argument; second argument center third argument scale. center = FALSE, centring columns matrix argument performed, set TRUE (default), mean value column subtracted respective columns, given vector values values subtracted respective columns. scale = FALSE, scaling columns matrix argument performed, set TRUE (default) column divided standard deviation, given vector values column divided corresponding value.function scale() three arguments: matrix first argument; second argument center third argument scale. center = FALSE, centring columns matrix argument performed, set TRUE (default), mean value column subtracted respective columns, given vector values values subtracted respective columns. scale = FALSE, scaling columns matrix argument performed, set TRUE (default) column divided standard deviation, given vector values column divided corresponding value.function solve (, b) used solving equation \\(\\mathbf{Ax=b}\\) \\(\\mathbf{x}\\), \\(\\mathbf{b}\\) can either vector matrix \\(\\mathbf{}\\) square matrix. argument b missing taken identity matrix inverse argument returned.function solve (, b) used solving equation \\(\\mathbf{Ax=b}\\) \\(\\mathbf{x}\\), \\(\\mathbf{b}\\) can either vector matrix \\(\\mathbf{}\\) square matrix. argument b missing taken identity matrix inverse argument returned.function svd() returns singular value decomposition matrix argument \\(\\mathbf{=UDV}'\\). returns list three components: u orthogonal orthonormal matrix \\(\\mathbf{U}\\); d vector containing ordered singular values rectangular matrix \\(\\mathbf{}\\); v orthogonal orthonormal matrix $.function svd() returns singular value decomposition matrix argument \\(\\mathbf{=UDV}'\\). returns list three components: u orthogonal orthonormal matrix \\(\\mathbf{U}\\); d vector containing ordered singular values rectangular matrix \\(\\mathbf{}\\); v orthogonal orthonormal matrix $.function qr() performs QR decomposition arbitrary matrix \\(\\mathbf{M=QR}\\) \\(\\mathbf{Q}\\) orthogonal matrix \\(\\mathbf{R}\\) upper triangular matrix. Study help file qr() full details usages function. Note matrices \\(\\mathbf{Q}\\) \\(\\mathbf{R}\\) can obtained directly calling qr.Q(qr()) qr.R(qr()), respectively.function qr() performs QR decomposition arbitrary matrix \\(\\mathbf{M=QR}\\) \\(\\mathbf{Q}\\) orthogonal matrix \\(\\mathbf{R}\\) upper triangular matrix. Study help file qr() full details usages function. Note matrices \\(\\mathbf{Q}\\) \\(\\mathbf{R}\\) can obtained directly calling qr.Q(qr()) qr.R(qr()), respectively.meaning following instructions?rbind(,b); rbind(1,x); rbind(= 1:5,b = 10:14,c=20:24); cbind( = 1:5, b=10:14, c=20:24)Write function calculate determinant square matrix. Name function det.() order distinguish built R function det().Write function calculate determinant square matrix. Name function det.() order distinguish built R function det().user satisfied function, often necessary available R projects. useful assign functions data base folder. Use function assign (x, object, pos = , envir = ) store function det.() R functions folder. argument x assign() character string assigning name object. function remove (list objects names, pos = , envir = ) can used remove objects database. Hint: First create file use attach() add R search path.user satisfied function, often necessary available R projects. useful assign functions data base folder. Use function assign (x, object, pos = , envir = ) store function det.() R functions folder. argument x assign() character string assigning name object. function remove (list objects names, pos = , envir = ) can used remove objects database. Hint: First create file use attach() add R search path.Study save() works.Study attach() works.Study assign() works.Explain use argument list=objects(2). summarize: construction NAME <- object simple way assign object name. form assignment always takes place global environment (workspace). Assignment can also performed using functions save() assign() illustrated . latter form assignment complicated assignment restricted global environment.result function gamma(x) \\((x-1)!\\) \\(x\\) non-negative whole number. Now write function fact() calculate \\(x!\\). function must make provision \\(0!\\) well negative number fraction read mistake. Hint: First study usage statement requesting help ?Control, recall Table 1.1. Store function folder R functions. go make fact() det.() available R project?result function gamma(x) \\((x-1)!\\) \\(x\\) non-negative whole number. Now write function fact() calculate \\(x!\\). function must make provision \\(0!\\) well negative number fraction read mistake. Hint: First study usage statement requesting help ?Control, recall Table 1.1. Store function folder R functions. go make fact() det.() available R project?function lgamma(x) returns logarithms \\(\\Gamma(x)\\). Write function calculate value \\(f(n) = \\frac{\\Gamma(\\frac{n-1}{2})}{\\Gamma(\\frac{1}{2})\\Gamma(\\frac{n-2}{2})}\\). Calculate value \\(f(n)\\) \\(n = -10, 10, 100, 500, 1000\\).function lgamma(x) returns logarithms \\(\\Gamma(x)\\). Write function calculate value \\(f(n) = \\frac{\\Gamma(\\frac{n-1}{2})}{\\Gamma(\\frac{1}{2})\\Gamma(\\frac{n-2}{2})}\\). Calculate value \\(f(n)\\) \\(n = -10, 10, 100, 500, 1000\\).","code":"save(file= \" C:\\\\MyFunctions\").  attach(\"C:\\\\MyFunctions\", pos=2). assign(\"det.own\", det.own, pos=2). \nsave(list=objects(2), file = \"C:\\\\MyFunctions\")"},{"path":"operators.html","id":"sorting-functions","chapter":"3 R operators and functions","heading":"3.5.6 Sorting functions","text":"Note use functions sort(), order() rank(). First construct MatX using functions scan() matrix(). Explain detail order() sorting columns MatX according values first column matrix.\\[\nMatX = \\begin{bmatrix}\n         4 & 80 & 12\\\\\n         5 & 70 & 70\\\\\n         6 & 30 & 19\\\\\n         2 & 40 & 80\\\\\n         4 & 90 & 40\\\\\n         1 & 60 & 50\\\\\n         7 & 10 & 20\\\\\n         3 & 30 & 200\n       \\end{bmatrix}\n\\]","code":""},{"path":"operators.html","id":"some-functions-for-data-manipulation","chapter":"3 R operators and functions","heading":"3.5.7 Some functions for data manipulation","text":"Study functions Table 3.6.Table 3.6:  Functions data manipulation.Insert vector (101, 102, 103, 104, 105) vector (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) fifth element utilising argument function append().Insert vector (101, 102, 103, 104, 105) vector (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) fifth element utilising argument function append().function replace() requires three arguments x, list vals. values x indices given list replaced successive values vals making use recycling principle needed. Explain replacing vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1,1 15), values 10, 20 15 zeros.function replace() requires three arguments x, list vals. values x indices given list replaced successive values vals making use recycling principle needed. Explain replacing vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1,1 15), values 10, 20 15 zeros.Find unique values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15).Find unique values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15).Find duplicated values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15, 20, 20, 15).Find duplicated values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15, 20, 20, 15).Explain usage match() considering difference betweenExplain usage match() considering difference betweenIllustrate difference match() pmatch() considering names days week.","code":"\nmatch (c(10,2,7,20,5,8,9,20,9,1,15), c(10,20,15))\n#>  [1]  1 NA NA  2 NA NA NA  2 NA NA  3\nmatch (c(10,20,15), c(10,2,7,20,5,8,9,20,9,1,15))\n#> [1]  1  4 11"},{"path":"operators.html","id":"basic-statistical-functions","chapter":"3 R operators and functions","heading":"3.5.8 Basic statistical functions","text":"Study functions detail Table 3.7.Table 3.7:  Basic statistical functions.Note also functions pmax() pmin().Find average Life Expectancy states state.x77 data set.Find 5% trimmed mean Illiteracy states state.x77 data set.Find correlation Illiteracy Income states state.x77 data set.Find covariance matrix variables state.x77 data set.Find range Murder state.x77 data set.Obtain details random sample 10 states state.x77 data set.Obtain two independent random permutations numbers \\(1, 2, \\dots, 10\\).Write function computing coefficient kurtosis random sample. Test function Frost variable state.x77 data set.Write function computing coefficient skewness random sample. Test function Murder variable state.x77 data set.Write function compute harmonic mean numeric vector. Test function Life Expectancy states state.x77 data set. Compare answer answer ().","code":""},{"path":"operators.html","id":"probability-distributions-in-r","chapter":"3 R operators and functions","heading":"3.5.9 Probability distributions in R","text":"First, execute R-instructionto obtain list available statistical distributions R. distribution identifying name preceded one letters d, p, q r. case F-distribution, example, identifier just letter f normal distribution identifier norm. Preceding distribution’s identifier one letters d, p, q r returns density value, probability, quantile random sample specified distribution (probability density function probability mass function). See Figure 3.1 explanation.\nFigure 3.1: Meaning letters d, p q preceding R distribution identifier.\n","code":"\nhelp.search(\"distribution\")"},{"path":"operators.html","id":"areagrp","chapter":"3 R operators and functions","heading":"3.5.10 Functions for categorical variables","text":"Apart numeric logical, data R can also categorical (factor R) character strings. Study detail functions operating factor data Table 3.8.Use cut() create object areagrp divide state.x77 data set three groups representing states area within intervals \\((0, 10 000]\\),\\((10 000, 100 000]\\) \\((100 000, Inf]\\), respectively. Hint: First study arguments cut().Use cut() create object areagrp divide state.x77 data set three groups representing states area within intervals \\((0, 10 000]\\),\\((10 000, 100 000]\\) \\((100 000, Inf]\\), respectively. Hint: First study arguments cut().Repeat () argument labels = ?? specify state Small, Medium Large respect area.Repeat () argument labels = ?? specify state Small, Medium Large respect area.Use unclass() obtain numeric codes associated level areagrp.Use unclass() obtain numeric codes associated level areagrp.Repeat () obtain areagrp2 containing five equally spaced categories.Repeat () obtain areagrp2 containing five equally spaced categories.Repeat () obtain areagrp3 containing five groups containing \\(20\\%\\) data.Repeat () obtain areagrp3 containing five groups containing \\(20\\%\\) data.Use cut() create object illitgrp divide state.x77 data set five groups representing states illiteracy within interval \\([0, 0.50)\\), \\([0.50, 1.00)\\), \\([1.00, 1.50)\\), \\([1.50, 2.00)\\) \\([2.00, 5.00)\\), respectively.Use cut() create object illitgrp divide state.x77 data set five groups representing states illiteracy within interval \\([0, 0.50)\\), \\([0.50, 1.00)\\), \\([1.00, 1.50)\\), \\([1.50, 2.00)\\) \\([2.00, 5.00)\\), respectively.Obtain two-way table state.x77 data set according areagrp illitgrp.Obtain two-way table state.x77 data set according areagrp illitgrp.Table 3.8:  Basic functions categorical variables.","code":""},{"path":"operators.html","id":"character","chapter":"3 R operators and functions","heading":"3.5.11 Functions for character manipulation","text":"Study functions Table 3.9 detail.Table 3.9:  Basic functions character manipulation.returned value grep (\"ia\", state.name)?returned value grep (\"ia\", state.name)?Discuss usage grep (\"ia\", state.name).Discuss usage grep (\"ia\", state.name).Discuss output objects (pos = grep(\"stats\", search())).Discuss output objects (pos = grep(\"stats\", search())).Use paste() create variable names: var1, var2, …, var100.Use paste() create variable names: var1, var2, …, var100.Repeat (d) create variable names: var_1, var_2, …, var_100.Repeat (d) create variable names: var_1, var_2, …, var_100.Discuss output :Discuss output :Help menu, select Manuals (PDF) open Introduction R document. Obtain copy first two paragraphs Preface page 1 book R commands window. Use copy calculate number words well total number characters (including spaces words) passage.going use several functions Table 3.9 perform task steps. Proceed follows R copying relevant passage clipboard:obtain vector containing words separate element.convert TextPar vector containing one element consisting words concatenated separated spaces single character string. Add correct line breaks (“\\n”) TextPar using e.g. fix().change TextPar character vector.","code":"substring (paste (letters, collapse = \"\"),  \n             1:nchar (paste (letters, collapse=\"\")), \n             1:nchar (paste (letters, collapse=\"\")))\nTextPar <- scan(file = \"clipboard\", what = \"\")\nTextPar <- paste (TextPar, collapse = \" \")\nTextPar <- strsplit(x = TextPar, split = '\\n')mode(TextPar)\n[1] \"list\"\n\nmode(unlist(TextPar))\n[1] \"character\" \nTextPar <- unlist(TextPar)\nnchar(TextPar)\nlength(TextPar)"},{"path":"operators.html","id":"differentiation-and-integration","chapter":"3 R operators and functions","heading":"3.6 Differentiation and integration","text":"","code":""},{"path":"operators.html","id":"symbolic-differentiation","chapter":"3 R operators and functions","heading":"3.6.1 Symbolic differentiation","text":"Study help files D() deriv().","code":""},{"path":"operators.html","id":"integration","chapter":"3 R operators and functions","heading":"3.6.2 Integration","text":"Study help file integrate().","code":""},{"path":"operators.html","id":"exercise-8","chapter":"3 R operators and functions","heading":"3.6.3 Exercise","text":"known elementary statistics approximately 68% data normal distribution mean zero standard deviation unity absolute value less unity. Use sum() rnorm() functions find proportion \\(n\\) random \\(normal (0, 1)\\) variables whose absolute value less \\(1.0\\). Repeat different values \\(n\\) investigate widely results vary.known elementary statistics approximately 68% data normal distribution mean zero standard deviation unity absolute value less unity. Use sum() rnorm() functions find proportion \\(n\\) random \\(normal (0, 1)\\) variables whose absolute value less \\(1.0\\). Repeat different values \\(n\\) investigate widely results vary.Define: conditional inverse generalized (Moore-Penrose) inverse matrix \\(\\mathbf{X}: p \\times q\\) make provision \\(p = q\\), \\(p > q\\) \\(p < q\\). First, show svd \\(\\mathbf{X}\\) can used obtain conditional inverse, \\(\\mathbf{X}^c\\) \\(\\mathbf{X}\\). Now use information write R function calculating \\(\\mathbf{X}^c\\) given \\(\\mathbf{X}\\). function must provide test check calculated conditional inverse indeed conditional inverse. Illustrate usage function.Define: conditional inverse generalized (Moore-Penrose) inverse matrix \\(\\mathbf{X}: p \\times q\\) make provision \\(p = q\\), \\(p > q\\) \\(p < q\\). First, show svd \\(\\mathbf{X}\\) can used obtain conditional inverse, \\(\\mathbf{X}^c\\) \\(\\mathbf{X}\\). Now use information write R function calculating \\(\\mathbf{X}^c\\) given \\(\\mathbf{X}\\). function must provide test check calculated conditional inverse indeed conditional inverse. Illustrate usage function.Give necessary instructions :\nread R external text data file consisting \\(10\\) sample observations consisting one character variable two numerical variables.\nread R large external text data file consisting \\(50\\) numerical variables unknown number records. record data file takes 5 lines. variables R object must names X1, …, X50.\nGive necessary instructions :read R external text data file consisting \\(10\\) sample observations consisting one character variable two numerical variables.read R large external text data file consisting \\(50\\) numerical variables unknown number records. record data file takes 5 lines. variables R object must names X1, …, X50.Discuss meaning following R instructions:\ny <- x[!.na(x)]\nz <- (x + y)[!.na(x) & x >0]\n<- x[-(1:5)]\nx[.na(x)] <- 0\nDiscuss meaning following R instructions:y <- x[!.na(x)]z <- (x + y)[!.na(x) & x >0]<- x[-(1:5)]x[.na(x)] <- 0","code":""},{"path":"graphics.html","id":"graphics","chapter":"4 Introducing traditional R graphics","heading":"4 Introducing traditional R graphics","text":"basic knowledge R graphics needed directing attention art writing programs (functions) R. Therefore, chapter brief overview given basics traditional R graphics. later chapter, studying principles R programming, second round R graphics follow.","code":""},{"path":"graphics.html","id":"general-1","chapter":"4 Introducing traditional R graphics","heading":"4.1 General","text":"Study graphical parameters requestingIn Figure 4.1 main components graph window illustrated. Study figure detail. Plot Region together theMargins called Figure Region.\nFigure 4.1: main components graph window parameters controlling sizes. parameter mai numerical vector form c(bottom, left, top, right) specifying margins inches parameter mar similar form specifying respective margins number lines. default mar c(5, 4, 4, 2) + 0.1.\ndifference high-level low-level plotting instructions?difference high-level low-level plotting instructions?Take note especially functions windows(), win.graph() x11() used well different options available functions.Take note especially functions windows(), win.graph() x11() used well different options available functions.instruction dev.new() allows opening new graph window platform-independent way.instruction dev.new() allows opening new graph window platform-independent way.chapter high-level plotting instructions studied. instructions results (new) graph window complete graph drawn. command graphics.() deletes open graphic devices.chapter high-level plotting instructions studied. instructions results (new) graph window complete graph drawn. command graphics.() deletes open graphic devices.Study use par(), par(mfrow =) par(mfcol =). Study use par(new = TRUE) plot one figure set axes.Study use par(), par(mfrow =) par(mfcol =). Study use par(new = TRUE) plot one figure set axes.Study functions graphics.() dev.() work.Study functions graphics.() dev.() work.","code":"\n?par"},{"path":"graphics.html","id":"highLevelPlotting","chapter":"4 Introducing traditional R graphics","heading":"4.2 High-level plotting instructions","text":"Construct barplot illiteracy states according areagrp (defined section 3.5.10) state.x77 dataframe. Hint: function tapply() operates vector given first argument. second argument groups first argument groups function given third argument can applied groups. Study following command:Construct, state.x77 data set, box plots illiteracy broken income states. First use cut() form three categories state income:use boxplot() together split() produce desired graph:Add labels axes well title figure.Repeat previous example use argument notch = TRUE.Repeat previous example use argument notch = TRUE.Attach package akima. usage function interp()? Discuss constructing following contour plot:Attach package akima. usage function interp()? Discuss constructing following contour plot:coplot? Discuss giving following instruction referring role tilde (~) operator.dotchart constructed function dotchart(). First preparations necessary:Complete graph adding label x-axis heading graph.Use function faces() available package aplpack construct Chernoff faces Western states data set state.x77. Hint: Western states appear rows 3, 5, 12, 26, 28, 37, 44, 47 50. Explain represented facial features. First set argument face.type = 0 face.type = 1.Use function faces() available package aplpack construct Chernoff faces Western states data set state.x77. Hint: Western states appear rows 3, 5, 12, 26, 28, 37, 44, 47 50. Explain represented facial features. First set argument face.type = 0 face.type = 1.Obtain histogram life expectancy states state.x77.Obtain histogram life expectancy states state.x77.Execute commandExecute commandInterpret graph.Three-dimensional graphs constructed function persp().Discuss meaning instructions. Experiment different values arguments theta phi.Obtain pie chart object areagrp defined section 3.5.10. Hint: function table() may useful .Obtain pie chart object areagrp defined section 3.5.10. Hint: function table() may useful .cluster plot (dendrogram) can constructed function plclust() follows:cluster plot (dendrogram) can constructed function plclust() follows:Interpret instructions resulting plot.Use function plot() plot \\(sin (\\theta)\\) \\(\\theta\\) varies \\(–\\pi\\) \\(\\pi\\).Use function plot() plot \\(sin (\\theta)\\) \\(\\theta\\) varies \\(–\\pi\\) \\(\\pi\\).explain different graphs resulting two calls (l) (m) plot() function ?explain different graphs resulting two calls (l) (m) plot() function ?Obtain empirical distribution function variable Life Exp state.x77 data set using functions cut(), ecdf() plot().Obtain empirical distribution function variable Life Exp state.x77 data set using functions cut(), ecdf() plot().Check normality variable Income state.x77 data set using function qqnorm().Check normality variable Income state.x77 data set using function qqnorm().Obtain qqplot income small states versus income large states data set state.x77 small large defined median income, respectively.Obtain qqplot income small states versus income large states data set state.x77 small large defined median income, respectively.Use function ts.plot() construct time series plot sunspots data set.","code":"\nbarplot (tapply (state.x77[, \"Illiteracy\"], areagrp, mean), \n         names=levels(areagrp), ylab = \"Illiteracy\", xlab = \"Area of State\", \n         main = \"Barplot of Mean Illiteracy\")\nstate.income <- cut (state.x77[ , \"Income\"], c(0, 4000, 5000, Inf),\n                   labels=c(\"$4000 or less\", \"$4001-$5000\", \"more than $5001\"))\nboxplot (split (state.x77[ , \"Income\"], state.income))\ncontour (interp (state.center$x, state.center$y,  state.x77[,\"Frost\"])) \ncoplot (state.x77[,\"Illiteracy\"] ~ state.x77[,\"Area\"] | state.x77[,\"Income\"])\nincgroup <- cut(state.x77[,\"Income\"],  3, \n                labels = c(\"LowInc\", \"MediumInc\", \"HighInc\"))\nlifgroup <- cut(state.x77[,\"Life Exp\"], 2, \n                labels = c(\"LowExp\", \"HighExp\"))\ntable.out <- tapply(state.x77 [,\"Income\"], list(lifgroup,incgroup), mean)\ntable.out\n#>           LowInc MediumInc HighInc\n#> LowExp  3640.917  4698.417    5807\n#> HighExp 4039.600  4697.667    5348\ndotchart (table.out, \n          levels (factor (col (table.out), \n                          labels = levels (incgroup)))[col(table.out)], \n          factor(row(table.out), labels = levels(lifgroup)))\npairs (state.x77)\npts <- seq(from = -pi, to = pi, len = 20)\nz <- outer(X = pts, Y = pts, function(x,y) sin(x)*cos(y))\npersp(x = pts, y = pts, z, theta = 10, phi = 60, ticktype = 'detailed')\nwest.rows <- c(3, 5, 12, 26, 28, 37, 44, 47, 50)\ndistmat.west <- dist (scale (state.x77[west.rows,]))\nplot(hclust(distmat.west), labels = rownames(state.x77)[west.rows])\nstate.size <- cut (state.x77[,\"Area\"],  \n                   c(0, median (state.x77[,\"Area\"]), max (state.x77[,\"Area\"])))\nstate.income <- split (state.x77[,\"Income\"], state.size)\nqqplot(state.income[[1]], state.income[[2]], xlab=\"Income for small states\", \n       ylab=\"income for large states\")"},{"path":"graphics.html","id":"interactive-communication-with-graphs","chapter":"4 Introducing traditional R graphics","heading":"4.3 Interactive communication with graphs","text":"Study help files functions text(), identify() locator().Study help files functions text(), identify() locator().Illustrate usage identify() scatterplot variables Illiteracy Life Exp state.x77 data set:Illustrate usage identify() scatterplot variables Illiteracy Life Exp state.x77 data set:create scatterplot, callNotice change cursor; cursor changes cross moved graph. Hover cursor point identify click left mouse button. Repeat \\(n = 5\\) times. Explain result. Next, create scatterplot callExplain happened.Illustrate usage locator() :Joining \\(5\\) user defined points graph interactively straight linesUse mouse select five points graph. happened graph? happened commands window?Writing text interactively specified position existing graph","code":"\nplot (x = state.x77[,'Life Exp'], y = state.x77[,'Income'])\nidentify (x = state.x77[,'Life Exp'], y = state.x77[,'Income'], \n          seq (along = rownames(state.x77)), n = 5)\nidentify (x = state.x77[,'Life Exp'],  y = state.x77[,'Income'], \n          labels = rownames(state.x77)[seq (along = \n                                              rownames(state.x77))] , n = 5) \nplot (x = state.x77[,'Life Exp'], y = state.x77[,'Income'])\nlocator(5, type = \"l\") \nplot (x = state.x77[,'Life Exp'], y = state.x77[,'Income'])\ntext (locator (n = 1, type = \"n\"), label = \"State with the highest income\")"},{"path":"graphics.html","id":"d-graphics-package-rgl","chapter":"4 Introducing traditional R graphics","heading":"4.4 3D graphics: package rgl","text":"Write execute following function.Study code constructions detail.","code":"\nrgl.example <- function (size = 0.1, col = \"green\", alpha.3d = 0.6) \n{ require(rgl)\n  datmat <- matrix (rnorm (30), ncol = 3)\n  open3d()\n  spheres3d (datmat,radius = size, color = col, alpha = alpha.3d)\n  axes3d(col = \"black\")\n  device.ID <- rgl.cur()\n  answer <- readline (\"Save 3D graph as a .png file? Y/N\\n\")\n  while (!(answer == \"Y\" | answer == \"y\" | answer == \"N\" | answer == \"n\")) \n    answer <- readline(\"Save 3D graph as a .png file? Y/N\\n\")\n  if (answer == \"Y\" | answer == \"y\") \n    repeat \n    { file.name <- readline (\"Provide file name including full \n                              path NOT in quotes and SINGLE \n                              back slashes!\\n\")\n      file.name <- paste (file.name, \".png\", sep = \"\")\n      snapshot3d (file = file.name)\n      rgl.set (device.ID)\n      answer2 <- readline(\"Save another 3D graph as a .png file? Y/N \\n\")\n      if (answer2 == \"Y\" | answer2 == \"y\") next else break\n    }\n  else rgl.set (device.ID)\n}"},{"path":"graphics.html","id":"exercise-9","chapter":"4 Introducing traditional R graphics","heading":"4.5 Exercise","text":"Obtain graph \\(normal(100, 25)\\) probability density function (p.d.f.).Obtain graph \\(normal(100, 25)\\) probability density function (p.d.f.).Plot set axes\ncentral \\(beta(9, 5)\\) p.d.f.;\nnon-central \\(beta(9 5)\\) p.d.f. non-centrality parameter = \\(15\\) \nnon-central \\(beta(9, 5)\\) p.d.f. non-centrality parameter = \\(40\\).\nPlot set axesa central \\(beta(9, 5)\\) p.d.f.;non-central \\(beta(9 5)\\) p.d.f. non-centrality parameter = \\(15\\) anda non-central \\(beta(9, 5)\\) p.d.f. non-centrality parameter = \\(40\\).Add suitable legend plot.Use persp() obtain graph user specified bivariate function. challenge function specification must appear main title graph. order address problem need information arguments persp():helpful tryThe reason error message follows persp.default visible. immediate visibility function regulated package builder package’s namespace mechanism. object names exported immediately visible; object names exported marked asterisk visible. functions\nargsAnywhere() getAnywhere() available get information asterisked object names:notice can make use argument main call persp() provide perspective plot title. However, main accepts character strings mathematical expressions. Furthermore, seen persp() example section 4.2 values argument z conveniently found call outer() using argument FUN. However FUN requires function. need means convert expressions character strings vice versa convert character strings expressions.following pairs functions allow conversions made:Character strings (” “) → expressions: parse() eval()Expressions (unquoted) → character strings (” “): deparse() substitute()Explain carefully parse() .Explain carefully eval() .Explain carefully role paste().Use volcano data :\nObtain perspective plot using persp().\nObtain RGL plot volcano data.\nUse volcano data :Obtain perspective plot using persp().Obtain perspective plot using persp().Obtain RGL plot volcano data.Obtain RGL plot volcano data.","code":"\nargs (persp)\n#> function (x, ...) \n#> NULL\nmethods (persp)\n#> [1] persp.default*\n#> see '?methods' for accessing help and source code\nargs (persp.default)\n#> Error in eval(expr, envir, enclos): object 'persp.default' not found\nargsAnywhere (persp.default)\n#> function (x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, \n#>     length.out = ncol(z)), z, xlim = range(x), ylim = range(y), \n#>     zlim = range(z, na.rm = TRUE), xlab = NULL, ylab = NULL, \n#>     zlab = NULL, main = NULL, sub = NULL, theta = 0, phi = 15, \n#>     r = sqrt(3), d = 1, scale = TRUE, expand = 1, col = \"white\", \n#>     border = NULL, ltheta = -135, lphi = 0, shade = NA, box = TRUE, \n#>     axes = TRUE, nticks = 5, ticktype = \"simple\", ...) \n#> NULL\npts <- seq (from = -3, to = 3, len = 50)\nfun1 <- \"2 * pi * exp(-(x^2 + y^2)/2)\"\nfun2 <- parse (text = paste (\"function(x,y)\", fun1))\nzz <- outer (pts, pts, eval(fun2))persp (x = pts, y = pts, z = zz, theta = 0, phi = 15, ticktype = \"detailed\", \n       main = paste(\"Persp plot of `\"fun2,\"`\",sep=\"\"))"},{"path":"subscripting.html","id":"subscripting","chapter":"5 Subscripting","heading":"5 Subscripting","text":"Vectorized arithmetic subscripting two cornerstones R programming. Review section 4.2 several examples subscripting used. chapter subscripting studied detail. Specifically, following two related topics studied:Extracting parts object using subscripting.combination rearranging data within data structures like matrices, dataframes lists.","code":""},{"path":"subscripting.html","id":"vectorSubscripting","chapter":"5 Subscripting","heading":"5.1 Subscripting with vectors","text":"different types subscripting vectors summarized Table 5.1:Table 5.1:  Different types subscripting vectors.Logical subscripting provides powerful operation R. logical subscript vector TRUEs FALSEs must length object subscripted e.g.Logical subscripting allows finding indices elements vector meet certain condition e.g.find corresponding names statesIn addition extracting elements, subscripting operations can also used modify selected elements vector e.g. changing NA-values zero:right-hand side assignment scalar value, selected values changed specified scalar value; right-hand side vector, selecting values changed order, recycling values values selected left-hand side available right-hand side.","code":"\nstate.x77[ , \"Area\"] > 80000  \n#>        Alabama         Alaska        Arizona       Arkansas \n#>          FALSE           TRUE           TRUE          FALSE \n#>     California       Colorado    Connecticut       Delaware \n#>           TRUE           TRUE          FALSE          FALSE \n#>        Florida        Georgia         Hawaii          Idaho \n#>          FALSE          FALSE          FALSE           TRUE \n#>       Illinois        Indiana           Iowa         Kansas \n#>          FALSE          FALSE          FALSE           TRUE \n#>       Kentucky      Louisiana          Maine       Maryland \n#>          FALSE          FALSE          FALSE          FALSE \n#>  Massachusetts       Michigan      Minnesota    Mississippi \n#>          FALSE          FALSE          FALSE          FALSE \n#>       Missouri        Montana       Nebraska         Nevada \n#>          FALSE           TRUE          FALSE           TRUE \n#>  New Hampshire     New Jersey     New Mexico       New York \n#>          FALSE          FALSE           TRUE          FALSE \n#> North Carolina   North Dakota           Ohio       Oklahoma \n#>          FALSE          FALSE          FALSE          FALSE \n#>         Oregon   Pennsylvania   Rhode Island South Carolina \n#>           TRUE          FALSE          FALSE          FALSE \n#>   South Dakota      Tennessee          Texas           Utah \n#>          FALSE          FALSE           TRUE           TRUE \n#>        Vermont       Virginia     Washington  West Virginia \n#>          FALSE          FALSE          FALSE          FALSE \n#>      Wisconsin        Wyoming \n#>          FALSE           TRUE\nx <- c(10, 15, 12, NA, 18, 20)\nis.na (x)\n#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE\nx[is.na (x)]\n#> [1] NA\nx[!is.na (x)]\n#> [1] 10 15 12 18 20\nmean (x)\n#> [1] NA\nmean (x[!is.na (x)])\n#> [1] 15\nmean (na.omit (x))\n#> [1] 15\n(1:length (rownames (state.x77)))[state.x77[ ,\"Income\"] > 5000]\n#> [1]  2  5  7 13 20 28 30 34\nrownames(state.x77)[\n  (1:length (rownames(state.x77)))[state.x77[ ,\"Income\"] > 5000]]\n#> [1] \"Alaska\"       \"California\"   \"Connecticut\" \n#> [4] \"Illinois\"     \"Maryland\"     \"Nevada\"      \n#> [7] \"New Jersey\"   \"North Dakota\"\nx\n#> [1] 10 15 12 NA 18 20\nx[is.na (x)] <- 0\nx\n#> [1] 10 15 12  0 18 20"},{"path":"subscripting.html","id":"subscripting-with-matrices","chapter":"5 Subscripting","heading":"5.2 Subscripting with matrices","text":"Element submatrix extraction matrices discussed .Revise use matrix(), names(), dim() dimnames().Revise use matrix(), names(), dim() dimnames().matrix R array two indices. Arrays order two higher can constructed function dim() array().matrix R array two indices. Arrays order two higher can constructed function dim() array().Let, example, \\(\\mathbf{}\\) vector consisting \\(150\\) elements. instructionor instructionconstructs \\(3 \\times 5 \\times 10\\) array.Matrices can therefore formed , function matrix() usually easier use.elements \\(p\\)-dimensional array can also extracted using one-index two-index method described .subscripting methods described section 5.1 can also applied first second dimension matrix first dimension refers rows second dimension columns matrix.subscripting methods described section 5.1 can also applied first second dimension matrix first dimension refers rows second dimension columns matrix.Note elements matrix can referred two-index method one index method. one index method used assumed matrix first strung column-wise vector.Note elements matrix can referred two-index method one index method. one index method used assumed matrix first strung column-wise vector.Comment difference testmat.testmat.b.Write function convert one-index two-index matrix reference. Give example usage function.Write function convert one-index two-index matrix reference. Give example usage function.Write function convert two-index one-index matrix reference. Give example usage function.Write function convert two-index one-index matrix reference. Give example usage function.Consider following example form submatrices:Consider following example form submatrices:Notice difference testmat [1:2, 3] testmat [1:2, 3, drop = FALSE]. first command results output given form vector optional drop = FALSE second command retains matrix structure output. distinction can serious consequences procedure expects matrix argument vector.Notice difference testmat [1:2, 3] testmat [1:2, 3, drop = FALSE]. first command results output given form vector optional drop = FALSE second command retains matrix structure output. distinction can serious consequences procedure expects matrix argument vector.Notice also output testmat[1:2,3] testmat[3, 1:2] similar form: R makes distinction column vectors row vectors; one-dimensional collections numbers treated identically.Notice also output testmat[1:2,3] testmat[3, 1:2] similar form: R makes distinction column vectors row vectors; one-dimensional collections numbers treated identically.Apart using vectors subscripts matrix, matrix can also used subscript matrix. two cases:\nnumeric subscripting matrix \nlogical subscripting matrix.\nApart using vectors subscripts matrix, matrix can also used subscript matrix. two cases:numeric subscripting matrix anda logical subscripting matrix.","code":"\ndim(a) <- c(3, 5, 10) \na <- array (a, dim = c(3, 5, 10)) \ntestmat.a <- matrix (c (17, 40, 20, 34, 21, 12, 14, 57, \n                        78, 37, 29, 64), nrow = 4)\ntestmat.a\n#>      [,1] [,2] [,3]\n#> [1,]   17   21   78\n#> [2,]   40   12   37\n#> [3,]   20   14   29\n#> [4,]   34   57   64\ntestmat.b <- matrix (c (17, 40, 20, 34, 21, 12, 14, 57, \n                        78, 37, 29, 64), nrow = 4, byrow = TRUE)\ntestmat.b\n#>      [,1] [,2] [,3]\n#> [1,]   17   40   20\n#> [2,]   34   21   12\n#> [3,]   14   57   78\n#> [4,]   37   29   64\ntestmat.a[2,3]   # Two index matrix reference\n#> [1] 37\ntestmat.a[10]   # One index matrix reference\n#> [1] 37\ntestmat <- matrix(1:50, nrow = 10, byrow = TRUE)\ntestmat[1:2, c (3, 5)]\n#>      [,1] [,2]\n#> [1,]    3    5\n#> [2,]    8   10\ntestmat[1:2, 3]\n#> [1] 3 8\ntestmat[1:2, 3, drop=FALSE]\n#>      [,1]\n#> [1,]    3\n#> [2,]    8"},{"path":"subscripting.html","id":"case-a","chapter":"5 Subscripting","heading":"Case A","text":"subscripting numeric matrix must exactly two columns: first provide row indices second column indices.used right-hand side expression result case subscripting vector containing values specified subscripting matrix.used right-hand side expression result case subscripting vector containing values specified subscripting matrix.used left-hand side assignment numeric matrix first selects elements specified row column indices; values replaced one one objects specified right-hand side assignment.used left-hand side assignment numeric matrix first selects elements specified row column indices; values replaced one one objects specified right-hand side assignment.example case subscripting subscript matrix right-hand side assignment:Case subscripting numeric subscript matrix left-hand side assignment:","code":"\nxmat <- matrix (1:25, nrow = 5)\nxmat\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    6   11   16   21\n#> [2,]    2    7   12   17   22\n#> [3,]    3    8   13   18   23\n#> [4,]    4    9   14   19   24\n#> [5,]    5   10   15   20   25\nsuperdiag.index <- matrix (c (1:4, 2:5), ncol = 2, byrow = FALSE)\nsuperdiag.values <- xmat[superdiag.index]\nsuperdiag.values\n#> [1]  6 12 18 24\nsubscript.mat <- matrix (c(1:3, 1:3, rep(1,3), rep(2,3)), ncol=2)\nsubscript.mat\n#>      [,1] [,2]\n#> [1,]    1    1\n#> [2,]    2    1\n#> [3,]    3    1\n#> [4,]    1    2\n#> [5,]    2    2\n#> [6,]    3    2\nxx <- matrix(NA, nrow=3,ncol=2)\nxx \n#>      [,1] [,2]\n#> [1,]   NA   NA\n#> [2,]   NA   NA\n#> [3,]   NA   NA\nxx[subscript.mat] <- c(10,12,14,100,120,140)\nxx\n#>      [,1] [,2]\n#> [1,]   10  100\n#> [2,]   12  120\n#> [3,]   14  140"},{"path":"subscripting.html","id":"case-b","chapter":"5 Subscripting","heading":"Case B","text":"logical subscripting matrix must size exactly similar matrix subscripting select values corresponding TRUE subscripting matrix.Case B logical subscripting matrix right-hand side assignment:Note selected elements placed column-wise vector.Case B logical subscripting matrix left-hand side assignment:order restrict assignment subset matrix two sets subscripts needed. See example :Study use functions row() col() constructing logical matrices.","code":"\ntestmat\n#>       [,1] [,2] [,3] [,4] [,5]\n#>  [1,]    1    2    3    4    5\n#>  [2,]    6    7    8    9   10\n#>  [3,]   11   12   13   14   15\n#>  [4,]   16   17   18   19   20\n#>  [5,]   21   22   23   24   25\n#>  [6,]   26   27   28   29   30\n#>  [7,]   31   32   33   34   35\n#>  [8,]   36   37   38   39   40\n#>  [9,]   41   42   43   44   45\n#> [10,]   46   47   48   49   50\naa <- testmat[testmat < 12]\naa\n#>  [1]  1  6 11  2  7  3  8  4  9  5 10\ntestmat[testmat < 12] <- 12\ntestmat\n#>       [,1] [,2] [,3] [,4] [,5]\n#>  [1,]   12   12   12   12   12\n#>  [2,]   12   12   12   12   12\n#>  [3,]   12   12   13   14   15\n#>  [4,]   16   17   18   19   20\n#>  [5,]   21   22   23   24   25\n#>  [6,]   26   27   28   29   30\n#>  [7,]   31   32   33   34   35\n#>  [8,]   36   37   38   39   40\n#>  [9,]   41   42   43   44   45\n#> [10,]   46   47   48   49   50\ntestmat <- matrix(1:50, nrow=10, byrow=TRUE)\ntestmat[, c(1,3)][testmat[,c(1,3)] <12] <- 12\ntestmat\n#>       [,1] [,2] [,3] [,4] [,5]\n#>  [1,]   12    2   12    4    5\n#>  [2,]   12    7   12    9   10\n#>  [3,]   12   12   13   14   15\n#>  [4,]   16   17   18   19   20\n#>  [5,]   21   22   23   24   25\n#>  [6,]   26   27   28   29   30\n#>  [7,]   31   32   33   34   35\n#>  [8,]   36   37   38   39   40\n#>  [9,]   41   42   43   44   45\n#> [10,]   46   47   48   49   50"},{"path":"subscripting.html","id":"extracting-elements-of-lists","chapter":"5 Subscripting","heading":"5.3 Extracting elements of lists","text":"Note use list() collect objects list elements extracted $function names(),function names(),single square brackets [ ] andthe single square brackets [ ] andthe double square brackets [[ ]].double square brackets [[ ]].Study following example carefully:Note: example shows using single pair square brackets subscripting list always result list object returned. often cause error message. See example .Explain differences similarities symbols [ ], [[ ]] $ subscripting lists.","code":"\nmy.list <- list(el1 = 1:5, \n                el2 = c(\"a\", \"b\", \"c\"), \n                el3 = matrix(1:16, ncol = 4), \n                el4 = c(12, 17, 23, 9))\nmy.list\n#> $el1\n#> [1] 1 2 3 4 5\n#> \n#> $el2\n#> [1] \"a\" \"b\" \"c\"\n#> \n#> $el3\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    5    9   13\n#> [2,]    2    6   10   14\n#> [3,]    3    7   11   15\n#> [4,]    4    8   12   16\n#> \n#> $el4\n#> [1] 12 17 23  9\nmy.list$el2\n#> [1] \"a\" \"b\" \"c\"\nmode (my.list$el2)\n#> [1] \"character\"\nmy.list[el2]\n#> Error in eval(expr, envir, enclos): object 'el2' not found\nmy.list[\"el2\"]\n#> $el2\n#> [1] \"a\" \"b\" \"c\"\nmode (my.list[\"el2\"])\n#> [1] \"list\"\nmy.list[[\"el2\"]]\n#> [1] \"a\" \"b\" \"c\"\nmode (my.list[[\"el2\"]])\n#> [1] \"character\"\nmy.list[1]\n#> $el1\n#> [1] 1 2 3 4 5\nmode (my.list[1])\n#> [1] \"list\"\nmy.list[[1]]\n#> [1] 1 2 3 4 5\nmode (my.list[[1]])\n#> [1] \"numeric\"\nmy.list[3][2,4]\n#> Error in my.list[3][2, 4]: incorrect number of dimensions\nmy.list[[3]][2,4]\n#> [1] 14\nmy.list$el3[2,4]\n#> [1] 14\nmean (my.list[4])\n#> Warning in mean.default(my.list[4]): argument is not\n#> numeric or logical: returning NA\n#> [1] NA\nmean (my.list[[4]])\n#> [1] 15.25\nmean (my.list$el4)\n#> [1] 15.25"},{"path":"subscripting.html","id":"extracting-elements-from-dataframes","chapter":"5 Subscripting","heading":"5.4 Extracting elements from dataframes","text":"Note use data.frame() creating dataframes. dataframe rectangular structure similar matrix differs matrix columns restricted contain type data. columns must contain sort data columns can numerical others factors example.Note use data.frame() creating dataframes. dataframe rectangular structure similar matrix differs matrix columns restricted contain type data. columns must contain sort data columns can numerical others factors example.Explain difference objects created following two instructions:Explain difference objects created following two instructions:Note followingA sample behaviour dataframesDataframe behaves like matrixDataframe behaves like listExplain happened .examples show dataframe can considered cross matrix list. Therefore, subscripting dataframes generally can performed using basic techniques available matrices lists.examples show dataframe can considered cross matrix list. Therefore, subscripting dataframes generally can performed using basic techniques available matrices lists.alternative technique extract elements list using functions attach() names(). technique especially importance statistical modelling. potential danger technique attaching dataframes? danger can avoided using (). also true modelling performed?alternative technique extract elements list using functions attach() names(). technique especially importance statistical modelling. potential danger technique attaching dataframes? danger can avoided using (). also true modelling performed?Review section 2.3. Study help file function (). important usage ()?Review section 2.3. Study help file function (). important usage ()?","code":"\nmy.matrix <- matrix (c (17, 40, 20, 34, 21, 12, 14, 57,\n                        78, 37, 29, 64), nrow = 4, ncol = 3)\nmy.dataframe <- data.frame ( c(17, 40, 20, 34, 21, 12, 14, 57,\n                               78, 37, 29, 64), nrow = 4, ncol = 3)\nclass(my.matrix)\n#> [1] \"matrix\" \"array\"\nclass(my.dataframe)\n#> [1] \"data.frame\"\nis.list(data.frame)\n#> [1] FALSE\nmode(my.matrix)\n#> [1] \"numeric\"\nmode(data.frame)\n#> [1] \"function\"\nmy.dataframe.2 <- data.frame (C1 = c('a', 'b', 'c', 'd'), \n                              C2 = c(5, 9, 23, 17), \n                              C3 = c(TRUE, TRUE, FALSE, TRUE))\nmy.dataframe.2\n#>   C1 C2    C3\n#> 1  a  5  TRUE\n#> 2  b  9  TRUE\n#> 3  c 23 FALSE\n#> 4  d 17  TRUE\nmy.dataframe.2[ ,1:2]\n#>   C1 C2\n#> 1  a  5\n#> 2  b  9\n#> 3  c 23\n#> 4  d 17\nmy.dataframe.2$C1\n#> [1] \"a\" \"b\" \"c\" \"d\"\nas.matrix(my.dataframe.2)\n#>      C1  C2   C3     \n#> [1,] \"a\" \" 5\" \"TRUE\" \n#> [2,] \"b\" \" 9\" \"TRUE\" \n#> [3,] \"c\" \"23\" \"FALSE\"\n#> [4,] \"d\" \"17\" \"TRUE\""},{"path":"subscripting.html","id":"combining-vectors-matrices-lists-and-dataframes","chapter":"5 Subscripting","heading":"5.5 Combining vectors, matrices, lists and dataframes","text":"result commandRecall function c() creating vectors. c() used combine numeric vector character vector result vector mode “character”. Similarly, using c() combine vector list results list.Recall function c() creating vectors. c() used combine numeric vector character vector result vector mode “character”. Similarly, using c() combine vector list results list.list() used combine two vectors lists result list objects.list() used combine two vectors lists result list objects.function unlist() can used convert elements list single vector.function unlist() can used convert elements list single vector.Explain output.Review functions cbind(), rbind(), append(), data.frame(), dim(), dimnames(), names(), colnames(), rownames(), nrow() ncol().","code":"my.list <- vector (\"list\", k)?\nmy.list\n#> $el1\n#> [1] 1 2 3 4 5\n#> \n#> $el2\n#> [1] \"a\" \"b\" \"c\"\n#> \n#> $el3\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    5    9   13\n#> [2,]    2    6   10   14\n#> [3,]    3    7   11   15\n#> [4,]    4    8   12   16\n#> \n#> $el4\n#> [1] 12 17 23  9\nunlist(my.list)\n#>  el11  el12  el13  el14  el15  el21  el22  el23  el31  el32 \n#>   \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"a\"   \"b\"   \"c\"   \"1\"   \"2\" \n#>  el33  el34  el35  el36  el37  el38  el39 el310 el311 el312 \n#>   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"  \"10\"  \"11\"  \"12\" \n#> el313 el314 el315 el316  el41  el42  el43  el44 \n#>  \"13\"  \"14\"  \"15\"  \"16\"  \"12\"  \"17\"  \"23\"   \"9\""},{"path":"subscripting.html","id":"rearranging-the-elements-in-a-matrix","chapter":"5 Subscripting","heading":"5.6 Rearranging the elements in a matrix","text":"Study usage functions matrix(), t() diag(). functions useful form submatrices matrix rearrange matrix elements. Note argument byrow = matrix().","code":""},{"path":"subscripting.html","id":"exercise-10","chapter":"5 Subscripting","heading":"5.7 Exercise","text":"Write R function check given matrix symmetric.Write R function check given matrix symmetric.Write R function extract () row(s) (ii) columns containing maximum value matrix. Note provision must made maximum value can occur one row (column). Furthermore, indices actual values rows (columns) must returned. Illustrate usage function suitable example.Write R function extract () row(s) (ii) columns containing maximum value matrix. Note provision must made maximum value can occur one row (column). Furthermore, indices actual values rows (columns) must returned. Illustrate usage function suitable example.Describe variables built-data set LifeCycleSavings. data set form matrix dataframe?Describe variables built-data set LifeCycleSavings. data set form matrix dataframe?Use subscripting find largest proportion 75 countries dpi less 1000 LifeCycleSavings data set. Also determine country(ies) pop75 value.Use subscripting find largest proportion 75 countries dpi less 1000 LifeCycleSavings data set. Also determine country(ies) pop75 value.Consider LifeCycleSavings data set.\nUse subscripting find mean aggregate savings countries percentage population younger 15 least 10 times percentage population 75.\nAlso find mean aggregate savings countries ratio less 10.\nUse function t.test() test mean aggregate savings different two groups.\nUse notched box plots approximate test.\nConsider LifeCycleSavings data set.Use subscripting find mean aggregate savings countries percentage population younger 15 least 10 times percentage population 75.Also find mean aggregate savings countries ratio less 10.Use function t.test() test mean aggregate savings different two groups.Use notched box plots approximate test.First, carefully study output obtained (iii) (iv). interpret/discuss output detail.Consider state.x77 data set variable state.region. Find state minimum income regions defined state.region.","code":""},{"path":"revision.html","id":"revision","chapter":"6 Revision tasks","heading":"6 Revision tasks","text":"general, purpose writing program R address practical problem directly indirectly. prepare student seriously writing R functions (programs) chapter consists mixture revision tasks. tasks straight forward others need thought preparation starting writing R code. Section 6.1 guidelines considered writing R code address practical problem.","code":""},{"path":"revision.html","id":"guidelines","chapter":"6 Revision tasks","heading":"6.1 Guidelines for problem solving by writing R code","text":"Make sure problem clearly understood. write good code something correctly grasped.Make sure problem clearly understood. write good code something correctly grasped.Break complex problems simpler components. Formulate simpler components terms specific questions answered.Break complex problems simpler components. Formulate simpler components terms specific questions answered.Think terms way R operates e.g. vectorized arithmetic, recycling principle, operating objects wholes/units, subscripting, R data structures . . .Think terms way R operates e.g. vectorized arithmetic, recycling principle, operating objects wholes/units, subscripting, R data structures . . .Spend time prepare data.Spend time prepare data.Ask question information need attempting write code coming answer. , facilities provided R get necessary information information available manipulations needed code useful output.Ask question information need attempting write code coming answer. , facilities provided R get necessary information information available manipulations needed code useful output.Write dedicated code answering specific questions (b).Write dedicated code answering specific questions (b).neglect debugging/optimizing phase code succeeds providing first round answer.neglect debugging/optimizing phase code succeeds providing first round answer.","code":""},{"path":"revision.html","id":"exercise-11","chapter":"6 Revision tasks","heading":"6.2 Exercise","text":"Use R obtain five-point summary variable dpi LifeCycleSavings data set. Illustrate difference working fivenum() quantile(). Hint: See boxplot.stats() definition hinges.Use R obtain five-point summary variable dpi LifeCycleSavings data set. Illustrate difference working fivenum() quantile(). Hint: See boxplot.stats() definition hinges.Display pdf \\(normal (100, 15)\\) distribution graphically. area density bounded 70th 90th percentiles must appear red.Display pdf \\(normal (100, 15)\\) distribution graphically. area density bounded 70th 90th percentiles must appear red.Use R obtain following graphical representations:\npdf well cdf \\(F (15, 10)\\) \\(F (10, 15)\\) stochastic variable. graphs must one graph window set axes F-distributions supplied suitable titles. Furthermore, must line graphs contain plotting characters except lines.\nObtain representations line graphs inverses cdfs single separate graph page.\nUse R obtain following graphical representations:pdf well cdf \\(F (15, 10)\\) \\(F (10, 15)\\) stochastic variable. graphs must one graph window set axes F-distributions supplied suitable titles. Furthermore, must line graphs contain plotting characters except lines.pdf well cdf \\(F (15, 10)\\) \\(F (10, 15)\\) stochastic variable. graphs must one graph window set axes F-distributions supplied suitable titles. Furthermore, must line graphs contain plotting characters except lines.Obtain representations line graphs inverses cdfs single separate graph page.Obtain representations line graphs inverses cdfs single separate graph page.First set seed 172389 generate random sample size 500 \\(normal (100, 20)\\) distribution. Give necessary R instructions determine class frequencies class intervals “Smaller 50”, “50 75–“, “75 90–“, “90 100”, “100+ 110”, “Larger 110”.First set seed 172389 generate random sample size 500 \\(normal (100, 20)\\) distribution. Give necessary R instructions determine class frequencies class intervals “Smaller 50”, “50 75–“, “75 90–“, “90 100”, “100+ 110”, “Larger 110”.Generate random sample size 80 bivariate normal distribution mean vector \\((50, 100)\\). variances two variables 900 2500 respectively correlation 0.90. Store sample R matrix object obtain scatterplot form \npoint diagram \nline graph sample.\nGenerate random sample size 80 bivariate normal distribution mean vector \\((50, 100)\\). variances two variables 900 2500 respectively correlation 0.90. Store sample R matrix object obtain scatterplot form ofa point diagram anda line graph sample.Define harmonic mean vector observations. conditions must satisfied observations?\nWrite function calculating harmonic mean use calculate harmonic mean variable dpi LifeCycleSavings data set.\nCalculate ordinary mean variable dpi LifeCycleSavings data set. Compare answer answer (). answer use practice? Motivate.\nDefine harmonic mean vector observations. conditions must satisfied observations?Write function calculating harmonic mean use calculate harmonic mean variable dpi LifeCycleSavings data set.Write function calculating harmonic mean use calculate harmonic mean variable dpi LifeCycleSavings data set.Calculate ordinary mean variable dpi LifeCycleSavings data set. Compare answer answer (). answer use practice? Motivate.Calculate ordinary mean variable dpi LifeCycleSavings data set. Compare answer answer (). answer use practice? Motivate.Fisher’s linear discriminant function case two groups defined follows:Fisher’s linear discriminant function case two groups defined follows:\\(LDF = (\\mathbf{\\bar{x}}_1 - \\mathbf{\\bar{x}}_2)' \\mathbf{S}^{-1} \\mathbf{x}\\) \\(\\mathbf{S} = [(n_1-1)\\mathbf{S}_1 + (n_2-1)\\mathbf{S}_2]/(n_1 + n_2 - 2)\\) \\(\\mathbf{\\bar{x}}_i\\) \\(\\mathbf{S}_i\\) vector means covariance matrix \\(\\)th group (sample), respectively.corresponding classification function written \\(CF =(\\mathbf{\\bar{x}}_1 - \\mathbf{\\bar{x}}_2)' \\mathbf{S}^{-1} \\mathbf{x} - \\frac{1}{2} (\\mathbf{\\bar{x}}_1 - \\mathbf{\\bar{x}}_2)' \\mathbf{S}^{-1} (\\mathbf{\\bar{x}}_1 + \\mathbf{\\bar{x}}_2)\\). expression (_1 - _2)’ ^{-1} referred discriminant coefficients.agreement section 6.1 make sure \\(LDF\\) \\(CF\\) entail. crabs data set package MASS consists 200 rows 8 columns, describing 5 morphological measurements 50 crabs two colour forms sexes, species Leptograpsus variegatus collected Fremantle, Western Australia.Obtain covariance matrix two species crabs.Obtain covariance matrix two species crabs.Obtain vector means two species crabs.Obtain vector means two species crabs.Use standard R functions operating matrices write function code calculates discriminant coefficients given linear discriminant function.Use standard R functions operating matrices write function code calculates discriminant coefficients given linear discriminant function.Write function determines linear discriminant function returnWrite function determines linear discriminant function returnthe discriminant coefficients;discriminant coefficients;CF observation.CF observation.Repeat discriminant analysis , discriminating male female crabs, ignoring differences species.Compare results using lda() function package MASS commandConsider matrix \\(\\mathbf{}:n \\times m\\). understood column space \\(V(\\mathbf{})\\) orthogonal complement \\(V^⊥(\\mathbf{})\\)? R function svd() can used obtain orthogonal basis \\(V(\\mathbf{})\\) rank \\(\\mathbf{}\\) \\(k\\). also want determine orthogonal basis \\(V^⊥(\\mathbf{})\\). can function svd() used simultaneously find basis \\(V(\\mathbf{})\\) \\(V^⊥(\\mathbf{})\\)?propositions can proved follows: Assume \\(n≥m\\) orthonormal basis \\(V(\\mathbf{})\\) well \\(V^⊥(\\mathbf{})\\) must found. Append \\(n-m\\) zero vectors size \\(n\\) matrix \\(\\mathbf{}\\). Write \\(\\mathbf{}^0\\) appended matrix perform function svd() \\(\\mathbf{}^0\\). follows \\(\\mathbf{}^0 = \\mathbf{UDV}'\\) \\(\\mathbf{}^0 \\mathbf{V} = \\mathbf{UD}\\), .e. \\[\n\\begin{bmatrix}\n\\mathbf{}^0 \\mathbf{v}_{(1)} & \\mathbf{}^0 \\mathbf{v}_{(2)} & \\dots & \\mathbf{}^0 \\mathbf{v}_{(n)}\n\\end{bmatrix} = \\begin{bmatrix}\nd_1 \\mathbf{u}_{(1)} & d_2 \\mathbf{u}_{(2)} & \\dots & d_n \\mathbf{u}_{(n)}\n\\end{bmatrix}.\n\\]\nNow \\(\\mathbf{}^0 \\mathbf{v}_{()} \\V(\\mathbf{}^0) = V(\\mathbf{})\\). (Motivate detail.) follows \\(\\mathbf{u}_{()} \\V(\\mathbf{}), = 1, 2, \\dots, k\\) . (Motivate detail.) Therefore columns \\(\\mathbf{U}\\) correspond non-zero \\(d\\)s form orthonormal basis \\(V(\\mathbf{})\\) columns \\(\\mathbf{U}\\) correspond zero \\(d\\)s form orthonormal basis orthogonal complement \\(V(\\mathbf{})\\). Motivate last statement detail.Based results (8) , write R function returns \\(rank(\\mathbf{})\\), orthogonal basis \\(V(\\mathbf{})\\) orthogonal basis \\(V^⊥(\\mathbf{})\\). Test function matrix:\\[\n\\mathbf{} = \\begin{bmatrix}\n                    1 & 1 & 2 \\\\\n                    2 & 2 & 4 \\\\\n                    3 & 2 & 7 \\\\\n                    -1 & -5 & 2 \\\\\n                    2 & 7 & -1\n              \\end{bmatrix}\n\\]many graphical displays whose purpose represent distances two dimensions, essential scales axes geometrically accurate. called aspect ratio graph R graphics parameter par used controlling aspect ratio graphics R. default value par generally ensure scales horizontal vertical axes geometrically accurate. ensuring geometrically accurate scales setting asp = 1 must explicitly specified e.g. plot(x =, y =, asp = 1).going investigate effect aspect ratio graphs writing function drawing circle. agreement section 6.1 start project reviewing basic concepts regarding coordinates graphical purposes. Figure 6.1 summarizes reference point geometric space using () Cartesian coordinates (b) polar coordinates.\nFigure 6.1: Cartesian polar coordinates referencing point graph.\nConsider following function drawing circle specified radius centred origin:Next, add argument asp = 1 call plot .circle. Run changed function; change size graph window. happens?Next, add argument asp = 1 call plot .circle. Run changed function; change size graph window. happens?changes necessary producing circle centred point geometrical space? Make necessary changes .circle() constructing circle centred user specified point graph.changes necessary producing circle centred point geometrical space? Make necessary changes .circle() constructing circle centred user specified point graph.understood p-dimensional ellipsoid?\nGive mathematical expression matrix notation describes ellipsoid p dimensions.\nDescribe axes ellipsoid terms eigenvalues eigenvectors.\nLet \\(p = 2\\). Simplify expression ellipse concerned terms scalar quantities.\nUse plot() write R-function draw ellipse. Make provision centre point \\((0, 0)\\) well arbitrary \\((x_1,x_2)\\) point; correlation two variables well positive negative correlation.\nUse function written (iv) illustrate differences plot (using default value argument asp) plot asp=1.\nunderstood p-dimensional ellipsoid?Give mathematical expression matrix notation describes ellipsoid p dimensions.Give mathematical expression matrix notation describes ellipsoid p dimensions.Describe axes ellipsoid terms eigenvalues eigenvectors.Describe axes ellipsoid terms eigenvalues eigenvectors.Let \\(p = 2\\). Simplify expression ellipse concerned terms scalar quantities.Let \\(p = 2\\). Simplify expression ellipse concerned terms scalar quantities.Use plot() write R-function draw ellipse. Make provision centre point \\((0, 0)\\) well arbitrary \\((x_1,x_2)\\) point; correlation two variables well positive negative correlation.Use plot() write R-function draw ellipse. Make provision centre point \\((0, 0)\\) well arbitrary \\((x_1,x_2)\\) point; correlation two variables well positive negative correlation.Use function written (iv) illustrate differences plot (using default value argument asp) plot asp=1.Use function written (iv) illustrate differences plot (using default value argument asp) plot asp=1.experimental design often useful predict value dependent variable every combination levels factor variables. Write R function task makes provision number factor arguments also provides dataframe factors columns every combination levels rows. Every levels-combination can appear . function must user friendly must test given independent variable factor variable. Hint: Study help file expand.grid().experimental design often useful predict value dependent variable every combination levels factor variables. Write R function task makes provision number factor arguments also provides dataframe factors columns every combination levels rows. Every levels-combination can appear . function must user friendly must test given independent variable factor variable. Hint: Study help file expand.grid().Consider following game. given computer screen containing rectangle filled random evenly spaced letters. Repetitions letter allowed. challenge user sequentially select first \\(n\\) letters alphabet quickly possible. user must read line left right top bottom. Going backwards allowed. time complete task taken well whether rules obeyed. Program R version game.Consider following game. given computer screen containing rectangle filled random evenly spaced letters. Repetitions letter allowed. challenge user sequentially select first \\(n\\) letters alphabet quickly possible. user must read line left right top bottom. Going backwards allowed. time complete task taken well whether rules obeyed. Program R version game.","code":"\npredict (lda (sex ~ FL + RW + CL + CW + BD, data=crabs))$class\nmy.circle <- function (r = 1, xrange = -2:2, yrange = -2:2) \n{ plot (x = xrange, y = yrange, type = 'n', xlab = '', ylab = '',\n        xaxt = 'n', yaxt = 'n')\n  theta <- seq(from = 0, to = 2 * pi, by = 0.01) \n  # Notice the use of radians.\n  lines (x = r*cos(theta), y = r*sin(theta))\n  abline(h = 0)\n  abline(v = 0)\n}"},{"path":"functions.html","id":"functions","chapter":"7 Writing functions in R","heading":"7 Writing functions in R","text":"Although already written various functions R, chapter writing R functions approached systematically.","code":""},{"path":"functions.html","id":"general-2","chapter":"7 Writing functions in R","heading":"7.1 General","text":"good way learn functions write new function look existing ones. example consider like write function implement novel plotting procedure. start taking look existing plot function.helpful give instruction:decide take look plot.default can bySince new plotting method aimed categorical data decide rather take look plot.factor. asterisked function hence visible:Asterisked functions can inspected using following method:default values assigned arguments functions?default values assigned arguments functions?default behaviour plot.factor()?default behaviour plot.factor()?tasks can achieved pmatch() understood partial matching? happen plot.factor() called () legend.text = 'AA=Agecat'; (ii) leg = 'AA=Agecat'? Explain.tasks can achieved pmatch() understood partial matching? happen plot.factor() called () legend.text = 'AA=Agecat'; (ii) leg = 'AA=Agecat'? Explain.Discuss usage missing().Discuss usage missing().Give example usage function stop(message= \" \").Give example usage function stop(message= \" \").Give example usage function warning(message= \" \").Give example usage function warning(message= \" \").usage function warnings()?usage function warnings()?can functions called without specifying arguments e.g. q()?can functions called without specifying arguments e.g. q()?body function consists single instruction necessary enclose braces.body function consists single instruction necessary enclose braces.convention use last evaluated statement function’s return value. several objects returned gather list.convention use last evaluated statement function’s return value. several objects returned gather list.function return() single object list objects useful interrupt function intermediate stage return object list objects particular stage. usually done function development.function return() single object list objects useful interrupt function intermediate stage return object list objects particular stage. usually done function development.Sometimes meaningful value return e.g. function written primarily produce plot. cases like function invisible() can used last statement function. example usage invisible() give following instructions:Sometimes meaningful value return e.g. function written primarily produce plot. cases like function invisible() can used last statement function. example usage invisible() give following instructions:Now look end function boxplot.default() see invisible() implemented.Libraries (packages) R functions. Attaching detaching libraries search path. (Revise Chapter 1)Libraries (packages) R functions. Attaching detaching libraries search path. (Revise Chapter 1)Creating new function using scripts fix(). (Revise Chapter 1)Creating new function using scripts fix(). (Revise Chapter 1)Editing existing function using scripts fix(). (Revise Chapter 1)Editing existing function using scripts fix(). (Revise Chapter 1)Note writing function line can interrupted place continued next line. Warning: careful put break point marks completion executable statement. Explain.Note writing function line can interrupted place continued next line. Warning: careful put break point marks completion executable statement. Explain.","code":"\nplot\n#> function (x, y, ...) \n#> UseMethod(\"plot\")\n#> <bytecode: 0x000001dcf0768540>\n#> <environment: namespace:base>\nmethods(plot)\n#>  [1] plot.acf*           plot.data.frame*   \n#>  [3] plot.decomposed.ts* plot.default       \n#>  [5] plot.dendrogram*    plot.density*      \n#>  [7] plot.ecdf           plot.factor*       \n#>  [9] plot.formula*       plot.function      \n#> [11] plot.hclust*        plot.histogram*    \n#> [13] plot.HoltWinters*   plot.isoreg*       \n#> [15] plot.lm*            plot.medpolish*    \n#> [17] plot.mlm*           plot.ppr*          \n#> [19] plot.prcomp*        plot.princomp*     \n#> [21] plot.profile*       plot.profile.nls*  \n#> [23] plot.R6*            plot.raster*       \n#> [25] plot.spec*          plot.stepfun       \n#> [27] plot.stl*           plot.table*        \n#> [29] plot.ts             plot.tskernel*     \n#> [31] plot.TukeyHSD*     \n#> see '?methods' for accessing help and source code\nplot.default\n#> function (x, y = NULL, type = \"p\", xlim = NULL, ylim = NULL, \n#>     log = \"\", main = NULL, sub = NULL, xlab = NULL, ylab = NULL, \n#>     ann = par(\"ann\"), axes = TRUE, frame.plot = axes, panel.first = NULL, \n#>     panel.last = NULL, asp = NA, xgap.axis = NA, ygap.axis = NA, \n#>     ...) \n#> {\n#>     localAxis <- function(..., col, bg, pch, cex, lty, lwd) Axis(...)\n#>     localBox <- function(..., col, bg, pch, cex, lty, lwd) box(...)\n#>     localWindow <- function(..., col, bg, pch, cex, lty, lwd) plot.window(...)\n#>     localTitle <- function(..., col, bg, pch, cex, lty, lwd) title(...)\n#>     xlabel <- if (!missing(x)) \n#>         deparse1(substitute(x))\n#>     ylabel <- if (!missing(y)) \n#>         deparse1(substitute(y))\n#>     xy <- xy.coords(x, y, xlabel, ylabel, log)\n#>     if (is.null(xlab)) \n#>         xlab <- xy$xlab\n#>     if (is.null(ylab)) \n#>         ylab <- xy$ylab\n#>     if (is.null(xlim)) \n#>         xlim <- range(xy$x[is.finite(xy$x)])\n#>     if (is.null(ylim)) \n#>         ylim <- range(xy$y[is.finite(xy$y)])\n#>     dev.hold()\n#>     on.exit(dev.flush())\n#>     plot.new()\n#>     localWindow(xlim, ylim, log, asp, ...)\n#>     panel.first\n#>     plot.xy(xy, type, ...)\n#>     panel.last\n#>     if (axes) {\n#>         localAxis(if (is.null(y)) \n#>             xy$x\n#>         else x, side = 1, gap.axis = xgap.axis, ...)\n#>         localAxis(if (is.null(y)) \n#>             x\n#>         else y, side = 2, gap.axis = ygap.axis, ...)\n#>     }\n#>     if (frame.plot) \n#>         localBox(...)\n#>     if (ann) \n#>         localTitle(main = main, sub = sub, xlab = xlab, ylab = ylab, \n#>             ...)\n#>     invisible()\n#> }\n#> <bytecode: 0x000001dcf211bd90>\n#> <environment: namespace:graphics>\nplot.factor\n#> Error in eval(expr, envir, enclos): object 'plot.factor' not found\ngetAnywhere(plot.factor)\n#> A single object matching 'plot.factor' was found\n#> It was found in the following places\n#>   registered S3 method for plot from namespace graphics\n#>   namespace:graphics\n#> with value\n#> \n#> function (x, y, legend.text = NULL, ...) \n#> {\n#>     if (missing(y) || is.factor(y)) {\n#>         dargs <- list(...)\n#>         axisnames <- dargs$axes %||% if (!is.null(dargs$xaxt)) \n#>             dargs$xaxt != \"n\"\n#>         else TRUE\n#>     }\n#>     if (missing(y)) {\n#>         barplot(table(x), axisnames = axisnames, ...)\n#>     }\n#>     else if (is.factor(y)) {\n#>         if (is.null(legend.text)) \n#>             spineplot(x, y, ...)\n#>         else {\n#>             args <- c(list(x = x, y = y), list(...))\n#>             args$yaxlabels <- legend.text\n#>             do.call(\"spineplot\", args)\n#>         }\n#>     }\n#>     else if (is.numeric(y)) \n#>         boxplot(y ~ x, ...)\n#>     else NextMethod(\"plot\")\n#> }\n#> <bytecode: 0x000001dcf24a63c0>\n#> <environment: namespace:graphics>\nboxplot(rnorm(100), plot = TRUE)\nboxplot(rnorm(100), plot = FALSE)\n#> $stats\n#>             [,1]\n#> [1,] -1.92517633\n#> [2,] -0.79249353\n#> [3,] -0.09581869\n#> [4,]  0.65314530\n#> [5,]  2.39773688\n#> \n#> $n\n#> [1] 100\n#> \n#> $conf\n#>            [,1]\n#> [1,] -0.3242296\n#> [2,]  0.1325922\n#> \n#> $out\n#> numeric(0)\n#> \n#> $group\n#> numeric(0)\n#> \n#> $names\n#> [1] \"1\""},{"path":"functions.html","id":"writing-a-new-function","chapter":"7 Writing functions in R","heading":"7.2 Writing a new function","text":"Determining indices elements vector matrix meet certain condition: function ()Write following function:Inspect airquality data set using command str(airquality).Inspect airquality data set using command str(airquality).Use () function find indices () NAs, (ii) maximum value (iii) minimum value airquality data set.Use () function find indices () NAs, (ii) maximum value (iii) minimum value airquality data set.Repeat (b) using built-function ().Repeat (b) using built-function ().","code":"\nwhere <- function(x, cond)\n{ # Argument cond must evaluate to a logical value\n     if(!is.matrix(x))\n       seq(along = x)[cond]\n     else matrix(c(row(x)[cond], col(x)[cond]), ncol = 2)\n}"},{"path":"functions.html","id":"checking-for-object-name-clashes","chapter":"7 Writing functions in R","heading":"7.3 Checking for object name clashes","text":"happens R object given name existing object?happens R object given name existing object?Discuss usages functions apropos(), conflicts(), find() match() naming objects.Discuss usages functions apropos(), conflicts(), find() match() naming objects.Remember function called R evaluator first looks global environment function name subsequently attached packages date bases order shown search(). evaluator generally stops searching name found first time. two attached packages functions name one mask object . example, function gam() exists two packages: gam mgcv. attached commandRemember function called R evaluator first looks global environment function name subsequently attached packages date bases order shown search(). evaluator generally stops searching name found first time. two attached packages functions name one mask object . example, function gam() exists two packages: gam mgcv. attached commandwill return version.operator :: can used access intended version gam() using call mgcv::gam() gam::gam().operator :: can used access intended version gam() using call mgcv::gam() gam::gam().writing R packages namespace package provides another mechanism ensuring correct version function used. Note regard operator ::: can used access objects exported.writing R packages namespace package provides another mechanism ensuring correct version function used. Note regard operator ::: can used access objects exported.","code":"\nlibrary (mgcv)\n#> Loading required package: nlme\n#> This is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'.\nlibrary (gam)\n#> Loading required package: splines\n#> Loading required package: foreach\n#> Loaded gam 1.22-3\n#> \n#> Attaching package: 'gam'\n#> The following objects are masked from 'package:mgcv':\n#> \n#>     gam, gam.control, gam.fit, s\nfind(\"gam\")\n#> [1] \"package:gam\"  \"package:mgcv\""},{"path":"functions.html","id":"returning-multiple-values","chapter":"7 Writing functions in R","heading":"7.4 Returning multiple values","text":"","code":""},{"path":"functions.html","id":"exercise-12","chapter":"7 Writing functions in R","heading":"7.4.1 Exercise","text":"Write R function returns mean, median, variance, minimum, maximum coefficient variation numeric vector sample data. different components must accessible name. Test function value rnorm(1000). Hint: Use construct list (mean = ..., median = ..., ...).","code":""},{"path":"functions.html","id":"local-variables-and-evaluation-environments","chapter":"7 Writing functions in R","heading":"7.5 Local variables and evaluation environments","text":"object stored created script fix()?object stored created script fix()?local objects (objects created execution function) stored?local objects (objects created execution function) stored?Explain evaluation environment works.Explain evaluation environment works.understood global environment?understood global environment?Study R help-file w.r.t. operator <<-. useful use operator? dangers inherent operator?Study R help-file w.r.t. operator <<-. useful use operator? dangers inherent operator?understood scope expression function?understood scope expression function?symbols occur body function can divided three classes: formal parameters, local variables free variables. formal parameters function appearing within parentheses denoting argument list function. values determined process binding actual function arguments formal parameters. Local variables created evaluation expressions body functions. Variables neither formal parameters local variables called free variables. Free variables become local variables assigned . Consider following function definition.function, datvec formal parameter, object mean left-hand assignment symbol local variable (confused function mean() right-hand side assignment symbol) Traffic free variable. R free variable bindings resolved first looking environment function created. called lexical scope.following function call made prompt working directory fun(1:25) formal parameter datvec within body function assigned value 1:25 (actual argument) mean assigned local object mean. free parameter Traffic found global environment data base search path required graph created else error message sent console. Perform call.","code":"\nfun <- function(datvec) {\n          mean <- mean(datvec)\n          print(mean)\n          plot(datvec)\n          plot(Traffic)\n       }"},{"path":"functions.html","id":"cleaning-up","chapter":"7 Writing functions in R","heading":"7.6 Cleaning up","text":"Study function .exit() used. function can used reset options changed R-session back original values session ended function terminates error message. also convenient removal temporary files.Study function .exit() used. function can used reset options changed R-session back original values session ended function terminates error message. also convenient removal temporary files.Study uses functions .First() .Last().Study uses functions .First() .Last().Write function automatically opens graph window square plot region R-session started.Write function automatically opens graph window square plot region R-session started.","code":""},{"path":"functions.html","id":"variable-number-of-arguments-argument-...","chapter":"7 Writing functions in R","heading":"7.7 Variable number of arguments: argument ...","text":"Consider following situation: want write function complex task. particular stage graph intermediate results constructed. requires calling function contain call hist function. example chunk code executing task:call like complexfun(rnorm(1000), 'yellow') can now executed desired result. problem hist function several arguments like able access passing suitable actual values calling function complexfun. Instead resort provide complete set arguments argument list complexfun R provides neat way addressing situation: argument ... acts like formal argument except can represent variable number arguments. see argument ... works change function :Arguments represented argument ... argument list hist passed hist argument ... appearing arguments list function complexfun2:Write function retrieve maximum length unspecified number arguments specified mode. another example use ... argument:Note named argument must specified function call:","code":"\ncomplexfun <- function(datmat,colgraph)\n    { datmat <- scale(datmat) \n       # Several lines of complex code here \n      hist(datmat, col = colgraph)              }\ncomplexfun2 <- function(datmat, ... )\n { datmat <- scale(datmat) \n       # Several lines of complex code here \n   hist(datmat, ... )    }\ncomplexfun2(datmat = rnorm(1000), col = 'yellow', \n        probability = TRUE, xlim = c(-5,5))\nmaxlen <- function (mode.use=\"numeric\", ...) \n  { my.list <- list(...)\n    out <- 0\n    for(x in my.list) \n      print (mode(x)) #if(mode(x) == mode.use) out <- max(out,length(x))\n    out\n  }\nmaxlen(1:10, 1:15, 1:3, letters)\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0\nmaxlen(mode.use=\"numeric\", 1:10, 1:15, 1:3, letters)\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0\nmaxlen(1:10, 1:15, 1:3, letters, mode.use=\"character\")\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0\nmaxlen(mode.use=\"character\", 1:10, 1:15, 1:3, letters)\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0"},{"path":"functions.html","id":"retrieving-names-of-arguments-functions-deparse-and-substitute","chapter":"7 Writing functions in R","heading":"7.8 Retrieving names of arguments: functions deparse() and substitute()","text":"many practical situations requiring conversion mathematical expressions character strings (text) , conversely, requiring conversion text mathematical expressions. tools (functions) provided R achieving conversions summarized Figure 7.1.\nFigure 7.1: Converting text mathematical expression mathematical expressions text.\nTask: write R function plot two vectors using axis labels names objects passed arguments function.follows Figure 7.1 function substitute() takes expression argument returns unevaluated. order evaluate return value substitute() function eval() must used. function deparse() takes argument unevaluated expression converts character string. Now ready write following function:Study illustrate usage function labplot().Study illustrate usage function labplot().Figure 7.1 also follows function parse() opposite deparse() converting character string unevaluated expression. latter unevaluated expression can evaluated needed using eval().Figure 7.1 also follows function parse() opposite deparse() converting character string unevaluated expression. latter unevaluated expression can evaluated needed using eval().","code":"\nlabplot <- function (x,y) \n{ xname <- deparse(substitute(x))\n yname <- deparse(substitute(y))\n plot(x,y, xlab=xname, ylab=yname, main = paste(\"Plot of\",\n        yname,\"versus\", xname))\n}"},{"path":"functions.html","id":"operators-1","chapter":"7 Writing functions in R","heading":"7.9 Operators","text":"Execute following instructionin order obtain examples operators available R.Operators special R functions. Discuss statement. respects operators differ ordinary R functions?Operators special R functions. Discuss statement. respects operators differ ordinary R functions?Write operator %E% determine Euclidean distance two vectors give example usage. Hint: creating operators fix() using scripts name must given character string e.g. fix(\"%E%\").Write operator %E% determine Euclidean distance two vectors give example usage. Hint: creating operators fix() using scripts name must given character string e.g. fix(\"%E%\").","code":"\nobjects('package:base')[1:31]\n#>  [1] \"-\"                 \"-.Date\"           \n#>  [3] \"-.POSIXt\"          \"!\"                \n#>  [5] \"!.hexmode\"         \"!.octmode\"        \n#>  [7] \"!=\"                \"$\"                \n#>  [9] \"$.DLLInfo\"         \"$.package_version\"\n#> [11] \"$<-\"               \"$<-.data.frame\"   \n#> [13] \"$<-.POSIXlt\"       \"%%\"               \n#> [15] \"%*%\"               \"%/%\"              \n#> [17] \"%||%\"              \"%in%\"             \n#> [19] \"%o%\"               \"%x%\"              \n#> [21] \"&\"                 \"&&\"               \n#> [23] \"&.hexmode\"         \"&.octmode\"        \n#> [25] \"(\"                 \"*\"                \n#> [27] \"*.difftime\"        \"/\"                \n#> [29] \"/.difftime\"        \":\"                \n#> [31] \"::\""},{"path":"functions.html","id":"replacement-functions","chapter":"7 Writing functions in R","heading":"7.10 Replacement functions","text":"Execute following instructionand notice object names appear pairs name one member pair ending <-. Examples dim<-, levels<-, diag<-, names<-, rownames<-, colnames<- dimnames<-. Functions names ending <- called replacement functions. replacement function appears left-hand side assignment symbol using name without <- replace contents objects appearing argument list contents object appearing right-hand side assignment symbol e.g.:can object diag<- inspected different object diag? Compare result following function calls:respects replacement functions differ functions?order write replacement function following rules must met:function name must end <-function name must end <-function must return complete object suitable changes madethe function must return complete object suitable changes madethe final argument function corresponding replacement data right-hand side assignment, must named valuethe final argument function corresponding replacement data right-hand side assignment, must named valueusually companion function exists name without <-.usually companion function exists name without <-.example, write replacement function undefined() replace missing values data object values right-hand side:function can created edited using fix(\"undefined<-\"). Illustrate usage undefined().","code":"\nobjects('package:base')[300:400]\n#>   [1] \"c.factor\"                  \n#>   [2] \"c.noquote\"                 \n#>   [3] \"c.numeric_version\"         \n#>   [4] \"c.POSIXct\"                 \n#>   [5] \"c.POSIXlt\"                 \n#>   [6] \"c.warnings\"                \n#>   [7] \"call\"                      \n#>   [8] \"callCC\"                    \n#>   [9] \"capabilities\"              \n#>  [10] \"casefold\"                  \n#>  [11] \"cat\"                       \n#>  [12] \"cbind\"                     \n#>  [13] \"cbind.data.frame\"          \n#>  [14] \"ceiling\"                   \n#>  [15] \"char.expand\"               \n#>  [16] \"character\"                 \n#>  [17] \"charmatch\"                 \n#>  [18] \"charToRaw\"                 \n#>  [19] \"chartr\"                    \n#>  [20] \"chkDots\"                   \n#>  [21] \"chol\"                      \n#>  [22] \"chol.default\"              \n#>  [23] \"chol2inv\"                  \n#>  [24] \"choose\"                    \n#>  [25] \"chooseOpsMethod\"           \n#>  [26] \"chooseOpsMethod.default\"   \n#>  [27] \"class\"                     \n#>  [28] \"class<-\"                   \n#>  [29] \"clearPushBack\"             \n#>  [30] \"close\"                     \n#>  [31] \"close.connection\"          \n#>  [32] \"close.srcfile\"             \n#>  [33] \"close.srcfilealias\"        \n#>  [34] \"closeAllConnections\"       \n#>  [35] \"col\"                       \n#>  [36] \"colMeans\"                  \n#>  [37] \"colnames\"                  \n#>  [38] \"colnames<-\"                \n#>  [39] \"colSums\"                   \n#>  [40] \"commandArgs\"               \n#>  [41] \"comment\"                   \n#>  [42] \"comment<-\"                 \n#>  [43] \"complex\"                   \n#>  [44] \"computeRestarts\"           \n#>  [45] \"conditionCall\"             \n#>  [46] \"conditionCall.condition\"   \n#>  [47] \"conditionMessage\"          \n#>  [48] \"conditionMessage.condition\"\n#>  [49] \"conflictRules\"             \n#>  [50] \"conflicts\"                 \n#>  [51] \"Conj\"                      \n#>  [52] \"contributors\"              \n#>  [53] \"cos\"                       \n#>  [54] \"cosh\"                      \n#>  [55] \"cospi\"                     \n#>  [56] \"crossprod\"                 \n#>  [57] \"Cstack_info\"               \n#>  [58] \"cummax\"                    \n#>  [59] \"cummin\"                    \n#>  [60] \"cumprod\"                   \n#>  [61] \"cumsum\"                    \n#>  [62] \"curlGetHeaders\"            \n#>  [63] \"cut\"                       \n#>  [64] \"cut.Date\"                  \n#>  [65] \"cut.default\"               \n#>  [66] \"cut.POSIXt\"                \n#>  [67] \"data.class\"                \n#>  [68] \"data.frame\"                \n#>  [69] \"data.matrix\"               \n#>  [70] \"date\"                      \n#>  [71] \"debug\"                     \n#>  [72] \"debuggingState\"            \n#>  [73] \"debugonce\"                 \n#>  [74] \"declare\"                   \n#>  [75] \"default.stringsAsFactors\"  \n#>  [76] \"delayedAssign\"             \n#>  [77] \"deparse\"                   \n#>  [78] \"deparse1\"                  \n#>  [79] \"det\"                       \n#>  [80] \"detach\"                    \n#>  [81] \"determinant\"               \n#>  [82] \"determinant.matrix\"        \n#>  [83] \"dget\"                      \n#>  [84] \"diag\"                      \n#>  [85] \"diag<-\"                    \n#>  [86] \"diff\"                      \n#>  [87] \"diff.Date\"                 \n#>  [88] \"diff.default\"              \n#>  [89] \"diff.difftime\"             \n#>  [90] \"diff.POSIXt\"               \n#>  [91] \"difftime\"                  \n#>  [92] \"digamma\"                   \n#>  [93] \"dim\"                       \n#>  [94] \"dim.data.frame\"            \n#>  [95] \"dim<-\"                     \n#>  [96] \"dimnames\"                  \n#>  [97] \"dimnames.data.frame\"       \n#>  [98] \"dimnames<-\"                \n#>  [99] \"dimnames<-.data.frame\"     \n#> [100] \"dir\"                       \n#> [101] \"dir.create\"\nX <- matrix (1:12, ncol = 3, dimnames = \n               list (paste0 (\"Row\", 1:4), paste0 (\"X\", 1:3)))\na <- rownames(X) # Function rownames in action.\nrownames(X) <- 1:nrow(X) # Replacement function 'rownames<-' in action.\ngetAnywhere('diag')\n#> 2 differing objects matching 'diag' were found\n#> in the following places\n#>   package:base\n#>   namespace:base\n#>   namespace:Matrix\n#> Use [] to view one of them\ngetAnywhere('diag<-')\n#> 2 differing objects matching 'diag<-' were found\n#> in the following places\n#>   package:base\n#>   namespace:base\n#>   namespace:Matrix\n#> Use [] to view one of them\n\"undefined<-\" <- function (x, codes = numeric(), value) \n  { if (length(codes) > 0) x[x %in% codes] <- NA\n    x[is.na(x)] <- value\n    x\n  }"},{"path":"functions.html","id":"default-values-and-lazy-evaluation","chapter":"7 Writing functions in R","heading":"7.11 Default values and lazy evaluation","text":"function match.arg() useful selecting default value one set possible values. Consider following example:Functions R language governed principle known lazy evaluation means default value evaluated actually needed within function body. result lazy evaluation might happen function call default values never evaluated.","code":"\nchoice <- function(method=c(\"PCA\",\"CVA\",\"CA\",\"NONLIN\"))\n   { match.arg(method)  }\nchoice()\n#> [1] \"PCA\"\nchoice(\"CVA\")\n#> [1] \"CVA\"\nchoice(\"xx\")\n#> Error in match.arg(method): 'arg' should be one of \"PCA\", \"CVA\", \"CA\", \"NONLIN\""},{"path":"functions.html","id":"the-dynamic-loading-of-external-routines","chapter":"7 Writing functions in R","heading":"7.12 The dynamic loading of external routines","text":"Compiled code can run instances much faster corresponding code R. functions .C() .Fortran() allow users make use programs written C Fortran R functions. done illustrated . Study example carefully consult help files details needed.\nFirst R function created compute matrix product two matrices:Next Fortran subroutine written performing matrix multiplication. Fortran code subroutine given :Next dynamic link library (.dll) made Fortran subroutine. easiest way use command R CMD SHLIB matm.f Command Prompt. dll available C:\\matm64.dll.Now R function written Fortran code called:order use matmult.Fortran() correct dll must loaded current folder using function dyn.load():Compare answers execution time matmult() matmult.Fortran() different sized matrices.Rcpp package made inclusion C++ code R considerably easier robust. detailed description package see Rcpp vignette intro.","code":"\nmatmult <- function (A,B) \n { if(ncol(A) != nrow(B)) stop(\"A and B not conformable with                 \n                       respect to matrix multiplication \\n\")\n   n <- nrow(A)\n   q <- ncol(B)\n   Cmat <- matrix(NA, nrow=n, ncol=q)\n   for(i in 1:n)\n      { for(j in 1:q) Cmat[i,j] <- sum(A[i,] * B[,j])\n      }\n  Cmat\n  }      SUBROUTINE MATM (A1, A2B1, B2, A, B, OUT)\nC     This subroutine performs matrix multiplication.\nC     This should be improved with optimized code (such as \nC     from Linpack, etc.)\n      IMPLICIT NONE\n      INTEGER A1, A2B1, B2\n      DOUBLE PRECISION A(A1,A2B1), B(A2B1,B2), OUT(A1,B2)\nC     DUMMIES\n      INTEGER I, J, K\n      DO 300,J=1,B2\n        DO 200,I=1,A1\n          OUT(I,J)=0\n          DO 100,K=1,A2B1\n            OUT(I,J)=OUT(I,J)+A(I,K)*B(K,J)\n100   CONTINUE\n200   CONTINUE\n300   CONTINUE\n      END\nmatmult.Fortran <-function (A,B) \n { if(ncol(A) != nrow(B)) stop(\"A and B not conformable with \n                       respect to matrix multiplication \\n\")\n    n <- nrow(A)\n    q <- ncol(B)\n    p <- ncol(A)\n    Cmat <- matrix(0, nrow=n, ncol=q)\n    storage.mode(A) <- \"double\"\n    storage.mode(B) <- \"double\"\n    storage.mode(Cmat) <- \"double\"\n    value <- .Fortran(\"matm\", as.integer(n), as.integer(p), \n                          as.integer(q), A, B, matprod=Cmat)\n    value$matprod        }\ndyn.load(\"full path\\\\matm64.dll\")"},{"path":"mapping.html","id":"mapping","chapter":"8 Vectorized programming and mapping functions","heading":"8 Vectorized programming and mapping functions","text":"","code":""},{"path":"data.html","id":"data","chapter":"9 Reading data files into R, formatiing and printing","heading":"9 Reading data files into R, formatiing and printing","text":"","code":""},{"path":"graphics2.html","id":"graphics2","chapter":"10 R graphics: Round II","heading":"10 R graphics: Round II","text":"","code":""},{"path":"modelling.html","id":"modelling","chapter":"11 Statistical modelling with R","heading":"11 Statistical modelling with R","text":"","code":""},{"path":"optimisation.html","id":"optimisation","chapter":"12 Introduction to Optimisation","heading":"12 Introduction to Optimisation","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
