<<<<<<< HEAD
[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"book updated version (le Roux & Lubbe, 2021).","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2013","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2013)","text":"R system open-source software project analyzing data constructing graphics. provides general computer language performing tasks like organizing data, statistical analyses, simulation studies, model fitting, building complex graphics many .Central R system high-level R computer language. roots date back birth computer language S May 5, 1976 Bell Labs, Murray Hill, New Jersey (Chambers, 2008). early days S underwent several revisions extensions mainly implementation UNIX operating system. Eventually enhanced version S licensed name S-PLUS became available Windows operating system name S-PLUS Windows. earlier versions R adhered principles functional programming release version S3 middle eighties building blocks dynamically generated, self-describing objects. publication New S Language (Becker, Chambers & Wilks, 1988) provides detailed description S3. next major development S release Statistical Models S (Chambers & Hastie, 1993) involved merging functional style S object-oriented programming concepts classes methods. However, S3 limited formal support classes methods. introduction S4 objects (Chambers, 1998) introduced new class method system retains S3 compatibility. meantime several versions S-PLUS based upon S3 first later S4 released commercial market.R language introduced paper published Ross Ihaka Robert Gentleman Auckland, New Zealand 1996 (Ihaka & Gentleman, 1996). proposal large extent compatible S included features Lisp/Scheme family languages. important aspect R availability open-source system.R S-PLUS can considered clones underlying S. means able program one can quite easily program warned: also fundamental differences two systems.first two decades twenty-first century interest R exceeded possible expectations. Apart well-maintained core system new releases every months currently literally thousands researchers contributing add-packages cutting-edge developments statistics data analysis.book tutorial twofold aim; learning basics R system program efficiently R. result introductory course S-PLUS taught University Stellenbosch since 1995. initial course based book Introduction S S-Plus (Spector, 1994). Since 2002 increasingly emphasis put R extent currently exclusively devoted R. change necessitated preparation class notes ten-day (eight hours day) tutorial course R. result Step--Step R Tutorial: introduction R applications programming.","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2021","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2021)","text":"Since first publication Step--Step R Tutorial: introduction R applications programming R system experienced dramatic evolutionary process. edition still maintains twofold aim first edition adapting contents needs modernization happening within R system . Deprecated outdated material omitted new developments included. follows brief description changes.Chapter 1 contains new section explaining use R Markdown creating PDF HTML documents R output. Chapters 2, 3, 4 5 see minor changes. Chapter 6 changes made data sets used well exercises borrowed later chapters first edition. Chapter 7, ‘Writing R Functions’, notable reference made Rcpp package inclusion C++ code R. package allows compiled code included considerably easier robust. Vectorized programming mapping functions enhanced Chapter 8 discussion function mapply(). major addition discussion section 8.14 writing user-friendly applications using package shiny. replaces usage function menu(). exercise create simple shiny App also included.first part Chapter 9, ‘Reading data files R, formatting printing’, methods reading Microsoft Excel files updated; functions like readRDS() writeRDS() transporting R objects introduced; clipr package discussed. major addition chapter section devoted functionality provided tidyverse collection R packages data manipulation exploration; tibbles discussed detail well pipe operator %>%, tidy data illustrated data manipulation functions dplyr illustrated detail.Chapter 10, ‘R graphics: Round II’, considerably extended inclusion section specify colours; rewritten section quantile plots inclusion material previously Chapter 11. now section density estimation, includes discussion density histograms average shifted histograms. new section 10.14 package ggplot2 discussed many examples capabilities.chapter ‘Modelling R’ (Chapter 11) extensive discussion Analysis Variance Covariance (Chapter 12) previous edition rewritten completely consolidated new Chapter 11. final chapter now Chapter 12, ‘Introduction Optimization’. Apart new data set material similar Chapter 13 previous edition.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introducing the R System","heading":"1 Introducing the R System","text":"","code":""},{"path":"intro.html","id":"introduction","chapter":"1 Introducing the R System","heading":"1.1 Introduction","text":"chapter introduces R system new R user. Windows operating system emphasized material covered also applies operating systems allowing requirements particular operating system use. Users experience R quickly glance chapter making sure mastered topics covered proceeding main tutorial starting Chapter 2.computer age statistics become inseparable able write computer programs. Therefore, let us start reminder Fundamental Goal S:Conversion idea useful softwareThe challenge pursue goal keeping mind Mission R (Chambers, 2008):… enable best thorough exploration data possibleand Prime Directive (Chambers, 2008):… places obligation creators software program way computations can understood trusted.","code":""},{"path":"intro.html","id":"downloading-the-r-system","chapter":"1 Introducing the R System","heading":"1.2 Downloading the R system","text":"Website downloading R.download R computer: Navigate …/bin/windows/base save file R-x.y.z.-win.exe computer. Click file start installation procedure select defaults unless good reason . select ‘Create desktop icon’ installation phase, icon similar one appear desktop. Alternatively, can find R Applications.core R system installed includes several packages. Apart installed packages several thousands dedicated contributed packages available downloaded users need .","code":""},{"path":"intro.html","id":"QuickSample","chapter":"1 Introducing the R System","heading":"1.3 A quick sample R session","text":"Click R icon created desktop open Commands Window Console. Notice R prompt > waiting instruction user.R prompt > enter 5 – 8. follow following convention write instructions:Repeat () enter 5 – see happens:+ secondary R prompt. indicates instruction unfinished. Either respond completing instruction press Esc key start primary prompt.EnterThis instruction creates R object name (label) xx containing vector\n(1, 2, 3, 4, 5, 6, 7, 8, 10).EnterThis instruction creates R object name yy containing random sample 20 values normal distribution mean 50 standard deviation 15.EnterThe example shows name R object entered prompt, R respond displaying contents object.Obtain representation contents object yy created (d).Obtain representation contents object yy created (d).program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.\ncan R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.can R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:Note prompt appear followed mean object yy.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects can removed following instruction: rm(name1, name2, ... ).Objects can removed following instruction: rm(name1, name2, ... ).Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:instructions resulted opening graph window containing required histogram user can switch console graph window back console.R session can terminated closing window entering q() R prompt. Either way user prompted save workspace. user chooses save, objects created session lost.","code":"\n5 - 8\n#> [1] -3> 5 -\n> +\n> +\nxx <- 1:10\nyy <- rnorm(n = 20, mean = 50, sd = 15) \nxx\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nmean(yy) \n#> [1] 54.05506\ngr.data <- rnorm(1000) \nhist(gr.data)"},{"path":"intro.html","id":"working-with-rstudio","chapter":"1 Introducing the R System","heading":"1.4 Working with RStudio","text":"Many users R prefer working RStudio. RStudio free open source integrated development environment R works standard version R available CRAN. can downloaded RStudio home page run desktop (Windows, Mac Linux). Full details functionality RStudio available home page. , brief introduction RStudio given.RStudio installed computer following icon created desktop:Clicking icon open RStudio development environment shown Figure 1.1. order open R workspace RStudio drag corresponding .RData file RStudio icon drop soon ‘Open RStudio’ becomes visible.\nFigure 1.1: RStudio development environment R.\nbottom left-hand panel familiar R console.bottom right-hand panel used :\n() listing files folder workspace (.RData) active project kept\n(b) listing installed packages available attached search path well menus installing updating packages\n(c) graph windows ()\n(d) Help facilities.top left-hand panel can used creating managing script files (see 1.9.1) top right-hand panel provides information objects current folder well history previous commands given console.","code":""},{"path":"intro.html","id":"r-an-interpretive-computer-language","chapter":"1 Introducing the R System","heading":"1.5 R: an interpretive computer language","text":"Essentially, interpretive language instructions given one one. instruction evaluated interpreted turn internal program called interpreter evaluator immediate action taken. example, instruction given 1.3() evaluated R evaluator resulting answer –3 returned. hand, 1.3(b) evaluator found instruction incomplete therefore asked information.advantage interpretive language intermediate results can obtained quickly without first wait complete program finish case compiler language. latter case complete program translated (compiled) program called compiler. compiled program can converted standalone application can called programs perform complete task. general compiler languages handle computer memory relatively efficiently calculations executed speedily.\nCommunication R evaluator takes place set instructions called escape sequences. escape sequences take form backslash preceding character. Examples escape sequences :\\n new line\\r carriage return\\t go next tab stop\\b backspace\\bell\\f form feed\\v vertical tabA consequence role backslash R single backslash filename properly recognized. Therefore, referring R following file path “c:\\Documents\\myFile.txt” backslashes must entered double backslashes .e. \"c:\\\\Documents\\\\myFile.txt\" \"c:/Documents/myFile.txt\".","code":""},{"path":"intro.html","id":"exercise","chapter":"1 Introducing the R System","heading":"1.5.1 Exercise","text":"cat() function can used write text message console. Initialize new R session investigate results following R instructions:purpose semi-colon line ?distinguish two soundings bell? Try following:now distinguish two soundings bell?purpose Sys.sleep() instruction?","code":"\ncat(\"aaa bbb\")\ncat(\"aaa bbb \\n\")\ncat(\"aaa \\n bbb \\n\")\ncat(\"aaa \\nbbb \\n\")\ncat(\"aaa \\t\\t bbb \\n\") \ncat(\"aaa\\b\\b\\bbbb \\n\") \ncat(\"aaa \\n\\a bbb \\a\\n\") \ncat(\"1\\a\\n\"); cat(\"2\\a\\n\")\ncat(\"1\\a\\n\"); Sys.sleep(2); cat(\"2\\a\\n\") "},{"path":"intro.html","id":"exercise-1","chapter":"1 Introducing the R System","heading":"1.5.2 Exercise","text":"Write R code achieve following output:name :Bell sounds .name appears new line.Two distinct sounds bell heard andThank visible new line.cursor appears new line.","code":""},{"path":"intro.html","id":"accessing-the-help-functionality","chapter":"1 Introducing the R System","heading":"1.6 Accessing the Help functionality","text":"Useto obtain help usage R function mean().Find difference instructionsandWhat help available via instructionUseto find obtain help using R function help.search(xx). Note: hep operator reserved word quotes needed, e.g.butor","code":"\n?mean\n?mean\n??mean\nhelp.start()\n?help.search()\n?matrix\n?\"?\"\n?\"for\""},{"path":"intro.html","id":"MoreBasics","chapter":"1 Introducing the R System","heading":"1.7 More R basics","text":"R interactive language allows fast acquisition results.R interactive language allows fast acquisition results.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R objects studied detail later chapters. important now, following:R objects studied detail later chapters. important now, following:Everything R object.different types objects e.g. function objects, data objects, graphics objects, character objects, numeric objects.Usually objects stored current folder called Global environment; recognized R name .GlobalEnv available file system name .RData.Objects created console assignment instructionorIn R names case sensitive .e. peter Peter two different objects.Objects created assignment R session stored permanently Global environment (working directory) unless user chooses save terminating R session.Care must exercised creating new object assignment: object name .object already exists Global environment new object created assigning name .object old .object -written replaced new object without warning.Remember way R evaluator operates: object name given R prompt R evaluator responds displaying content object. Review difference instructionsandThe symbol # marks comment. Everything following # line ignored R evaluator. Check example result instructionUsage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.Usage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.symbol -> assigns object left-hand side name (label) right-hand side.symbol -> assigns object left-hand side name (label) right-hand side.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.help (?) facility: Table 1.1 contains details help available special keywords.help (?) facility: Table 1.1 contains details help available special keywords.Table 1.1:  useful keywords available help queries.","code":"\nname <- object\nobject <- name\nq\nq()\n5+8 # +12\n#> [1] 13"},{"path":"intro.html","id":"regular-expressions-in-r-the-basics","chapter":"1 Introducing the R System","heading":"1.8 Regular expressions in R: the basics","text":"follows 1.7(d) care must taken objects assigned names. Furthermore, Global environment R database may easily contain hundreds objects. Therefore, frequent task search patterns names objects e.g. searching object names starting “Figure” ending “.dat”. R function objects() ls() arguments pos pattern specifying position database search pattern characters appearing name (string), respectively. pattern argument can given regular expression. Regular expressions provide method expressing patterns character values used perform various tasks R. considering task extracting certain specified objects database using pattern argument objects() ls().syntax regular expressions follows different rules syntax ordinary R instructions. Moreover syntax differs depending particular implementation program uses. default, R uses set regular expressions similar used UNIX utilities, function arguments available changing default e.g. setting argument perl = TRUE.Regular expressions consist three components: single characters, character classes modifiers operating single characters character classes.Character classes formed using square brackets surrounding set characters matched e.g. [abc123], [-z], [-zA-Z], [0-9a-z]. Note usage dash indicate range values.modifiers operating characters character classes summarized Table 1.2.Table 1.2:  Modifiers regular expressions.role modifiers forming character classes following characters must preceded backslash literal meaning needed:Note R means whenever one characters needs escaped regular expression must preceded double backslashes. Table 1.3 contains examples regular expressions.Table 1.3:  Examples regular expressions.","code":"[  ]  {  }  (  )  ^  $  .  |  *  +  \\"},{"path":"intro.html","id":"exercise-2","chapter":"1 Introducing the R System","heading":"1.8.1 Exercise","text":"Initialize R sessionAttach MASS package second (default) position search path issuing commandGet listing objects package MASS requestingExplain difference objects(pos=2, pat=\".\") objects(pos=2, patt=\"\\\\.\").Obtain listing objects names starting three letters followed digit.Obtain listing objects names ending three letters followed digit.Obtain listing objects names ending period followed exactly three four letters.","code":"\nlibrary(MASS)\nobjects(pos=2)"},{"path":"intro.html","id":"FunctionIntro","chapter":"1 Introducing the R System","heading":"1.9 From single instructions to sets of instructions: introducing R functions","text":"Consider following problem: R data set sleep contains extra hours sleep 20 patients drug treatment. Suppose data set can considered sample normal population. 95% confidence interval required mean extra hours sleep. known confidence interval given \\(\\left[ \\mathbf{\\bar{x}}- \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025}; \\mathbf{\\bar{x}}+ \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025} \\right]\\). problem can solved entering following instructions one one:situations like , problem can addressed using script file writing function. going introduce two methods writing functions R:using script file andusing function fix().","code":"\nsleep.data <- sleep[ ,1]   \nsleep.mean <- mean(sleep.data)   \nsleep.sd <- sd(sleep.data)    \nt.perc <- qt(0.975,19) \nleft.boundary <- sleep.mean - (sleep.sd/sqrt(length(sleep.data)))*t.perc \nright.boundary <- sleep.mean + (sleep.sd/sqrt(length(sleep.data)))*t.perc\ncat (\"[\", left.boundary, \";\", right.boundary, \"]\\n\")\n#> [ 0.5955845 ; 2.484416 ]"},{"path":"intro.html","id":"script","chapter":"1 Introducing the R System","heading":"1.9.1 Writing an R function using a script file","text":"R top menu select File; New script. script window open simultaneous change menu bar.Type instructions script window.Select typed text run script clicking run icon (Ctrl+R).Note shown R console window.Script files ordinary text files. can saved, edited opened using text editor.convention R script files extension xxxx.r.Next, change spelling last two lines right.boundary Right.boundary. Select text run script. Check output appearing console.Script windows can also used creating R function.Create R function changing text shown .Select text notice happens R commands window (console).Give instruction objects() R prompt. happened?can now run function commands window (console) typing:want create run function conf.int script window add instruction conf.func (x = sleep[,1]) last line script window. Now, select line run . Check R console.happen syntax error made script window? Change code script file follows, deliberately deleting last closing parenthesis last line function.Select final line run . Check R console. problem, function executed correctly. code conf.int script file changed, updated object created running console.Select code script run . Check R console. Discuss.","code":"\nconf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)  \n}\nconf.int (x = sleep[,1])\n#> $lower\n#> [1] 0.5955845\n#> \n#> $upper\n#> [1] 2.484416conf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary\n}\nconf.int (x = sleep[,1])"},{"path":"intro.html","id":"writing-an-r-function-using-fix","chapter":"1 Introducing the R System","heading":"1.9.2 Writing an R function using fix()","text":"using fix() built-R text editor can used using script files windows environment notepad preferably notepad++ Tinn-R preferred.following instruction necessary changing default editor used fix():orEnter fix (.func) R prompt. text editor open. Type instructions shown .Close window. Check happens R console.can now run function commands window (console) similar 1.9.1(l), changing name function conf.int .func.happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?Carefully study message R console syntax error occurred function created fix():Carefully study message R console syntax error occurred function created fix():following correct way respond message R evaluator:simply use fix(.func) point, R editor revert version function previous edit.WARNINGBefore writing function solving problem: make sure problem understood exactly; make 100% sure relevant statistical theory understood correctly. Failure careless dangerous!","code":"\noptions(editor = \"notepad\")\noptions(editor = \"full path to the relevant exe file\")function (x = sleep[,1])\n{\n  x.mean <- mean(x)`\n  x.sd <- sd(x)\n  t.perc <- qt(0.975,19)\n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc\n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)\n}> Error in edit(name, file, title, editor) :\n    unexpected 'yyy' occurred on line xx\n    use a command like\n    x <- edit()\n    to recover\nmy.func <- edit()"},{"path":"intro.html","id":"r-projects","chapter":"1 Introducing the R System","heading":"1.10 R Projects","text":"different windows R Data window, Script window, Graph window Menus Dialog windows. current workspace R .GlobalEnv. function getwd() used obtain path current folder’s .Rdata .Rhistory.Note: order see files .Rdata .Rhistory displayed , may necessary turn option “Hide extensions known file types” Windows Explorer.important make provision different workspaces associated different projects. R, different .Rdata files different folders separate different projects. however much gain using Projects RStudio.","code":""},{"path":"intro.html","id":"creating-a-project-in-rstudio","chapter":"1 Introducing the R System","heading":"1.10.1 Creating a project in RStudio","text":"top menu, select File, New Project. Follow prompts create new project, either existing folder creating new folder project, say MyProject.Navigate folder MyProject Windows Explorer.Notice file MyProject.Rproj created folder.double-clicking file open project RStudio. advantages opening project way :workspace file MyProject.Rdata automatically loadedby placing related files like data set folder MyProject subfolder, say MyProject\\data means code use relative folder references, .e. refer MyProject\\mydata.xlsx MyProject\\data\\mydata.xlsx instead something like c:\\users\\myname\\Documents\\MyProject\\data\\mydata.xlsx.major advantage relative references specific computer makes porting devices possiblesharing project collaborator simply entail copying entire contents MyProject folder.","code":""},{"path":"intro.html","id":"a-note-on-computations-by-a-computer","chapter":"1 Introducing the R System","heading":"1.11 A note on computations by a computer","text":"writing R functions important keep mind way computations performed computer always according rules algebra. Two important occurrences given .mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.Open R session issue commandfor details numerical environment computer.","code":"\n.Machine"},{"path":"intro.html","id":"built-in-data-sets-in-r","chapter":"1 Introducing the R System","heading":"1.12 Built-in data sets in R","text":"R contains several built-data sets collected package datasets. package automatically attached search path. Type ?datasets R prompt details. Apart data sets several data sets packages also used book.","code":""},{"path":"intro.html","id":"the-use-of-.first-and-.last","chapter":"1 Introducing the R System","heading":"1.13 The use of .First() and .Last()","text":"function .First() executed beginning every R session. works R RStudio.Instead specifyeach time R session initialized, create following function save .Rdata exiting R.ensures Notepad text editor subsequent session.Similar .First() function .Last() can created execution end R session.","code":"\noptions(editor = \"notepad\")\n.First <- function() { options(editor = \"notepad\") }"},{"path":"intro.html","id":"security-an-example-of-the-usage-of-.first","chapter":"1 Introducing the R System","heading":"1.13.1 Security: an example of the usage of .First()","text":".First() facility can used prevent access R workspace setting password protection. can done follows:Create new workspace running example security. workspace create following R functionNow create function:Terminate R session open .Discuss construction usage functions.Can break security?Can make changes security make safe?","code":"\npassword <- function()        # Note the structure of a function\n{ cat(\"Password? \\n\")\n  password <- readline()      # What is the usage of readline()? \n  if (password != \"PASSWORD\") \n    q(save=\"no\")              # The meaning of !=  is \"not equal to\"\n  else (cat(\"You can proceed \\n\"))\n}               \n.First <- function()\n{   #  What must you be careful of?\n   password()\n}"},{"path":"intro.html","id":"options","chapter":"1 Introducing the R System","heading":"1.14 Options","text":"Study result instruction > options() R.","code":""},{"path":"intro.html","id":"creating-pdf-and-html-documents-from-r-output-r-markdown","chapter":"1 Introducing the R System","heading":"1.15 Creating PDF and HTML documents from R output: R Markdown","text":"R package knitr used obtain reproducible results R code form PDF HTML documents. addition knitr, R Markdown can used create HTML, PDF even MS Word documents. Markdown -called markup language plain-text-formating syntax. R Markdown document written markdown contains chunks embedded R code. Although render() function package rmarkdown can used (similar knit() function package knitr), create output document R Markdown .Rmd file, R Markdown typically used conjunction RStudio. top menu, select File, New File, R Markdown… open example.Rmd file providing user structure R Markdown file. illustration, select output format HTML.Edit example.Rmd file contain following:top text editor, click Knit create HTML document. Note arrow, options Knit PDF Knit Word can also chosen. output format also specified line 5 text file output: html_document. chosen PDF output format, output: pdf_document. Typically, R Markdown used reporting, directly incorporating R code output. formal documents Figure Table caption references, tables content, etc. R package bookdown used. Install package replace output statement output:bookdown::pdf_document2. information use bookdown, click .","code":"---\ntitle: \"An Illustration of Some Capabilities of R Markdown\"\nauthor: \"Niel le Roux and Sugnet Lubbe\"\ndate: \"22/01/2021\"\noutput: html_document\n---\n\n  \n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Short description\n\nCode chunks in .Rmd files are delimited with ` ```{r} ` at the top where a chunk \nlabel and any chunk options can appear and  ` ``` ` at the end. In-line R code \nchunks are indicated with single ` `r ` on either side.\n\n*****\n\nHere is an example containing several chunks of code. Note that in the first \nchunk R code is not shown due to the option `echo = FALSE`. In the remaining \nchunks R code is shown due to the option above 'echo = TRUE'.\n\n_Note R code not shown for this chunk._\n\n```{r y, echo=FALSE}\ny <- 1\ny\n```\n\n```{r rnorm}\nrequire(lattice)\nset.seed(123)\nx <- rnorm(1000, 20, 5)\n```\n\nWe analyse data drawn from $\\mathcal{N}(20,25)$. The mean is \n`r round(mean(x),3)`. The following code shows the distribution via a histogram\n\n```{r histexample}\n  hist(x)\n```\n\nand the code below via a boxplot.\n\n```{r boxexample}\n  boxplot(x)\n```\n\nThe first element of \\texttt{x} is `r x[1]`. Note the usage of ` \\texttt{x} ` \nabove.\n\n*two plots side by side (option fig.show='hold')*\n\n```{r side-by-side, fig.show='hold', out.width=\"50%\"}\n  par(mar=c(4,4,0.1,0.1), cex.lab=0.95, cex.axis=0.9, mgp=c(2,0.7,0), tcl=-0.3, \n  las=1)\n  boxplot(x)\n  hist(x,main=\"\")\n```\n\n```{r linear_model}\n  n <- 10\n  x <- rnorm(n)\n  y <- 2*x + rnorm(n)\n  out <- lm(y ~ x)\n  summary(out)$coef\n```"},{"path":"intro.html","id":"command-line-editing","chapter":"1 Introducing the R System","heading":"1.16 Command line editing","text":"Commands given R session stored together commands given previous sessions file .History folder .RData file. R session previous commands can retrieved R prompt pressing arrow keys. previous command can edited using backspace, delete, home, end keys well shortcuts copy paste.","code":""},{"path":"objects.html","id":"objects","chapter":"2 Managing objects","heading":"2 Managing objects","text":"completing introductory chapter now know toinitialize R session;save workspace;open existing project;execute simple tasks R obtain numerical, text graphical results;obtain help.know also everything R can considered kind object. chapter focus properties different objects manage objects workspace.","code":""},{"path":"objects.html","id":"instructions-and-objects-in-r","chapter":"2 Managing objects","heading":"2.1 Instructions and objects in R","text":"","code":""},{"path":"objects.html","id":"general","chapter":"2 Managing objects","heading":"2.1.1 General","text":"Recall thatinstructions separated semi-colon start new lines;instructions separated semi-colon start new lines;# symbol marks rest line comments;# symbol marks rest line comments;default R (primary) prompt >; secondary default prompt +;default R (primary) prompt >; secondary default prompt +;use <- create objects. (equality sign (=) also accepted. However, avoid practice use\n= function arguments;\n<- assignment;\n== comparison / control structures);\nuse <- create objects. (equality sign (=) also accepted. However, avoid practice use= function arguments;<- assignment;== comparison / control structures);use -> assigning left-hand side name right-hand side.use -> assigning left-hand side name right-hand side.use function assign() assigning names objects. (discussed detail Chapter 3)use function assign() assigning names objects. (discussed detail Chapter 3)","code":""},{"path":"objects.html","id":"examples","chapter":"2 Managing objects","heading":"Examples","text":"Assigning numeric vector name “aa”. Assignment takes place global environment.Assigning character vector name “bb”.Note use argument pos, ” ” ’ ’ used characters. careful mixing single quotes double quotes. See .Explain error message .Explain backslash .","code":"\naa <- 1:10\nAa <- seq(from = 1,to = 10,by = 0.01); yy <- c(\"a\",\"b\",\"c\")\nc(\"a\",\"b\",\"c\") -> bb \nassign(\"aa\", rnorm(10), pos = 1)c(\"u\",'v',\"'w'\",\"\"x\"\",'\"y\"',''z'') -> cc\n#> Error: <text>:1:19: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",\"\"x\n#>                       ^c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z'') -> cc\n#> Error: <text>:1:31: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z\n#>                                   ^\nc(\"u\",'v',\"'w'\",'\"x\"','\"y\"','z') -> cc \ncc\n#> [1] \"u\"     \"v\"     \"'w'\"   \"\\\"x\\\"\" \"\\\"y\\\"\" \"z\"\nobjects()\n#> [1] \"aa\" \"Aa\" \"bb\" \"cc\" \"yy\"\naa\n#>  [1] -1.20308433 -0.35250505 -0.53208458  0.12269365\n#>  [5] -0.14171589 -0.12705789 -0.09979359  3.09734877\n#>  [9] -0.38240962  0.81154015\nbb\n#> [1] \"a\" \"b\" \"c\"\nobjects()[3]\n#> [1] \"bb\"\nparse(text=objects()[3])\n#> expression(bb)\neval(parse(text=objects()[3]))\n#> [1] \"a\" \"b\" \"c\"\nrm(a,b)\n#> Warning in rm(a, b): object 'a' not found\n#> Warning in rm(a, b): object 'b' not found\nrm(aa,bb)\nobjects()\n#> [1] \"Aa\" \"cc\" \"yy\"\nrm(\"cc\")\nobjects()\n#> [1] \"Aa\" \"yy\""},{"path":"objects.html","id":"objects-in-r","chapter":"2 Managing objects","heading":"2.1.2 Objects in R","text":"Everything object many different types objects.Everything object many different types objects.Study also take note following naming conventions:Study also take note following naming conventions:Allowed upper lower case letters, numbers 0 – 9, full stop(s) underscore(s).Must begin number.R case sensitive .e. John john refer different objects.Use full stops (periods) underscores break name meaningful words.Avoid c, s, t, C, F, T, diff well reserved words naming object.use functions conflicts() find() naming objects. instruction conflicts (detail = TRUE) outputs details whether objects identical names exist search path e.g.instruction find (\"object\") outputs details whether objects name object exist search path e.g.Objects can possess several attributes e.g. mode (way object internally stored)lengthnamesdimclass","code":"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nfind(\"kronecker\")\n#> [1] \"package:methods\" \"package:base\""},{"path":"objects.html","id":"examples-1","chapter":"2 Managing objects","heading":"Examples","text":"Levels show categorical variable (object).Mode numeric tells us categorical variable (object) b internally stored set numeric codes.Special attention given class mode integers. object type integer stored internally effectively integer represented double format.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created within function exist long function executed.Objects created within function exist long function executed.Use rm() rm(list = ListOfNames) remove objects workspace.Use rm() rm(list = ListOfNames) remove objects workspace.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.can object printed screen?can object printed screen?Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .","code":"\na <- 1:10\nclass(a)\n#> [1] \"integer\"\nb <- factor(c(\"a\",\"b\",\"c\"))\nclass(b)\n#> [1] \"factor\"\nb\n#> [1] a b c\n#> Levels: a b c\nmode(a)\n#> [1] \"numeric\"\nmode(b)\n#> [1] \"numeric\"\nlength(a)\n#> [1] 10\nlength(b)\n#> [1] 3\ndim(a)\n#> NULL\nmat <- matrix(1:12,nrow=4)\nmat\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12\ndim(mat)\n#> [1] 4 3\nmode(mat)\n#> [1] \"numeric\"\nlogic <- c(TRUE,TRUE,FALSE,TRUE)\nmode(logic)\n#> [1] \"logical\"\nclass(logic)\n#> [1] \"logical\"\nx <- 5\ny <- 5L\ntypeof(x)\n#> [1] \"double\"\ntypeof(y)\n#> [1] \"integer\"\nclass(x)\n#> [1] \"numeric\"\nclass(y)\n#> [1] \"integer\"\nmode(x)\n#> [1] \"numeric\"\nmode(y)\n#> [1] \"numeric\""},{"path":"objects.html","id":"data-in-r","chapter":"2 Managing objects","heading":"2.1.3 Data in R","text":"R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.Study help file c().Study help file c().Study help file scan().Study help file scan().Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.","code":""},{"path":"objects.html","id":"generation-of-data","chapter":"2 Managing objects","heading":"2.1.4 Generation of data","text":"Study operators functions :, seq(), rep(), rev(), rnorm(), runif() following instructions:function rmvnorm() generating multivariate normal samples mvtnorm R package. package must first loaded using instructionAlternatively, generating multivariate normally data also function mvrnorm() R package MASS.","code":"\n1:10\n8:3\nseq(from=1, to=10, length=10)\nseq(from=2, to=10, length=5)\nrev(10:1)\nrnorm (20, mean=50, sd=5)\nrunif (10, min=1, max=3)\nlibrary(mvtnorm)"},{"path":"objects.html","id":"introduction-to-functions-in-r","chapter":"2 Managing objects","heading":"2.2 Introduction to functions in R","text":"introduced R functions section 1.9. basic structure R function follows:function func.name() called, code { } executed.arguments function can inspected using commandThe function str(x) provides information object x. x function output similar args(). Default values given function arguments using construction (argument name = value). good programming practice make extensively use comments describe arguments / particular chunk code .\nusage following function:function argument called dummy argument. happen object working directory?Functions called replacing formal arguments actual arguments. can done position name. Hint: less error prone call functions using named arguments. Create following functionExecute following function calls explain outputNote use prompt() package.skeleton() provide new function help-file.final expression R function automatically returned function completes execution.function consists single line, can written succinctlyor even without { }:general, functions consist lines code often multiple outputs returned. single output object needs returned, object can created last line codeor return() statement:general, outputs combined returned list. final expression function creates list object:return multiple outputs, list simply extended shown :good practice name output objects list, :Finally, place output object processing, function assigned object name:","code":"func.name <- function(list of arguments)\n{\n  # R code\n}args(name of function)\ncube <- function(a) a^3\nDemofunc <- function(vec = 1:10, m,k)\n { # Function to subtract a specified constant from\n   # each element of a given vector and after subtraction\n   # divide each element by a second specified constant.\n   # The result of the above transformation is returned.\n (vec - m)/ k \n}\nDemofunc(3, 2, 5)\n#> [1] 0.2\nDemofunc(2,5)\n#> Error in Demofunc(2, 5): argument \"k\" is missing, with no default\nDemofunc(m = 2, k = 5)\n#>  [1] -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6\nDemofunc(m = 2, k = 5, vec = 1:100)\n#>   [1] -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6  1.8\n#>  [12]  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6  3.8  4.0\n#>  [23]  4.2  4.4  4.6  4.8  5.0  5.2  5.4  5.6  5.8  6.0  6.2\n#>  [34]  6.4  6.6  6.8  7.0  7.2  7.4  7.6  7.8  8.0  8.2  8.4\n#>  [45]  8.6  8.8  9.0  9.2  9.4  9.6  9.8 10.0 10.2 10.4 10.6\n#>  [56] 10.8 11.0 11.2 11.4 11.6 11.8 12.0 12.2 12.4 12.6 12.8\n#>  [67] 13.0 13.2 13.4 13.6 13.8 14.0 14.2 14.4 14.6 14.8 15.0\n#>  [78] 15.2 15.4 15.6 15.8 16.0 16.2 16.4 16.6 16.8 17.0 17.2\n#>  [89] 17.4 17.6 17.8 18.0 18.2 18.4 18.6 18.8 19.0 19.2 19.4\n#> [100] 19.6\nmy.func <- function(a=5) \n{  a+2\n}\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) {  a+2  }\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) a+2\nmy.func()\n#> [1] 7\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     number/a\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     return(number/a)\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number, number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 64\n#> \n#> [[2]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nmy.func()\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nout <- my.func()\nout\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8"},{"path":"objects.html","id":"how-r-finds-data","chapter":"2 Managing objects","heading":"2.3 How R finds data","text":"order understand objects found R necessary understanding conceptsEnvironmentFrameSearch pathParent environmentInheritance.mechanism R uses organize objects based frames environments. frame collection named objects environment consists frame together pointer reference another environment called parent environment. Environments nested parent environment environment directly contains current environment. start R session workspace created always associate environment, global environment. global environment occupies first position search path accessed call globalenv(). Packages databases can added search path call attach() removed search path call detach().R package? difference installing loading package?Work following example:attach package MASSBy default MASS attached second position search path.use detach remove MASS search path.obtain parent global environmentWhen R evaluator looks object find name global environment search parent global environment. carry search along search path first occurrence name. name found return message Error: object 'xx' found. usage double colon :: triple colon ::: access intended object one object name exist search path. two operators use namespace facility R packages. namespace package allow creator package hide functions data meant internal use; provides way operators :: ::: object within particular package. Thus namespace prevent functions breaking user selects name clashes one package. double-colon operator :: selects objects particular namespace. functions exported package can retrieved way. triple-colon operator ::: acts like double-colon operator also allows access hidden objects. Packages often inter-dependent, loading one may cause others automatically loaded. automatically loaded packages added search list.note function call getAnywhere(), searches multiple packages can used finding hidden objects. function called, R creates new (temporary) environment enclosed current (calling) environment. Objects created new environment available parent environment dies function terminates. Objects calling environment available use new environment created function called.Similarly, expression evaluated hierarchy environments created. Search objects continue hierarchy necessary global environment onto search path.Study use arguments pos, .names, pattern function objects().Study behaviour functions conflicts() exists() examples :Study code carefully explain inheritance .example leads conclusion complicated stage. behaviour become clear work coming chapters.Direct access objects search path can achieved function get().\nfunction get() takes first argument name object character string. optional argument pos can used specify search list look object. illustration explain outcomes following function calls:Instead attaching databases function () often preferred. Discuss usage () referring instructions:","code":"\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nlibrary (MASS)\nsearch()\n#>  [1] \".GlobalEnv\"        \"package:MASS\"     \n#>  [3] \"package:stats\"     \"package:graphics\" \n#>  [5] \"package:grDevices\" \"package:utils\"    \n#>  [7] \"package:datasets\"  \"package:methods\"  \n#>  [9] \"Autoloads\"         \"package:base\"\ndetach(\"package:MASS\")\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nparent.env(.GlobalEnv)\n#> <environment: package:stats>\n#> attr(,\"name\")\n#> [1] \"package:stats\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.3/library/stats\"\nparent.env(parent.env(.GlobalEnv))\n#> <environment: package:graphics>\n#> attr(,\"name\")\n#> [1] \"package:graphics\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.3/library/graphics\"\nparent.env(parent.env(parent.env(.GlobalEnv)))\n#> <environment: package:grDevices>\n#> attr(,\"name\")\n#> [1] \"package:grDevices\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.3/library/grDevices\"\nenvironmentName(parent.env(parent.env(parent.env(.GlobalEnv))))\n#> [1] \"package:grDevices\"\nconflicts()\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nexists(\"kronecker\")\n#> [1] TRUE\nexists(\"kronecker\", where = 1)\n#> [1] TRUE\nexists(\"kronecker\", where = 1, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 2)\n#> [1] TRUE\nexists(\"kronecker\", where = 2, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 7, inherits = FALSE)\n#> [1] TRUE\nexists(\"kronecker\", where = 8, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 9, inherits = FALSE)\n#> [1] TRUE\nsapply(search(), function(x) exists(\"kronecker\", where = x, inherits=FALSE))\n#>        .GlobalEnv     package:stats  package:graphics \n#>             FALSE             FALSE             FALSE \n#> package:grDevices     package:utils  package:datasets \n#>             FALSE             FALSE             FALSE \n#>   package:methods         Autoloads      package:base \n#>              TRUE             FALSE              TRUE\nget (\"%o%\") \n#> function (X, Y) \n#> outer(X, Y)\n#> <bytecode: 0x0000023ab848f958>\n#> <environment: namespace:base>\nmean <- mean (rnorm (1000))\nget (mean)\n#> Error in get(mean): invalid first argument\nget (\"mean\") \n#> [1] -0.04858364\nget (\"mean\", pos = 1) \n#> [1] -0.04858364\nget (\"mean\", pos = 2)\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x0000023ab63bbca0>\n#> <environment: namespace:base>\nrm (mean)\nwith (beaver1, mean(time))\n#> [1] 1312.018\nwith (beaver2, mean(time))\n#> [1] 1446.2"},{"path":"objects.html","id":"the-organisation-of-data-data-structures","chapter":"2 Managing objects","heading":"2.4 The organisation of data (data structures)","text":"Study help files list(), matrix(), data.frame() c() carefully.list created function list(). list basic means storing collection data objects R modes /lengths objects different. List elements accessed using [[ ]] $ objects named. List objects named using constructionand elements retrieved using instructionA matrix R rectangular collection data, mode (e.g. numeric, character/text logical). formed constructionMatrix elements accessed using .matrix[,j]. functions nrow(), ncol(), dim(), dimnames(), colnames() rownames() useful working matrices.dataframe also rectangular collection data columns can different modes. can regarded cross list matrix. Dataframes constructed function data.frame().Study help files functions.","code":"\nmy.list <- list(name1 = 1:10, name2 = mean)\nmy.list\n#> $name1\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> $name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x0000023ab63bbca0>\n#> <environment: namespace:base>\nmy.list[[2]]\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x0000023ab63bbca0>\n#> <environment: namespace:base>\nmy.list$name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x0000023ab63bbca0>\n#> <environment: namespace:base>\nmy.matrix <- matrix(1:12, ncol=3, nrow=4, byrow=FALSE)\nmy.matrix\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12"},{"path":"objects.html","id":"time-series","chapter":"2 Managing objects","heading":"2.5 Time series","text":"Study usage function ts().","code":""},{"path":"objects.html","id":"the-functions-as.xxx-and-is.xxx","chapter":"2 Managing objects","heading":"2.6 The functions as.xxx() and is.xxx()","text":"function .xxx() transforms object best possible specified type e.g. .matrix(mydata) transforms numerical dataframe numerical matrix. .xxx() tests argument certain type e.g. .matrix(mydata) evaluates false mydata satisfy conditions matrix.","code":""},{"path":"objects.html","id":"simple-manipulations-numbers-and-vectors","chapter":"2 Managing objects","heading":"2.7 Simple manipulations; numbers and vectors","text":"Explain vector calculations recycling principle referring example .Logical vectors. Explain behaviour instruction belowMissing values: NA (indicate missing value data), NaN (number)Character vectors: see section 3.5.6Character vectors: see section 3.5.6Subscripting vectors: see section 5.1Subscripting vectors: see section 5.1","code":"\nc(1,3,5,9) + c(1,2,3)\n#> Warning in c(1, 3, 5, 9) + c(1, 2, 3): longer object length\n#> is not a multiple of shorter object length\n#> [1]  2  5  8 10\nsum (c (TRUE, FALSE, TRUE, TRUE, FALSE))\n#> [1] 3\n10/0\n#> [1] Inf\n0/0\n#> [1] NaN"},{"path":"objects.html","id":"objects-their-modes-and-attributes","chapter":"2 Managing objects","heading":"2.8 Objects, their modes and attributes","text":"Vector elements must mode: logical, numeric, complex, characterEmpty object; created (e.g. xx <- numeric()) components may added (e.g. xx[5] <- 22)Getting setting attributes: functions attr() attributes()Class object function unclass() removing class.","code":""},{"path":"objects.html","id":"representation-of-objects","chapter":"2 Managing objects","heading":"2.9 Representation of objects","text":"already seen representation object can obtained calling (entering) name:often convenient full representation returned object . functions head(), str() summary() available extracting partial representation object:many R functions provided getting information R object represents. functions like mode(), class(), length(), levels(), .xxx() .xxx() already encountered others given chapters come.","code":"\ncars\n#>    speed dist\n#> 1      4    2\n#> 2      4   10\n#> 3      7    4\n#> 4      7   22\n#> 5      8   16\n#> 6      9   10\n#> 7     10   18\n#> 8     10   26\n#> 9     10   34\n#> 10    11   17\n#> 11    11   28\n#> 12    12   14\n#> 13    12   20\n#> 14    12   24\n#> 15    12   28\n#> 16    13   26\n#> 17    13   34\n#> 18    13   34\n#> 19    13   46\n#> 20    14   26\n#> 21    14   36\n#> 22    14   60\n#> 23    14   80\n#> 24    15   20\n#> 25    15   26\n#> 26    15   54\n#> 27    16   32\n#> 28    16   40\n#> 29    17   32\n#> 30    17   40\n#> 31    17   50\n#> 32    18   42\n#> 33    18   56\n#> 34    18   76\n#> 35    18   84\n#> 36    19   36\n#> 37    19   46\n#> 38    19   68\n#> 39    20   32\n#> 40    20   48\n#> 41    20   52\n#> 42    20   56\n#> 43    20   64\n#> 44    22   66\n#> 45    23   54\n#> 46    24   70\n#> 47    24   92\n#> 48    24   93\n#> 49    24  120\n#> 50    25   85\nhead(cars)\n#>   speed dist\n#> 1     4    2\n#> 2     4   10\n#> 3     7    4\n#> 4     7   22\n#> 5     8   16\n#> 6     9   10\nsummary(cars)\n#>      speed           dist       \n#>  Min.   : 4.0   Min.   :  2.00  \n#>  1st Qu.:12.0   1st Qu.: 26.00  \n#>  Median :15.0   Median : 36.00  \n#>  Mean   :15.4   Mean   : 42.98  \n#>  3rd Qu.:19.0   3rd Qu.: 56.00  \n#>  Max.   :25.0   Max.   :120.00\nstr(cars)\n#> 'data.frame':    50 obs. of  2 variables:\n#>  $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n#>  $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\nlength(cars) \n#> [1] 2\nlength(as.matrix(cars))\n#> [1] 100\ndim(cars)\n#> [1] 50  2\nis.matrix(cars)\n#> [1] FALSE\nis.data.frame(cars)\n#> [1] TRUE\nis.list(cars)\n#> [1] TRUE\nmode(cars)\n#> [1] \"list\"\nclass(cars)\n#> [1] \"data.frame\"\nlevels(cars)\n#> NULL"},{"path":"objects.html","id":"exercise-3","chapter":"2 Managing objects","heading":"2.10 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"objects.html","id":"exercise-4","chapter":"2 Managing objects","heading":"2.10.1 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.","code":""},{"path":"objects.html","id":"exercise-5","chapter":"2 Managing objects","heading":"2.10.2 Exercise","text":"Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).","code":""},{"path":"objects.html","id":"exercise-6","chapter":"2 Managing objects","heading":"2.10.3 Exercise","text":"Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.","code":""},{"path":"objects.html","id":"exercise-7","chapter":"2 Managing objects","heading":"2.10.4 Exercise","text":"Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"operators.html","id":"operators","chapter":"3 R operators and functions","heading":"3 R operators and functions","text":"completing Chapters 1 2 assumed following now familiar:communicate R;manage workspaces;perform simple tasks using R.chapter take closer look behaviour commonR operatorsR functions.","code":""},{"path":"operators.html","id":"arithmetic-operators","chapter":"3 R operators and functions","heading":"3.1 Arithmetic operators","text":"Study use operators Table 3.1.Table 3.1:  Arithmetic operators.Note arithmetic operators also functions. follows studying following examples:Rules operator expressions vector arguments.Study results following R instructions.Explain following instructions output R:examples illustrated R uses vectorized arithmetic .e. operates vectors wholes. Sometimes recycling principle applied without warning. good R programming habit make use vectorizing calculations possible. effect recycling principle must kept mind since might lead unwanted results.Missing values, infinity “number”.missing value R denoted NA. result computation involving NAs always NA e.g.result computation represented number e.g. 0/0 denoted NaN.\nNote: computational results differently reported R corresponding algebraic equivalents, 5/0 R given Inf algebraically undefined.Scientific notationR uses decimal notation well scientific notation arithmetic calculations. Scientific notation confused \\(exp()\\).numbers represented computer’s memory? implications ?Computers use /(1/0) switches encoding information. single switch called bit group eight bits called byte. single integer represented exactly computer fixed number bytes .e. 32 64 bits. several schemes according integers represented bits computer. representation computer takes place level R control R stores information computing environment object .Machine. element .Machine$integer.max returns largest integer can represented computer R running e.g.Although method representing integers strings bits provides efficient way storing integers computer R usually treats integers similar real numbers using floating point representation. binary floating point notation number x written sequence zeros ones (mantissa) times two exponent say \\(m\\): \\(x=b_0 b_1 b_2…×2^m\\) \\(b_0=1\\) except \\(x=0\\).practice limited number \\(b\\)’s available exponent also limited therefore, general, real numbers can represented exactly computer – can approximated. smallest number \\(x\\) \\(1 + x\\) can distinguished \\(1\\) computer called machine epsilon. R can obtained .Machine$double.eps e.g.Although floating point representation allows computation small (magnitude) large numbers limitations can lead underflow overflow can disastrous consequences practice. Writing good code R must take seriously account.","code":"\n3+7\n#> [1] 10\n\"+\"(3,7)\n#> [1] 10\n17 %% 3\n#> [1] 2\n\"%%\"(17,3)\n#> [1] 2\ncars [,2] * 12 * 25.4 / 1000\n#>  [1]  0.6096  3.0480  1.2192  6.7056  4.8768  3.0480  5.4864\n#>  [8]  7.9248 10.3632  5.1816  8.5344  4.2672  6.0960  7.3152\n#> [15]  8.5344  7.9248 10.3632 10.3632 14.0208  7.9248 10.9728\n#> [22] 18.2880 24.3840  6.0960  7.9248 16.4592  9.7536 12.1920\n#> [29]  9.7536 12.1920 15.2400 12.8016 17.0688 23.1648 25.6032\n#> [36] 10.9728 14.0208 20.7264  9.7536 14.6304 15.8496 17.0688\n#> [43] 19.5072 20.1168 16.4592 21.3360 28.0416 28.3464 36.5760\n#> [50] 25.9080\n7%/%3\n#> [1] 2\n7%%3\n#> [1] 1\nmatrix(1,nrow=4,ncol=4) * matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    3    3    3    3\n#> [2,]    3    3    3    3\n#> [3,]    3    3    3    3\n#> [4,]    3    3    3    3\nmatrix(1,nrow=4,ncol=4) %*% matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   12   12   12\n#> [2,]   12   12   12   12\n#> [3,]   12   12   12   12\n#> [4,]   12   12   12   12\n1:12 + 1:3\n#>  [1]  2  4  6  5  7  9  8 10 12 11 13 15\n1:10 + 1:2\n#>  [1]  2  4  4  6  6  8  8 10 10 12\n1:10 + 1:3\n#> Warning in 1:10 + 1:3: longer object length is not a\n#> multiple of shorter object length\n#>  [1]  2  4  6  5  7  9  8 10 12 11\nmean(c(1,3,NA,12,5))\n#> [1] NA\n0/0\n#> [1] NaN\n5/0\n#> [1] Inf\n-5/0\n#> [1] -Inf\n5/(-0)\n#> [1] -Inf\n60000000\n#> [1] 6e+07\n1/6000000\n#> [1] 1.666667e-07\nexp(15)\n#> [1] 3269017\nexp(-15)\n#> [1] 3.059023e-07\n.Machine$integer.max\n#> [1] 2147483647\n.Machine$double.eps\n#> [1] 2.220446e-16"},{"path":"operators.html","id":"logical-operators","chapter":"3 R operators and functions","heading":"3.2 Logical operators","text":"Logical operators result TRUE, FALSE NA. Study use logical operators Table 3.2. Warning: perfectly legitimate writeit incorrect specifyThe correct code latter case isWhat consequences code? Also take note functions () (). two functions useful combining logical objects. Give necessary instructions carry following tasks:Check states state.x77 data set populations illiteracy rate larger \\(1.6\\) Murder rate \\(10.0\\).Check least one state income greater \\(\\$5000\\) life expectancy less \\(70.0\\) years.Check states income \\(\\$5000\\) illiteracy \\(2.0\\).meant control logical operator?Table 3.2:  Logical operators.Carry instructions:Comment .result sum(c(TRUE, !FALSE, FALSE, TRUE, TRUE))?result sum(c(TRUE, !FALSE, FALSE, NA, TRUE)) ?Explain","code":"\nx[x == -1] <- 0\nx[x == 1] <- 0 x[x == NA] <- 0\nx[x = = NaN] <- 0 \nx[is.na(x)] <- 0\nx[is.nan(x)] <- 0\nmata <- matrix(1:4, ncol = 2)\nmatb <- matrix(c(10, 20, 30, 40), ncol = 2)\nmata\n#>      [,1] [,2]\n#> [1,]    1    3\n#> [2,]    2    4\nmatb\n#>      [,1] [,2]\n#> [1,]   10   30\n#> [2,]   20   40\nmata>1 & matb>1\n#>       [,1] [,2]\n#> [1,] FALSE TRUE\n#> [2,]  TRUE TRUE\nmata>1 | matb>1\n#>      [,1] [,2]\n#> [1,] TRUE TRUE\n#> [2,] TRUE TRUE\nmata>1 && matb>1\n#> Error in mata > 1 && matb > 1: 'length = 4' in coercion to 'logical(1)'\nmata>1 || matb>1\n#> Error in mata > 1 || matb > 1: 'length = 4' in coercion to 'logical(1)'"},{"path":"operators.html","id":"the-operators-----and","chapter":"3 R operators and functions","heading":"3.3 The operators <-, <<- and ~","text":"considering use operators answer following:happen object aa working directory within function following assignment made aa <- 20?happen object aa working directory within function following assignment made aa <- 20?Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.tilde operator used modelling functions, e.g. lm (length ~ age).tilde operator used modelling functions, e.g. lm (length ~ age).","code":""},{"path":"operators.html","id":"operator-precedence","chapter":"3 R operators and functions","heading":"3.4 Operator precedence","text":"Study precedence rules summarized Table 3.4.1. rules followed shown Table 3.3 top bottom left right. Note use ofparentheses ( ) function arguments changing precedence,braces { } demarcating blocks instructionsand brackets [ ] subscripting.correct way extracting fifth element sequence like 1:20 isTable 3.3:  Precedence rules.Explain result following R instructions:","code":"\n(1:20)[5]\n#> [1] 5\n20 / 4 * 12 ^2 - 6 + 1\n#> [1] 715\n(20 / 4) * (12 ^2) + (-6 + 14)\n#> [1] 728\n20 / 4 * 12 ^(2 - 6 + 14)\n#> [1] 309586821120\n20 / 4 * (12 ^2 - 6 + 14)\n#> [1] 760"},{"path":"operators.html","id":"some-mathematical-functions","chapter":"3 R operators and functions","heading":"3.5 Some mathematical functions","text":"","code":""},{"path":"operators.html","id":"general-mathematical-functions","chapter":"3 R operators and functions","heading":"3.5.1 General mathematical functions","text":"abs(), exp(), log(x, base = exp(1)), log10(), gamma(), sign(), sqrt()","code":""},{"path":"operators.html","id":"trigonometric-functions","chapter":"3 R operators and functions","heading":"3.5.2 Trigonometric functions","text":"See Table 3.4.Table 3.4:  Trigonometric functions.","code":""},{"path":"operators.html","id":"complex-numbers","chapter":"3 R operators and functions","heading":"3.5.3 Complex numbers","text":"Arg(), Conj(), Mod(), Re(), Im()","code":""},{"path":"operators.html","id":"functions-for-rounding-and-truncating","chapter":"3 R operators and functions","heading":"3.5.4 Functions for rounding and truncating","text":"round(), ceiling(), floor(), trunc()Study help files functions. Check arguments.","code":""},{"path":"operators.html","id":"functions-for-matrices","chapter":"3 R operators and functions","heading":"3.5.5 Functions for matrices","text":"Study Table 3.5 detail.Two functions play important role matrix calculations functions rbind() cbind() concatenating matrices row-wise column-wise. Also revise functions matrix(), dim(), dimnames(), colnames(), rownames() well scan() read.table().Table 3.5:  Functions matrices.function chol() performs Cholesky decomposition square, symmetric, positive definite matrix \\(\\mathbf{}=\\mathbf{U}'\\mathbf{U}\\) \\(\\mathbf{U}\\) upper triangular matrix.function chol() performs Cholesky decomposition square, symmetric, positive definite matrix \\(\\mathbf{}=\\mathbf{U}'\\mathbf{U}\\) \\(\\mathbf{U}\\) upper triangular matrix.function crossprod (, B) returns matrix \\(\\mathbf{'B}\\).function crossprod (, B) returns matrix \\(\\mathbf{'B}\\).function diag(arg) performs various actions depending argument: arg positive integer diag(arg) returns identity matrix given size; arg vector diag(arg) returns diagonal matrix diagonal elements respective elements given vector; arg matrix diag(arg) returns vector containing diagonal elements given matrix.function diag(arg) performs various actions depending argument: arg positive integer diag(arg) returns identity matrix given size; arg vector diag(arg) returns diagonal matrix diagonal elements respective elements given vector; arg matrix diag(arg) returns vector containing diagonal elements given matrix.difference diag() diag(diag()) square matrix?difference diag() diag(diag()) square matrix?function eigen() operates square matrix returns list named elements values vectors containing respectively, eigenvalues eigenvectors. Study help file eigen() carefully.function eigen() operates square matrix returns list named elements values vectors containing respectively, eigenvalues eigenvectors. Study help file eigen() carefully.function kronecker() returns Kronecker product \\(\\mathbf{} \\otimes \\mathbf{B}\\) matrices \\(\\mathbf{}\\) \\(\\mathbf{B}\\).function kronecker() returns Kronecker product \\(\\mathbf{} \\otimes \\mathbf{B}\\) matrices \\(\\mathbf{}\\) \\(\\mathbf{B}\\).function outer (x, y, f) operates two vectors \\(x:n\\times 1\\) \\(y:p\\times 1\\) return matrix size \\(n \\times p\\) \\(ij\\)th element result applying function f x[] y[j]. default f *.function outer (x, y, f) operates two vectors \\(x:n\\times 1\\) \\(y:p\\times 1\\) return matrix size \\(n \\times p\\) \\(ij\\)th element result applying function f x[] y[j]. default f *.function scale() three arguments: matrix first argument; second argument center third argument scale. center = FALSE, centring columns matrix argument performed, set TRUE (default), mean value column subtracted respective columns, given vector values values subtracted respective columns. scale = FALSE, scaling columns matrix argument performed, set TRUE (default) column divided standard deviation, given vector values column divided corresponding value.function scale() three arguments: matrix first argument; second argument center third argument scale. center = FALSE, centring columns matrix argument performed, set TRUE (default), mean value column subtracted respective columns, given vector values values subtracted respective columns. scale = FALSE, scaling columns matrix argument performed, set TRUE (default) column divided standard deviation, given vector values column divided corresponding value.function solve (, b) used solving equation \\(\\mathbf{Ax=b}\\) \\(\\mathbf{x}\\), \\(\\mathbf{b}\\) can either vector matrix \\(\\mathbf{}\\) square matrix. argument b missing taken identity matrix inverse argument returned.function solve (, b) used solving equation \\(\\mathbf{Ax=b}\\) \\(\\mathbf{x}\\), \\(\\mathbf{b}\\) can either vector matrix \\(\\mathbf{}\\) square matrix. argument b missing taken identity matrix inverse argument returned.function svd() returns singular value decomposition matrix argument \\(\\mathbf{=UDV}'\\). returns list three components: u orthogonal orthonormal matrix \\(\\mathbf{U}\\); d vector containing ordered singular values rectangular matrix \\(\\mathbf{}\\); v orthogonal orthonormal matrix $.function svd() returns singular value decomposition matrix argument \\(\\mathbf{=UDV}'\\). returns list three components: u orthogonal orthonormal matrix \\(\\mathbf{U}\\); d vector containing ordered singular values rectangular matrix \\(\\mathbf{}\\); v orthogonal orthonormal matrix $.function qr() performs QR decomposition arbitrary matrix \\(\\mathbf{M=QR}\\) \\(\\mathbf{Q}\\) orthogonal matrix \\(\\mathbf{R}\\) upper triangular matrix. Study help file qr() full details usages function. Note matrices \\(\\mathbf{Q}\\) \\(\\mathbf{R}\\) can obtained directly calling qr.Q(qr()) qr.R(qr()), respectively.function qr() performs QR decomposition arbitrary matrix \\(\\mathbf{M=QR}\\) \\(\\mathbf{Q}\\) orthogonal matrix \\(\\mathbf{R}\\) upper triangular matrix. Study help file qr() full details usages function. Note matrices \\(\\mathbf{Q}\\) \\(\\mathbf{R}\\) can obtained directly calling qr.Q(qr()) qr.R(qr()), respectively.meaning following instructions?rbind(,b); rbind(1,x); rbind(= 1:5,b = 10:14,c=20:24); cbind( = 1:5, b=10:14, c=20:24)Write function calculate determinant square matrix. Name function det.() order distinguish built R function det().Write function calculate determinant square matrix. Name function det.() order distinguish built R function det().user satisfied function, often necessary available R projects. useful assign functions data base folder. Use function assign (x, object, pos = , envir = ) store function det.() R functions folder. argument x assign() character string assigning name object. function remove (list objects names, pos = , envir = ) can used remove objects database. Hint: First create file use attach() add R search path.user satisfied function, often necessary available R projects. useful assign functions data base folder. Use function assign (x, object, pos = , envir = ) store function det.() R functions folder. argument x assign() character string assigning name object. function remove (list objects names, pos = , envir = ) can used remove objects database. Hint: First create file use attach() add R search path.Study save() works.Study attach() works.Study assign() works.Explain use argument list=objects(2). summarize: construction > NAME <- object simple way assign object name. form assignment always takes place global environment (workspace). Assignment can also performed using functions save() assign() illustrated . latter form assignment complicated assignment restricted global environment.result function gamma(x) \\((x-1)!\\) \\(x\\) non-negative whole number. Now write function fact() calculate \\(x!\\). function must make provision \\(0!\\) well negative number fraction read mistake. Hint: First study usage statement requesting help ?Control, recall Table 1.1. Store function folder R functions. go make fact() det.() available R project?result function gamma(x) \\((x-1)!\\) \\(x\\) non-negative whole number. Now write function fact() calculate \\(x!\\). function must make provision \\(0!\\) well negative number fraction read mistake. Hint: First study usage statement requesting help ?Control, recall Table 1.1. Store function folder R functions. go make fact() det.() available R project?function lgamma(x) returns logarithms \\(\\Gamma(x)\\). Write function calculate value \\(f(n) = \\frac{\\Gamma(\\frac{n-1}{2})}{\\Gamma(\\frac{1}{2})\\Gamma(\\frac{n-2}{2})}\\). Calculate value \\(f(n)\\) \\(n = -10, 10, 100, 500, 1000\\).function lgamma(x) returns logarithms \\(\\Gamma(x)\\). Write function calculate value \\(f(n) = \\frac{\\Gamma(\\frac{n-1}{2})}{\\Gamma(\\frac{1}{2})\\Gamma(\\frac{n-2}{2})}\\). Calculate value \\(f(n)\\) \\(n = -10, 10, 100, 500, 1000\\).","code":"save(file= \" C:\\\\MyFunctions\").  attach(\"C:\\\\MyFunctions\", pos=2). assign(\"det.own\", det.own, pos=2). \nsave(list=objects(2), file = \"C:\\\\MyFunctions\")"},{"path":"operators.html","id":"character","chapter":"3 R operators and functions","heading":"3.5.6 Character vectors","text":"","code":""},{"path":"graphics.html","id":"graphics","chapter":"4 Introducing traditional R graphics","heading":"4 Introducing traditional R graphics","text":"","code":""},{"path":"subscripting.html","id":"subscripting","chapter":"5 Subscripting","heading":"5 Subscripting","text":"","code":""},{"path":"subscripting.html","id":"vectorSubscripting","chapter":"5 Subscripting","heading":"5.1 Subscripting with vectors","text":"","code":""},{"path":"revision.html","id":"revision","chapter":"6 Revision tasks","heading":"6 Revision tasks","text":"","code":""},{"path":"functions.html","id":"functions","chapter":"7 Writing functions in R","heading":"7 Writing functions in R","text":"","code":""},{"path":"mapping.html","id":"mapping","chapter":"8 Vectorized programming and mapping functions","heading":"8 Vectorized programming and mapping functions","text":"","code":""},{"path":"data.html","id":"data","chapter":"9 Reading data files into R, formatiing and printing","heading":"9 Reading data files into R, formatiing and printing","text":"","code":""},{"path":"graphics2.html","id":"graphics2","chapter":"10 R graphics: Round II","heading":"10 R graphics: Round II","text":"","code":""},{"path":"modelling.html","id":"modelling","chapter":"11 Statistical modelling with R","heading":"11 Statistical modelling with R","text":"","code":""},{"path":"optimisation.html","id":"optimisation","chapter":"12 Introduction to Optimisation","heading":"12 Introduction to Optimisation","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
=======
[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"book updated version (le Roux & Lubbe, 2021).","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2013","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2013)","text":"R system open-source software project analyzing data constructing graphics. provides general computer language performing tasks like organizing data, statistical analyses, simulation studies, model fitting, building complex graphics many .Central R system high-level R computer language. roots date back birth computer language S May 5, 1976 Bell Labs, Murray Hill, New Jersey (Chambers, 2008). early days S underwent several revisions extensions mainly implementation UNIX operating system. Eventually enhanced version S licensed name S-PLUS became available Windows operating system name S-PLUS Windows. earlier versions R adhered principles functional programming release version S3 middle eighties building blocks dynamically generated, self-describing objects. publication New S Language (Becker, Chambers & Wilks, 1988) provides detailed description S3. next major development S release Statistical Models S (Chambers & Hastie, 1993) involved merging functional style S object-oriented programming concepts classes methods. However, S3 limited formal support classes methods. introduction S4 objects (Chambers, 1998) introduced new class method system retains S3 compatibility. meantime several versions S-PLUS based upon S3 first later S4 released commercial market.R language introduced paper published Ross Ihaka Robert Gentleman Auckland, New Zealand 1996 (Ihaka & Gentleman, 1996). proposal large extent compatible S included features Lisp/Scheme family languages. important aspect R availability open-source system.R S-PLUS can considered clones underlying S. means able program one can quite easily program warned: also fundamental differences two systems.first two decades twenty-first century interest R exceeded possible expectations. Apart well-maintained core system new releases every months currently literally thousands researchers contributing add-packages cutting-edge developments statistics data analysis.book tutorial twofold aim; learning basics R system program efficiently R. result introductory course S-PLUS taught University Stellenbosch since 1995. initial course based book Introduction S S-Plus (Spector, 1994). Since 2002 increasingly emphasis put R extent currently exclusively devoted R. change necessitated preparation class notes ten-day (eight hours day) tutorial course R. result Step--Step R Tutorial: introduction R applications programming.","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2021","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2021)","text":"Since first publication Step--Step R Tutorial: introduction R applications programming R system experienced dramatic evolutionary process. edition still maintains twofold aim first edition adapting contents needs modernization happening within R system . Deprecated outdated material omitted new developments included. follows brief description changes.Chapter 1 contains new section explaining use R Markdown creating PDF HTML documents R output. Chapters 2, 3, 4 5 see minor changes. Chapter 6 changes made data sets used well exercises borrowed later chapters first edition. Chapter 7, ‘Writing R Functions’, notable reference made Rcpp package inclusion C++ code R. package allows compiled code included considerably easier robust. Vectorized programming mapping functions enhanced Chapter 8 discussion function mapply(). major addition discussion section 8.14 writing user-friendly applications using package shiny. replaces usage function menu(). exercise create simple shiny App also included.first part Chapter 9, ‘Reading data files R, formatting printing’, methods reading Microsoft Excel files updated; functions like readRDS() writeRDS() transporting R objects introduced; clipr package discussed. major addition chapter section devoted functionality provided tidyverse collection R packages data manipulation exploration; tibbles discussed detail well pipe operator %>%, tidy data illustrated data manipulation functions dplyr illustrated detail.Chapter 10, ‘R graphics: Round II’, considerably extended inclusion section specify colours; rewritten section quantile plots inclusion material previously Chapter 11. now section density estimation, includes discussion density histograms average shifted histograms. new section 10.14 package ggplot2 discussed many examples capabilities.chapter ‘Modelling R’ (Chapter 11) extensive discussion Analysis Variance Covariance (Chapter 12) previous edition rewritten completely consolidated new Chapter 11. final chapter now Chapter 12, ‘Introduction Optimization’. Apart new data set material similar Chapter 13 previous edition.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introducing the R System","heading":"1 Introducing the R System","text":"","code":""},{"path":"intro.html","id":"introduction","chapter":"1 Introducing the R System","heading":"1.1 Introduction","text":"chapter introduces R system new R user. Windows operating system emphasized material covered also applies operating systems allowing requirements particular operating system use. Users experience R quickly glance chapter making sure mastered topics covered proceeding main tutorial starting Chapter 2.computer age statistics become inseparable able write computer programs. Therefore, let us start reminder Fundamental Goal S:Conversion idea useful softwareThe challenge pursue goal keeping mind Mission R (Chambers, 2008):… enable best thorough exploration data possibleand Prime Directive (Chambers, 2008):… places obligation creators software program way computations can understood trusted.","code":""},{"path":"intro.html","id":"downloading-the-r-system","chapter":"1 Introducing the R System","heading":"1.2 Downloading the R system","text":"Website downloading R.download R computer: Navigate …/bin/windows/base save file R-x.y.z.-win.exe computer. Click file start installation procedure select defaults unless good reason . select ‘Create desktop icon’ installation phase, icon similar one appear desktop. Alternatively, can find R Applications.core R system installed includes several packages. Apart installed packages several thousands dedicated contributed packages available downloaded users need .","code":""},{"path":"intro.html","id":"QuickSample","chapter":"1 Introducing the R System","heading":"1.3 A quick sample R session","text":"Click R icon created desktop open Commands Window Console. Notice R prompt > waiting instruction user.R prompt > enter 5 – 8. follow following convention write instructions:Repeat () enter 5 – see happens:+ secondary R prompt. indicates instruction unfinished. Either respond completing instruction press Esc key start primary prompt.EnterThis instruction creates R object name (label) xx containing vector\n(1, 2, 3, 4, 5, 6, 7, 8, 10).EnterThis instruction creates R object name yy containing random sample 20 values normal distribution mean 50 standard deviation 15.EnterThe example shows name R object entered prompt, R respond displaying contents object.Obtain representation contents object yy created (d).Obtain representation contents object yy created (d).program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.\ncan R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.can R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:Note prompt appear followed mean object yy.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects can removed following instruction: rm(name1, name2, ... ).Objects can removed following instruction: rm(name1, name2, ... ).Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:instructions resulted opening graph window containing required histogram user can switch console graph window back console.R session can terminated closing window entering q() R prompt. Either way user prompted save workspace. user chooses save, objects created session lost.","code":"\n5 - 8\n#> [1] -3> 5 -\n> +\n> +\nxx <- 1:10\nyy <- rnorm(n = 20, mean = 50, sd = 15) \nxx\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nmean(yy) \n#> [1] 43.34786\ngr.data <- rnorm(1000) \nhist(gr.data)"},{"path":"intro.html","id":"working-with-rstudio","chapter":"1 Introducing the R System","heading":"1.4 Working with RStudio","text":"Many users R prefer working RStudio. RStudio free open source integrated development environment R works standard version R available CRAN. can downloaded RStudio home page run desktop (Windows, Mac Linux). Full details functionality RStudio available home page. , brief introduction RStudio given.RStudio installed computer following icon created desktop:Clicking icon open RStudio development environment shown Figure 1.1. order open R workspace RStudio drag corresponding .RData file RStudio icon drop soon ‘Open RStudio’ becomes visible.\nFigure 1.1: RStudio development environment R.\nbottom left-hand panel familiar R console.bottom right-hand panel used :\n() listing files folder workspace (.RData) active project kept\n(b) listing installed packages available attached search path well menus installing updating packages\n(c) graph windows ()\n(d) Help facilities.top left-hand panel can used creating managing script files (see 1.9.1) top right-hand panel provides information objects current folder well history previous commands given console.","code":""},{"path":"intro.html","id":"r-an-interpretive-computer-language","chapter":"1 Introducing the R System","heading":"1.5 R: an interpretive computer language","text":"Essentially, interpretive language instructions given one one. instruction evaluated interpreted turn internal program called interpreter evaluator immediate action taken. example, instruction given 1.3() evaluated R evaluator resulting answer –3 returned. hand, 1.3(b) evaluator found instruction incomplete therefore asked information.advantage interpretive language intermediate results can obtained quickly without first wait complete program finish case compiler language. latter case complete program translated (compiled) program called compiler. compiled program can converted standalone application can called programs perform complete task. general compiler languages handle computer memory relatively efficiently calculations executed speedily.\nCommunication R evaluator takes place set instructions called escape sequences. escape sequences take form backslash preceding character. Examples escape sequences :\\n new line\\r carriage return\\t go next tab stop\\b backspace\\bell\\f form feed\\v vertical tabA consequence role backslash R single backslash filename properly recognized. Therefore, referring R following file path “c:\\Documents\\myFile.txt” backslashes must entered double backslashes .e. \"c:\\\\Documents\\\\myFile.txt\" \"c:/Documents/myFile.txt\".","code":""},{"path":"intro.html","id":"exercise","chapter":"1 Introducing the R System","heading":"1.5.1 Exercise","text":"cat() function can used write text message console. Initialize new R session investigate results following R instructions:purpose semi-colon line ?distinguish two soundings bell? Try following:now distinguish two soundings bell?purpose Sys.sleep() instruction?","code":"\ncat(\"aaa bbb\")\ncat(\"aaa bbb \\n\")\ncat(\"aaa \\n bbb \\n\")\ncat(\"aaa \\nbbb \\n\")\ncat(\"aaa \\t\\t bbb \\n\") \ncat(\"aaa\\b\\b\\bbbb \\n\") \ncat(\"aaa \\n\\a bbb \\a\\n\") \ncat(\"1\\a\\n\"); cat(\"2\\a\\n\")\ncat(\"1\\a\\n\"); Sys.sleep(2); cat(\"2\\a\\n\") "},{"path":"intro.html","id":"exercise-1","chapter":"1 Introducing the R System","heading":"1.5.2 Exercise","text":"Write R code achieve following output:name :Bell sounds .name appears new line.Two distinct sounds bell heard andThank visible new line.cursor appears new line.","code":""},{"path":"intro.html","id":"accessing-the-help-functionality","chapter":"1 Introducing the R System","heading":"1.6 Accessing the Help functionality","text":"Useto obtain help usage R function mean().Find difference instructionsandWhat help available via instructionUseto find obtain help using R function help.search(xx). Note: hep operator reserved word quotes needed, e.g.butor","code":"\n?mean\n?mean\n??mean\nhelp.start()\n?help.search()\n?matrix\n?\"?\"\n?\"for\""},{"path":"intro.html","id":"MoreBasics","chapter":"1 Introducing the R System","heading":"1.7 More R basics","text":"R interactive language allows fast acquisition results.R interactive language allows fast acquisition results.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R objects studied detail later chapters. important now, following:R objects studied detail later chapters. important now, following:Everything R object.different types objects e.g. function objects, data objects, graphics objects, character objects, numeric objects.Usually objects stored current folder called Global environment; recognized R name .GlobalEnv available file system name .RData.Objects created console assignment instructionorIn R names case sensitive .e. peter Peter two different objects.Objects created assignment R session stored permanently Global environment (working directory) unless user chooses save terminating R session.Care must exercised creating new object assignment: object name .object already exists Global environment new object created assigning name .object old .object -written replaced new object without warning.Remember way R evaluator operates: object name given R prompt R evaluator responds displaying content object. Review difference instructionsandThe symbol # marks comment. Everything following # line ignored R evaluator. Check example result instructionUsage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.Usage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.symbol -> assigns object left-hand side name (label) right-hand side.symbol -> assigns object left-hand side name (label) right-hand side.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.help (?) facility: Table 1.1 contains details help available special keywords.help (?) facility: Table 1.1 contains details help available special keywords.Table 1.1:  useful keywords available help queries.","code":"\nname <- object\nobject <- name\nq\nq()\n5+8 # +12\n#> [1] 13"},{"path":"intro.html","id":"regular-expressions-in-r-the-basics","chapter":"1 Introducing the R System","heading":"1.8 Regular expressions in R: the basics","text":"follows 1.7(d) care must taken objects assigned names. Furthermore, Global environment R database may easily contain hundreds objects. Therefore, frequent task search patterns names objects e.g. searching object names starting “Figure” ending “.dat”. R function objects() ls() arguments pos pattern specifying position database search pattern characters appearing name (string), respectively. pattern argument can given regular expression. Regular expressions provide method expressing patterns character values used perform various tasks R. considering task extracting certain specified objects database using pattern argument objects() ls().syntax regular expressions follows different rules syntax ordinary R instructions. Moreover syntax differs depending particular implementation program uses. default, R uses set regular expressions similar used UNIX utilities, function arguments available changing default e.g. setting argument perl = TRUE.Regular expressions consist three components: single characters, character classes modifiers operating single characters character classes.Character classes formed using square brackets surrounding set characters matched e.g. [abc123], [-z], [-zA-Z], [0-9a-z]. Note usage dash indicate range values.modifiers operating characters character classes summarized Table 1.2.Table 1.2:  Modifiers regular expressions.role modifiers forming character classes following characters must preceded backslash literal meaning needed:Note R means whenever one characters needs escaped regular expression must preceded double backslashes. Table 1.3 contains examples regular expressions.Table 1.3:  Examples regular expressions.","code":"[  ]  {  }  (  )  ^  $  .  |  *  +  \\"},{"path":"intro.html","id":"exercise-2","chapter":"1 Introducing the R System","heading":"1.8.1 Exercise","text":"Initialize R sessionAttach MASS package second (default) position search path issuing commandGet listing objects package MASS requestingExplain difference objects(pos=2, pat=\".\") objects(pos=2, patt=\"\\\\.\").Obtain listing objects names starting three letters followed digit.Obtain listing objects names ending three letters followed digit.Obtain listing objects names ending period followed exactly three four letters.","code":"\nlibrary(MASS)\nobjects(pos=2)"},{"path":"intro.html","id":"FunctionIntro","chapter":"1 Introducing the R System","heading":"1.9 From single instructions to sets of instructions: introducing R functions","text":"Consider following problem: R data set sleep contains extra hours sleep 20 patients drug treatment. Suppose data set can considered sample normal population. 95% confidence interval required mean extra hours sleep. known confidence interval given \\(\\left[ \\mathbf{\\bar{x}}- \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025}; \\mathbf{\\bar{x}}+ \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025} \\right]\\). problem can solved entering following instructions one one:situations like , problem can addressed using script file writing function. going introduce two methods writing functions R:using script file andusing function fix().","code":"\nsleep.data <- sleep[ ,1]   \nsleep.mean <- mean(sleep.data)   \nsleep.sd <- sd(sleep.data)    \nt.perc <- qt(0.975,19) \nleft.boundary <- sleep.mean - (sleep.sd/sqrt(length(sleep.data)))*t.perc \nright.boundary <- sleep.mean + (sleep.sd/sqrt(length(sleep.data)))*t.perc\ncat (\"[\", left.boundary, \";\", right.boundary, \"]\\n\")\n#> [ 0.5955845 ; 2.484416 ]"},{"path":"intro.html","id":"script","chapter":"1 Introducing the R System","heading":"1.9.1 Writing an R function using a script file","text":"R top menu select File; New script. script window open simultaneous change menu bar.Type instructions script window.Select typed text run script clicking run icon (Ctrl+R).Note shown R console window.Script files ordinary text files. can saved, edited opened using text editor.convention R script files extension xxxx.r.Next, change spelling last two lines right.boundary Right.boundary. Select text run script. Check output appearing console.Script windows can also used creating R function.Create R function changing text shown .Select text notice happens R commands window (console).Give instruction objects() R prompt. happened?can now run function commands window (console) typing:want create run function conf.int script window add instruction conf.func (x = sleep[,1]) last line script window. Now, select line run . Check R console.happen syntax error made script window? Change code script file follows, deliberately deleting last closing parenthesis last line function.Select final line run . Check R console. problem, function executed correctly. code conf.int script file changed, updated object created running console.Select code script run . Check R console. Discuss.","code":"\nconf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)  \n}\nconf.int (x = sleep[,1])\n#> $lower\n#> [1] 0.5955845\n#> \n#> $upper\n#> [1] 2.484416conf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary\n}\nconf.int (x = sleep[,1])"},{"path":"intro.html","id":"writing-an-r-function-using-fix","chapter":"1 Introducing the R System","heading":"1.9.2 Writing an R function using fix()","text":"using fix() built-R text editor can used using script files windows environment notepad preferably notepad++ Tinn-R preferred.following instruction necessary changing default editor used fix():orEnter fix (.func) R prompt. text editor open. Type instructions shown .Close window. Check happens R console.can now run function commands window (console) similar 1.9.1(l), changing name function conf.int .func.happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?Carefully study message R console syntax error occurred function created fix():Carefully study message R console syntax error occurred function created fix():following correct way respond message R evaluator:simply use fix(.func) point, R editor revert version function previous edit.WARNINGBefore writing function solving problem: make sure problem understood exactly; make 100% sure relevant statistical theory understood correctly. Failure careless dangerous!","code":"\noptions(editor = \"notepad\")\noptions(editor = \"full path to the relevant exe file\")function (x = sleep[,1])\n{\n  x.mean <- mean(x)`\n  x.sd <- sd(x)\n  t.perc <- qt(0.975,19)\n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc\n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)\n}> Error in edit(name, file, title, editor) :\n    unexpected 'yyy' occurred on line xx\n    use a command like\n    x <- edit()\n    to recover\nmy.func <- edit()"},{"path":"intro.html","id":"r-projects","chapter":"1 Introducing the R System","heading":"1.10 R Projects","text":"different windows R Data window, Script window, Graph window Menus Dialog windows. current workspace R .GlobalEnv. function getwd() used obtain path current folder’s .Rdata .Rhistory.Note: order see files .Rdata .Rhistory displayed , may necessary turn option “Hide extensions known file types” Windows Explorer.important make provision different workspaces associated different projects. R, different .Rdata files different folders separate different projects. however much gain using Projects RStudio.","code":""},{"path":"intro.html","id":"creating-a-project-in-rstudio","chapter":"1 Introducing the R System","heading":"1.10.1 Creating a project in RStudio","text":"top menu, select File, New Project. Follow prompts create new project, either existing folder creating new folder project, say MyProject.Navigate folder MyProject Windows Explorer.Notice file MyProject.Rproj created folder.double-clicking file open project RStudio. advantages opening project way :workspace file MyProject.Rdata automatically loadedby placing related files like data set folder MyProject subfolder, say MyProject\\data means code use relative folder references, .e. refer MyProject\\mydata.xlsx MyProject\\data\\mydata.xlsx instead something like c:\\users\\myname\\Documents\\MyProject\\data\\mydata.xlsx.major advantage relative references specific computer makes porting devices possiblesharing project collaborator simply entail copying entire contents MyProject folder.","code":""},{"path":"intro.html","id":"a-note-on-computations-by-a-computer","chapter":"1 Introducing the R System","heading":"1.11 A note on computations by a computer","text":"writing R functions important keep mind way computations performed computer always according rules algebra. Two important occurrences given .mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.Open R session issue commandfor details numerical environment computer.","code":"\n.Machine"},{"path":"intro.html","id":"built-in-data-sets-in-r","chapter":"1 Introducing the R System","heading":"1.12 Built-in data sets in R","text":"R contains several built-data sets collected package datasets. package automatically attached search path. Type ?datasets R prompt details. Apart data sets several data sets packages also used book.","code":""},{"path":"intro.html","id":"the-use-of-.first-and-.last","chapter":"1 Introducing the R System","heading":"1.13 The use of .First() and .Last()","text":"function .First() executed beginning every R session. works R RStudio.Instead specifyeach time R session initialized, create following function save .Rdata exiting R.ensures Notepad text editor subsequent session.Similar .First() function .Last() can created execution end R session.","code":"\noptions(editor = \"notepad\")\n.First <- function() { options(editor = \"notepad\") }"},{"path":"intro.html","id":"security-an-example-of-the-usage-of-.first","chapter":"1 Introducing the R System","heading":"1.13.1 Security: an example of the usage of .First()","text":".First() facility can used prevent access R workspace setting password protection. can done follows:Create new workspace running example security. workspace create following R functionNow create function:Terminate R session open .Discuss construction usage functions.Can break security?Can make changes security make safe?","code":"\npassword <- function()        # Note the structure of a function\n{ cat(\"Password? \\n\")\n  password <- readline()      # What is the usage of readline()? \n  if (password != \"PASSWORD\") \n    q(save=\"no\")              # The meaning of !=  is \"not equal to\"\n  else (cat(\"You can proceed \\n\"))\n}               \n.First <- function()\n{   #  What must you be careful of?\n   password()\n}"},{"path":"intro.html","id":"options","chapter":"1 Introducing the R System","heading":"1.14 Options","text":"Study result instruction > options() R.","code":""},{"path":"intro.html","id":"creating-pdf-and-html-documents-from-r-output-r-markdown","chapter":"1 Introducing the R System","heading":"1.15 Creating PDF and HTML documents from R output: R Markdown","text":"R package knitr used obtain reproducible results R code form PDF HTML documents. addition knitr, R Markdown can used create HTML, PDF even MS Word documents. Markdown -called markup language plain-text-formating syntax. R Markdown document written markdown contains chunks embedded R code. Although render() function package rmarkdown can used (similar knit() function package knitr), create output document R Markdown .Rmd file, R Markdown typically used conjunction RStudio. top menu, select File, New File, R Markdown… open example.Rmd file providing user structure R Markdown file. illustration, select output format HTML.Edit example.Rmd file contain following:top text editor, click Knit create HTML document. Note arrow, options Knit PDF Knit Word can also chosen. output format also specified line 5 text file output: html_document. chosen PDF output format, output: pdf_document. Typically, R Markdown used reporting, directly incorporating R code output. formal documents Figure Table caption references, tables content, etc. R package bookdown used. Install package replace output statement output:bookdown::pdf_document2. information use bookdown, click .","code":"---\ntitle: \"An Illustration of Some Capabilities of R Markdown\"\nauthor: \"Niel le Roux and Sugnet Lubbe\"\ndate: \"22/01/2021\"\noutput: html_document\n---\n\n  \n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Short description\n\nCode chunks in .Rmd files are delimited with ` ```{r} ` at the top where a chunk \nlabel and any chunk options can appear and  ` ``` ` at the end. In-line R code \nchunks are indicated with single ` `r ` on either side.\n\n*****\n\nHere is an example containing several chunks of code. Note that in the first \nchunk R code is not shown due to the option `echo = FALSE`. In the remaining \nchunks R code is shown due to the option above 'echo = TRUE'.\n\n_Note R code not shown for this chunk._\n\n```{r y, echo=FALSE}\ny <- 1\ny\n```\n\n```{r rnorm}\nrequire(lattice)\nset.seed(123)\nx <- rnorm(1000, 20, 5)\n```\n\nWe analyse data drawn from $\\mathcal{N}(20,25)$. The mean is \n`r round(mean(x),3)`. The following code shows the distribution via a histogram\n\n```{r histexample}\n  hist(x)\n```\n\nand the code below via a boxplot.\n\n```{r boxexample}\n  boxplot(x)\n```\n\nThe first element of \\texttt{x} is `r x[1]`. Note the usage of ` \\texttt{x} ` \nabove.\n\n*two plots side by side (option fig.show='hold')*\n\n```{r side-by-side, fig.show='hold', out.width=\"50%\"}\n  par(mar=c(4,4,0.1,0.1), cex.lab=0.95, cex.axis=0.9, mgp=c(2,0.7,0), tcl=-0.3, \n  las=1)\n  boxplot(x)\n  hist(x,main=\"\")\n```\n\n```{r linear_model}\n  n <- 10\n  x <- rnorm(n)\n  y <- 2*x + rnorm(n)\n  out <- lm(y ~ x)\n  summary(out)$coef\n```"},{"path":"intro.html","id":"command-line-editing","chapter":"1 Introducing the R System","heading":"1.16 Command line editing","text":"Commands given R session stored together commands given previous sessions file .History folder .RData file. R session previous commands can retrieved R prompt pressing arrow keys. previous command can edited using backspace, delete, home, end keys well shortcuts copy paste.","code":""},{"path":"objects.html","id":"objects","chapter":"2 Managing objects","heading":"2 Managing objects","text":"completing introductory chapter now know toinitialize R session;save workspace;open existing project;execute simple tasks R obtain numerical, text graphical results;obtain help.know also everything R can considered kind object. chapter focus properties different objects manage objects workspace.","code":""},{"path":"objects.html","id":"instructions-and-objects-in-r","chapter":"2 Managing objects","heading":"2.1 Instructions and objects in R","text":"","code":""},{"path":"objects.html","id":"general","chapter":"2 Managing objects","heading":"2.1.1 General","text":"Recall thatinstructions separated semi-colon start new lines;instructions separated semi-colon start new lines;# symbol marks rest line comments;# symbol marks rest line comments;default R (primary) prompt >; secondary default prompt +;default R (primary) prompt >; secondary default prompt +;use <- create objects. (equality sign (=) also accepted. However, avoid practice use\n= function arguments;\n<- assignment;\n== comparison / control structures);\nuse <- create objects. (equality sign (=) also accepted. However, avoid practice use= function arguments;<- assignment;== comparison / control structures);use -> assigning left-hand side name right-hand side.use -> assigning left-hand side name right-hand side.use function assign() assigning names objects. (discussed detail Chapter 3)use function assign() assigning names objects. (discussed detail Chapter 3)","code":""},{"path":"objects.html","id":"examples","chapter":"2 Managing objects","heading":"Examples","text":"Assigning numeric vector name “aa”. Assignment takes place global environment.Assigning character vector name “bb”.Note use argument pos, ” ” ’ ’ used characters. careful mixing single quotes double quotes. See .Explain error message .Explain backslash .","code":"\naa <- 1:10\nAa <- seq(from = 1,to = 10,by = 0.01); yy <- c(\"a\",\"b\",\"c\")\nc(\"a\",\"b\",\"c\") -> bb \nassign(\"aa\", rnorm(10), pos = 1)c(\"u\",'v',\"'w'\",\"\"x\"\",'\"y\"',''z'') -> cc\n#> Error: <text>:1:19: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",\"\"x\n#>                       ^c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z'') -> cc\n#> Error: <text>:1:31: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z\n#>                                   ^\nc(\"u\",'v',\"'w'\",'\"x\"','\"y\"','z') -> cc \ncc\n#> [1] \"u\"     \"v\"     \"'w'\"   \"\\\"x\\\"\" \"\\\"y\\\"\" \"z\"\nobjects()\n#> [1] \"aa\" \"Aa\" \"bb\" \"cc\" \"yy\"\naa\n#>  [1] -0.2706247 -0.1856922 -0.7276464 -1.1021677 -0.4151107\n#>  [6]  1.8439135  1.4577438 -1.8439103 -0.9168154 -0.8459781\nbb\n#> [1] \"a\" \"b\" \"c\"\nobjects()[3]\n#> [1] \"bb\"\nparse(text=objects()[3])\n#> expression(bb)\neval(parse(text=objects()[3]))\n#> [1] \"a\" \"b\" \"c\"\nrm(a,b)\n#> Warning in rm(a, b): object 'a' not found\n#> Warning in rm(a, b): object 'b' not found\nrm(aa,bb)\nobjects()\n#> [1] \"Aa\" \"cc\" \"yy\"\nrm(\"cc\")\nobjects()\n#> [1] \"Aa\" \"yy\""},{"path":"objects.html","id":"objects-in-r","chapter":"2 Managing objects","heading":"2.1.2 Objects in R","text":"Everything object many different types objects.Everything object many different types objects.Study also take note following naming conventions:Study also take note following naming conventions:Allowed upper lower case letters, numbers 0 – 9, full stop(s) underscore(s).Must begin number.R case sensitive .e. John john refer different objects.Use full stops (periods) underscores break name meaningful words.Avoid c, s, t, C, F, T, diff well reserved words naming object.use functions conflicts() find() naming objects. instruction conflicts (detail = TRUE) outputs details whether objects identical names exist search path e.g.instruction find (\"object\") outputs details whether objects name object exist search path e.g.Objects can possess several attributes e.g. mode (way object internally stored)lengthnamesdimclass","code":"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nfind(\"kronecker\")\n#> [1] \"package:methods\" \"package:base\""},{"path":"objects.html","id":"examples-1","chapter":"2 Managing objects","heading":"Examples","text":"Levels show categorical variable (object).Mode numeric tells us categorical variable (object) b internally stored set numeric codes.Special attention given class mode integers. object type integer stored internally effectively integer represented double format.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created within function exist long function executed.Objects created within function exist long function executed.Use rm() rm(list = ListOfNames) remove objects workspace.Use rm() rm(list = ListOfNames) remove objects workspace.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.can object printed screen?can object printed screen?Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .","code":"\na <- 1:10\nclass(a)\n#> [1] \"integer\"\nb <- factor(c(\"a\",\"b\",\"c\"))\nclass(b)\n#> [1] \"factor\"\nb\n#> [1] a b c\n#> Levels: a b c\nmode(a)\n#> [1] \"numeric\"\nmode(b)\n#> [1] \"numeric\"\nlength(a)\n#> [1] 10\nlength(b)\n#> [1] 3\ndim(a)\n#> NULL\nmat <- matrix(1:12,nrow=4)\nmat\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12\ndim(mat)\n#> [1] 4 3\nmode(mat)\n#> [1] \"numeric\"\nlogic <- c(TRUE,TRUE,FALSE,TRUE)\nmode(logic)\n#> [1] \"logical\"\nclass(logic)\n#> [1] \"logical\"\nx <- 5\ny <- 5L\ntypeof(x)\n#> [1] \"double\"\ntypeof(y)\n#> [1] \"integer\"\nclass(x)\n#> [1] \"numeric\"\nclass(y)\n#> [1] \"integer\"\nmode(x)\n#> [1] \"numeric\"\nmode(y)\n#> [1] \"numeric\""},{"path":"objects.html","id":"data-in-r","chapter":"2 Managing objects","heading":"2.1.3 Data in R","text":"R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.Study help file c().Study help file c().Study help file scan().Study help file scan().Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.","code":""},{"path":"objects.html","id":"generation-of-data","chapter":"2 Managing objects","heading":"2.1.4 Generation of data","text":"Study operators functions :, seq(), rep(), rev(), rnorm(), runif() following instructions:function rmvnorm() generating multivariate normal samples mvtnorm R package. package must first loaded using instructionAlternatively, generating multivariate normally data also function mvrnorm() R package MASS.","code":"\n1:10\n8:3\nseq(from=1, to=10, length=10)\nseq(from=2, to=10, length=5)\nrev(10:1)\nrnorm (20, mean=50, sd=5)\nrunif (10, min=1, max=3)\nlibrary(mvtnorm)"},{"path":"objects.html","id":"r-function-basics","chapter":"2 Managing objects","heading":"2.2 R Function Basics","text":"introduced R functions section 1.9. basic structure R function follows:function func.name() called, code { } executed. Let us another look confidence interval function, small change list arguments:argument x default value. function executed without specifying vector values x. argument alpha default value \\(0.95\\) means default \\(95\\%\\) confidence interval created. however user specify alternative confidence level, wish.final expression R function automatically returned function completes execution.function consists single line, can written succinctlyor even without { }:general, functions consist lines code often multiple outputs returned. single output object needs returned, object can created last line codeor return() statement:general, outputs combined returned list. final expression function creates list object:return multiple outputs, list simply extended shown :good practice name output objects list, :Finally, place output object processing, function assigned object name:","code":"func.name <- function(list of arguments)\n{\n  # R code\n}\nconf.int <- function (x, alpha = 0.95)\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)   \n  tail.prob <- 1 - alpha\n  t.perc <- qt(1 - tail.prob/2,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)  \n}\nconf.int()\n#> Error in conf.int(): argument \"x\" is missing, with no default\nconf.int(x = sleep[,1])\n#> $lower\n#> [1] 0.5955845\n#> \n#> $upper\n#> [1] 2.484416\nconf.int(x = iris[1:50,1], alpha = 0.9)\n#> $lower\n#> [1] 4.919803\n#> \n#> $upper\n#> [1] 5.092197\nmy.func <- function(a=5) \n{  a+2\n}\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) {  a+2  }\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) a+2\nmy.func()\n#> [1] 7\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     number/a\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     return(number/a)\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number, number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 64\n#> \n#> [[2]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nmy.func()\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nout <- my.func()\nout\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8"},{"path":"objects.html","id":"how-r-finds-data","chapter":"2 Managing objects","heading":"2.3 How R finds data","text":"order understand objects found R necessary understanding conceptsEnvironmentFrameSearch pathParent environmentInheritance.mechanism R uses organize objects based frames environments. frame collection named objects environment consists frame together pointer reference another environment called parent environment. Environments nested parent environment environment directly contains current environment. start R session workspace created always associate environment, global environment. global environment occupies first position search path accessed call globalenv(). Packages databases can added search path call attach() removed search path call detach().R package? difference installing loading package?Work following example:attach package MASSBy default MASS attached second position search path.use detach remove MASS search path.obtain parent global environmentWhen R evaluator looks object find name global environment search parent global environment. carry search along search path first occurrence name. name found return message Error: object 'xx' found. usage double colon :: triple colon ::: access intended object one object name exist search path. two operators use namespace facility R packages. namespace package allow creator package hide functions data meant internal use; provides way operators :: ::: object within particular package. Thus namespace prevent functions breaking user selects name clashes one package. double-colon operator :: selects objects particular namespace. functions exported package can retrieved way. triple-colon operator ::: acts like double-colon operator also allows access hidden objects. Packages often inter-dependent, loading one may cause others automatically loaded. automatically loaded packages added search list.note function call getAnywhere(), searches multiple packages can used finding hidden objects. function called, R creates new (temporary) environment enclosed current (calling) environment. Objects created new environment available parent environment dies function terminates. Objects calling environment available use new environment created function called.Similarly, expression evaluated hierarchy environments created. Search objects continue hierarchy necessary global environment onto search path.Study use arguments pos, .names, pattern function objects().Study behaviour functions conflicts() exists() examples :Study code carefully explain inheritance .example leads conclusion complicated stage. behaviour become clear work coming chapters.Direct access objects search path can achieved function get().\nfunction get() takes first argument name object character string. optional argument pos can used specify search list look object. illustration explain outcomes following function calls:Instead attaching databases function () often preferred. Discuss usage () referring instructions:","code":"\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nlibrary (MASS)\nsearch()\n#>  [1] \".GlobalEnv\"        \"package:MASS\"     \n#>  [3] \"package:stats\"     \"package:graphics\" \n#>  [5] \"package:grDevices\" \"package:utils\"    \n#>  [7] \"package:datasets\"  \"package:methods\"  \n#>  [9] \"Autoloads\"         \"package:base\"\ndetach(\"package:MASS\")\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nparent.env(.GlobalEnv)\n#> <environment: package:stats>\n#> attr(,\"name\")\n#> [1] \"package:stats\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.2/library/stats\"\nparent.env(parent.env(.GlobalEnv))\n#> <environment: package:graphics>\n#> attr(,\"name\")\n#> [1] \"package:graphics\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.2/library/graphics\"\nparent.env(parent.env(parent.env(.GlobalEnv)))\n#> <environment: package:grDevices>\n#> attr(,\"name\")\n#> [1] \"package:grDevices\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.4.2/library/grDevices\"\nenvironmentName(parent.env(parent.env(parent.env(.GlobalEnv))))\n#> [1] \"package:grDevices\"\nconflicts()\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nexists(\"kronecker\")\n#> [1] TRUE\nexists(\"kronecker\", where = 1)\n#> [1] TRUE\nexists(\"kronecker\", where = 1, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 2)\n#> [1] TRUE\nexists(\"kronecker\", where = 2, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 7, inherits = FALSE)\n#> [1] TRUE\nexists(\"kronecker\", where = 8, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 9, inherits = FALSE)\n#> [1] TRUE\nsapply(search(), function(x) exists(\"kronecker\", where = x, inherits=FALSE))\n#>        .GlobalEnv     package:stats  package:graphics \n#>             FALSE             FALSE             FALSE \n#> package:grDevices     package:utils  package:datasets \n#>             FALSE             FALSE             FALSE \n#>   package:methods         Autoloads      package:base \n#>              TRUE             FALSE              TRUE\nget (\"%o%\") \n#> function (X, Y) \n#> outer(X, Y)\n#> <bytecode: 0x00000197bc197b98>\n#> <environment: namespace:base>\nmean <- mean (rnorm (1000))\nget (mean)\n#> Error in get(mean): invalid first argument\nget (\"mean\") \n#> [1] 0.01967994\nget (\"mean\", pos = 1) \n#> [1] 0.01967994\nget (\"mean\", pos = 2)\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x00000197ba2a4158>\n#> <environment: namespace:base>\nrm (mean)\nwith (beaver1, mean(time))\n#> [1] 1312.018\nwith (beaver2, mean(time))\n#> [1] 1446.2"},{"path":"objects.html","id":"the-organisation-of-data-data-structures","chapter":"2 Managing objects","heading":"2.4 The organisation of data (data structures)","text":"Study help files list(), matrix(), data.frame() c() carefully.list created function list(). list basic means storing collection data objects R modes /lengths objects different. List elements accessed using [[ ]] $ objects named. List objects named using constructionand elements retrieved using instructionA matrix R rectangular collection data, mode (e.g. numeric, character/text logical). formed constructionMatrix elements accessed using .matrix[,j]. functions nrow(), ncol(), dim(), dimnames(), colnames() rownames() useful working matrices.dataframe also rectangular collection data columns can different modes. can regarded cross list matrix. Dataframes constructed function data.frame().Study help files functions.","code":"\nmy.list <- list(name1 = 1:10, name2 = mean)\nmy.list\n#> $name1\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> $name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x00000197ba2a4158>\n#> <environment: namespace:base>\nmy.list[[2]]\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x00000197ba2a4158>\n#> <environment: namespace:base>\nmy.list$name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x00000197ba2a4158>\n#> <environment: namespace:base>\nmy.matrix <- matrix(1:12, ncol=3, nrow=4, byrow=FALSE)\nmy.matrix\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12"},{"path":"objects.html","id":"time-series","chapter":"2 Managing objects","heading":"2.5 Time series","text":"Study usage function ts().","code":""},{"path":"objects.html","id":"the-functions-as.xxx-and-is.xxx","chapter":"2 Managing objects","heading":"2.6 The functions as.xxx() and is.xxx()","text":"function .xxx() transforms object best possible specified type e.g. .matrix(mydata) transforms numerical dataframe numerical matrix. .xxx() tests argument certain type e.g. .matrix(mydata) evaluates false mydata satisfy conditions matrix.","code":""},{"path":"objects.html","id":"simple-manipulations-numbers-and-vectors","chapter":"2 Managing objects","heading":"2.7 Simple manipulations; numbers and vectors","text":"Explain vector calculations recycling principle referring example .Logical vectors. Explain behaviour instruction belowMissing values: NA (indicate missing value data), NaN (number)Character vectors: see section 3.4.1Character vectors: see section 3.4.1Subscripting vectors: see section 5.1Subscripting vectors: see section 5.1","code":"\nc(1,3,5,9) + c(1,2,3)\n#> Warning in c(1, 3, 5, 9) + c(1, 2, 3): longer object length\n#> is not a multiple of shorter object length\n#> [1]  2  5  8 10\nsum (c (TRUE, FALSE, TRUE, TRUE, FALSE))\n#> [1] 3\n10/0\n#> [1] Inf\n0/0\n#> [1] NaN"},{"path":"objects.html","id":"objects-their-modes-and-attributes","chapter":"2 Managing objects","heading":"2.8 Objects, their modes and attributes","text":"Vector elements must mode: logical, numeric, complex, characterEmpty object; created (e.g. xx <- numeric()) components may added (e.g. xx[5] <- 22)Getting setting attributes: functions attr() attributes()Class object function unclass() removing class.","code":""},{"path":"objects.html","id":"representation-of-objects","chapter":"2 Managing objects","heading":"2.9 Representation of objects","text":"already seen representation object can obtained calling (entering) name:often convenient full representation returned object . functions head(), str() summary() available extracting partial representation object:many R functions provided getting information R object represents. functions like mode(), class(), length(), levels(), .xxx() .xxx() already encountered others given chapters come.","code":"\ncars\n#>    speed dist\n#> 1      4    2\n#> 2      4   10\n#> 3      7    4\n#> 4      7   22\n#> 5      8   16\n#> 6      9   10\n#> 7     10   18\n#> 8     10   26\n#> 9     10   34\n#> 10    11   17\n#> 11    11   28\n#> 12    12   14\n#> 13    12   20\n#> 14    12   24\n#> 15    12   28\n#> 16    13   26\n#> 17    13   34\n#> 18    13   34\n#> 19    13   46\n#> 20    14   26\n#> 21    14   36\n#> 22    14   60\n#> 23    14   80\n#> 24    15   20\n#> 25    15   26\n#> 26    15   54\n#> 27    16   32\n#> 28    16   40\n#> 29    17   32\n#> 30    17   40\n#> 31    17   50\n#> 32    18   42\n#> 33    18   56\n#> 34    18   76\n#> 35    18   84\n#> 36    19   36\n#> 37    19   46\n#> 38    19   68\n#> 39    20   32\n#> 40    20   48\n#> 41    20   52\n#> 42    20   56\n#> 43    20   64\n#> 44    22   66\n#> 45    23   54\n#> 46    24   70\n#> 47    24   92\n#> 48    24   93\n#> 49    24  120\n#> 50    25   85\nhead(cars)\n#>   speed dist\n#> 1     4    2\n#> 2     4   10\n#> 3     7    4\n#> 4     7   22\n#> 5     8   16\n#> 6     9   10\nsummary(cars)\n#>      speed           dist       \n#>  Min.   : 4.0   Min.   :  2.00  \n#>  1st Qu.:12.0   1st Qu.: 26.00  \n#>  Median :15.0   Median : 36.00  \n#>  Mean   :15.4   Mean   : 42.98  \n#>  3rd Qu.:19.0   3rd Qu.: 56.00  \n#>  Max.   :25.0   Max.   :120.00\nstr(cars)\n#> 'data.frame':    50 obs. of  2 variables:\n#>  $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n#>  $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\nlength(cars) \n#> [1] 2\nlength(as.matrix(cars))\n#> [1] 100\ndim(cars)\n#> [1] 50  2\nis.matrix(cars)\n#> [1] FALSE\nis.data.frame(cars)\n#> [1] TRUE\nis.list(cars)\n#> [1] TRUE\nmode(cars)\n#> [1] \"list\"\nclass(cars)\n#> [1] \"data.frame\"\nlevels(cars)\n#> NULL"},{"path":"objects.html","id":"exercise-3","chapter":"2 Managing objects","heading":"2.10 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"objects.html","id":"exercise-4","chapter":"2 Managing objects","heading":"2.10.1 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.","code":""},{"path":"objects.html","id":"exercise-5","chapter":"2 Managing objects","heading":"2.10.2 Exercise","text":"Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).","code":""},{"path":"objects.html","id":"exercise-6","chapter":"2 Managing objects","heading":"2.10.3 Exercise","text":"Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.","code":""},{"path":"objects.html","id":"exercise-7","chapter":"2 Managing objects","heading":"2.10.4 Exercise","text":"Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"operators.html","id":"operators","chapter":"3 R operators and functions","heading":"3 R operators and functions","text":"completing Chapters 1 2 assumed following now familiar:communicate R;manage workspaces;perform simple tasks using R.chapter take closer look behaviour commonR operatorsR functions.","code":""},{"path":"operators.html","id":"arithmetic-operators","chapter":"3 R operators and functions","heading":"3.1 Arithmetic operators","text":"Study use operators Table 3.1.Table 3.1:  Arithmetic operators.Note arithmetic operators also functions. follows studying following examples:Rules operator expressions vector arguments.Study results following R instructions.Explain following instructions output R:examples illustrated R uses vectorized arithmetic .e. operates vectors wholes. Sometimes recycling principle applied without warning. good R programming habit make use vectorizing calculations possible. effect recycling principle must kept mind since might lead unwanted results.Missing values, infinity “number”.missing value R denoted NA. result computation involving NAs always NA e.g.result computation represented number e.g. 0/0 denoted NaN.\nNote: computational results differently reported R corresponding algebraic equivalents, 5/0 R given Inf algebraically undefined.Scientific notationR uses decimal notation well scientific notation arithmetic calculations. Scientific notation confused \\(exp()\\).numbers represented computer’s memory? implications ?Computers use /(1/0) switches encoding information. single switch called bit group eight bits called byte. single integer represented exactly computer fixed number bytes .e. 32 64 bits. several schemes according integers represented bits computer. representation computer takes place level R control R stores information computing environment object .Machine. element .Machine$integer.max returns largest integer can represented computer R running e.g.Although method representing integers strings bits provides efficient way storing integers computer R usually treats integers similar real numbers using floating point representation. binary floating point notation number x written sequence zeros ones (mantissa) times two exponent say \\(m\\): \\(x=b_0 b_1 b_2…×2^m\\) \\(b_0=1\\) except \\(x=0\\).practice limited number \\(b\\)’s available exponent also limited therefore, general, real numbers can represented exactly computer – can approximated. smallest number \\(x\\) \\(1 + x\\) can distinguished \\(1\\) computer called machine epsilon. R can obtained .Machine$double.eps e.g.Although floating point representation allows computation small (magnitude) large numbers limitations can lead underflow overflow can disastrous consequences practice. Writing good code R must take seriously account.","code":"\n3+7\n#> [1] 10\n\"+\"(3,7)\n#> [1] 10\n17 %% 3\n#> [1] 2\n\"%%\"(17,3)\n#> [1] 2\ncars [,2] * 12 * 25.4 / 1000\n#>  [1]  0.6096  3.0480  1.2192  6.7056  4.8768  3.0480  5.4864\n#>  [8]  7.9248 10.3632  5.1816  8.5344  4.2672  6.0960  7.3152\n#> [15]  8.5344  7.9248 10.3632 10.3632 14.0208  7.9248 10.9728\n#> [22] 18.2880 24.3840  6.0960  7.9248 16.4592  9.7536 12.1920\n#> [29]  9.7536 12.1920 15.2400 12.8016 17.0688 23.1648 25.6032\n#> [36] 10.9728 14.0208 20.7264  9.7536 14.6304 15.8496 17.0688\n#> [43] 19.5072 20.1168 16.4592 21.3360 28.0416 28.3464 36.5760\n#> [50] 25.9080\n7%/%3\n#> [1] 2\n7%%3\n#> [1] 1\nmatrix(1,nrow=4,ncol=4) * matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    3    3    3    3\n#> [2,]    3    3    3    3\n#> [3,]    3    3    3    3\n#> [4,]    3    3    3    3\nmatrix(1,nrow=4,ncol=4) %*% matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   12   12   12\n#> [2,]   12   12   12   12\n#> [3,]   12   12   12   12\n#> [4,]   12   12   12   12\n1:12 + 1:3\n#>  [1]  2  4  6  5  7  9  8 10 12 11 13 15\n1:10 + 1:2\n#>  [1]  2  4  4  6  6  8  8 10 10 12\n1:10 + 1:3\n#> Warning in 1:10 + 1:3: longer object length is not a\n#> multiple of shorter object length\n#>  [1]  2  4  6  5  7  9  8 10 12 11\nmean(c(1,3,NA,12,5))\n#> [1] NA\n0/0\n#> [1] NaN\n5/0\n#> [1] Inf\n-5/0\n#> [1] -Inf\n5/(-0)\n#> [1] -Inf\n60000000\n#> [1] 6e+07\n1/6000000\n#> [1] 1.666667e-07\nexp(15)\n#> [1] 3269017\nexp(-15)\n#> [1] 3.059023e-07\n.Machine$integer.max\n#> [1] 2147483647\n.Machine$double.eps\n#> [1] 2.220446e-16"},{"path":"operators.html","id":"logical-operators","chapter":"3 R operators and functions","heading":"3.2 Logical operators","text":"Logical operators result TRUE, FALSE NA. Study use logical operators Table ??. Warning: perfectly legitimate writeit incorrect specifyThe correct code latter case isWhat consequences code? Also take note functions () (). two functions useful combining logical objects. Give necessary instructions carry following tasks:Check states state.x77 data set populations illiteracy rate larger \\(1.6\\) Murder rate \\(10.0\\).Check least one state income greater \\(\\$5000\\) life expectancy less \\(70.0\\) years.Check states income \\(\\$5000\\) illiteracy \\(2.0\\).meant control logical operator?Table 3.2:  Logical operators.Carry instructions:Comment .result sum(c(TRUE, !FALSE, FALSE, TRUE, TRUE))?result sum(c(TRUE, !FALSE, FALSE, NA, TRUE)) ?Explain","code":"\nx[x == -1] <- 0\nx[x == 1] <- 0 x[x == NA] <- 0\nx[x = = NaN] <- 0 \nx[is.na(x)] <- 0\nx[is.nan(x)] <- 0\nmata <- matrix(1:4, ncol = 2)\nmatb <- matrix(c(10, 20, 30, 40), ncol = 2)\nmata\n#>      [,1] [,2]\n#> [1,]    1    3\n#> [2,]    2    4\nmatb\n#>      [,1] [,2]\n#> [1,]   10   30\n#> [2,]   20   40\nmata>1 & matb>1\n#>       [,1] [,2]\n#> [1,] FALSE TRUE\n#> [2,]  TRUE TRUE\nmata>1 | matb>1\n#>      [,1] [,2]\n#> [1,] TRUE TRUE\n#> [2,] TRUE TRUE\nmata>1 && matb>1\n#> Error in mata > 1 && matb > 1: 'length = 4' in coercion to 'logical(1)'\nmata>1 || matb>1\n#> Error in mata > 1 || matb > 1: 'length = 4' in coercion to 'logical(1)'"},{"path":"operators.html","id":"the-operators-----and","chapter":"3 R operators and functions","heading":"3.3 The operators <-, <<- and ~","text":"considering use operators answer following:happen object aa working directory within function following assignment made aa <- 20?happen object aa working directory within function following assignment made aa <- 20?Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.tilde operator used modelling functions, e.g. lm (length ~ age).tilde operator used modelling functions, e.g. lm (length ~ age).","code":""},{"path":"operators.html","id":"operator-precedence","chapter":"3 R operators and functions","heading":"3.4 Operator precedence","text":"Study precedence rules summarized Table 3.4.1. rules followed shown Table 3.3 top bottom left right. Note use ofparentheses ( ) function arguments changing precedence,braces { } demarcating blocks instructionsand brackets [ ] subscripting.correct way extracting fifth element sequence like 1:20 isTable 3.3:  Precedence rules.","code":"\n(1:20)[5]\n#> [1] 5"},{"path":"operators.html","id":"character","chapter":"3 R operators and functions","heading":"3.4.1 Character vectors","text":"","code":""},{"path":"graphics.html","id":"graphics","chapter":"4 Introducing traditional R graphics","heading":"4 Introducing traditional R graphics","text":"","code":""},{"path":"subscripting.html","id":"subscripting","chapter":"5 Subscripting","heading":"5 Subscripting","text":"","code":""},{"path":"subscripting.html","id":"vectorSubscripting","chapter":"5 Subscripting","heading":"5.1 Subscripting with vectors","text":"","code":""},{"path":"revision.html","id":"revision","chapter":"6 Revision tasks","heading":"6 Revision tasks","text":"","code":""},{"path":"functions.html","id":"functions","chapter":"7 Writing functions in R","heading":"7 Writing functions in R","text":"","code":""},{"path":"mapping.html","id":"mapping","chapter":"8 Vectorized programming and mapping functions","heading":"8 Vectorized programming and mapping functions","text":"","code":""},{"path":"data.html","id":"data","chapter":"9 Reading data files into R, formatiing and printing","heading":"9 Reading data files into R, formatiing and printing","text":"","code":""},{"path":"graphics2.html","id":"graphics2","chapter":"10 R graphics: Round II","heading":"10 R graphics: Round II","text":"","code":""},{"path":"modelling.html","id":"modelling","chapter":"11 Statistical modelling with R","heading":"11 Statistical modelling with R","text":"","code":""},{"path":"optimisation.html","id":"optimisation","chapter":"12 Introduction to Optimisation","heading":"12 Introduction to Optimisation","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
>>>>>>> 1953e42adbba6c7aac55f5953902de2de06642bc
