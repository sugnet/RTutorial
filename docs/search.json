[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"book updated version (le Roux & Lubbe, 2021).","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2013","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2013)","text":"R system open-source software project analyzing data constructing graphics. provides general computer language performing tasks like organizing data, statistical analyses, simulation studies, model fitting, building complex graphics many .Central R system high-level R computer language. roots date back birth computer language S May 5, 1976 Bell Labs, Murray Hill, New Jersey (Chambers, 2008). early days S underwent several revisions extensions mainly implementation UNIX operating system. Eventually enhanced version S licensed name S-PLUS became available Windows operating system name S-PLUS Windows. earlier versions R adhered principles functional programming release version S3 middle eighties building blocks dynamically generated, self-describing objects. publication New S Language (Becker, Chambers & Wilks, 1988) provides detailed description S3. next major development S release Statistical Models S (Chambers & Hastie, 1993) involved merging functional style S object-oriented programming concepts classes methods. However, S3 limited formal support classes methods. introduction S4 objects (Chambers, 1998) introduced new class method system retains S3 compatibility. meantime several versions S-PLUS based upon S3 first later S4 released commercial market.R language introduced paper published Ross Ihaka Robert Gentleman Auckland, New Zealand 1996 (Ihaka & Gentleman, 1996). proposal large extent compatible S included features Lisp/Scheme family languages. important aspect R availability open-source system.R S-PLUS can considered clones underlying S. means able program one can quite easily program warned: also fundamental differences two systems.first two decades twenty-first century interest R exceeded possible expectations. Apart well-maintained core system new releases every months currently literally thousands researchers contributing add-packages cutting-edge developments statistics data analysis.book tutorial twofold aim; learning basics R system program efficiently R. result introductory course S-PLUS taught University Stellenbosch since 1995. initial course based book Introduction S S-Plus (Spector, 1994). Since 2002 increasingly emphasis put R extent currently exclusively devoted R. change necessitated preparation class notes ten-day (eight hours day) tutorial course R. result Step--Step R Tutorial: introduction R applications programming.","code":""},{"path":"index.html","id":"preface-to-a-step-by-step-r-tutorial-2021","chapter":"Preface","heading":"Preface to A Step-by-Step R Tutorial (2021)","text":"Since first publication Step--Step R Tutorial: introduction R applications programming R system experienced dramatic evolutionary process. edition still maintains twofold aim first edition adapting contents needs modernization happening within R system . Deprecated outdated material omitted new developments included. follows brief description changes.Chapter 1 contains new section explaining use R Markdown creating PDF HTML documents R output. Chapters 2, 3, 4 5 see minor changes. Chapter 6 changes made data sets used well exercises borrowed later chapters first edition. Chapter 7, ‘Writing R Functions’, notable reference made Rcpp package inclusion C++ code R. package allows compiled code included considerably easier robust. Vectorized programming mapping functions enhanced Chapter 8 discussion function mapply(). major addition discussion section 8.14 writing user-friendly applications using package shiny. replaces usage function menu(). exercise create simple shiny App also included.first part Chapter 9, ‘Reading data files R, formatting printing’, methods reading Microsoft Excel files updated; functions like readRDS() writeRDS() transporting R objects introduced; clipr package discussed. major addition chapter section devoted functionality provided tidyverse collection R packages data manipulation exploration; tibbles discussed detail well pipe operator %>%, tidy data illustrated data manipulation functions dplyr illustrated detail.Chapter 10, ‘R graphics: Round II’, considerably extended inclusion section specify colours; rewritten section quantile plots inclusion material previously Chapter 11. now section density estimation, includes discussion density histograms average shifted histograms. new section 10.14 package ggplot2 discussed many examples capabilities.chapter ‘Modelling R’ (Chapter 11) extensive discussion Analysis Variance Covariance (Chapter 12) previous edition rewritten completely consolidated new Chapter 11. final chapter now Chapter 12, ‘Introduction Optimization’. Apart new data set material similar Chapter 13 previous edition.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Introducing the R System","heading":"1 Introducing the R System","text":"","code":""},{"path":"intro.html","id":"introduction","chapter":"1 Introducing the R System","heading":"1.1 Introduction","text":"chapter introduces R system new R user. Windows operating system emphasized material covered also applies operating systems allowing requirements particular operating system use. Users experience R quickly glance chapter making sure mastered topics covered proceeding main tutorial starting Chapter 2.computer age statistics become inseparable able write computer programs. Therefore, let us start reminder Fundamental Goal S:Conversion idea useful softwareThe challenge pursue goal keeping mind Mission R (Chambers, 2008):… enable best thorough exploration data possibleand Prime Directive (Chambers, 2008):… places obligation creators software program way computations can understood trusted.","code":""},{"path":"intro.html","id":"downloading-the-r-system","chapter":"1 Introducing the R System","heading":"1.2 Downloading the R system","text":"Website downloading R.download R computer: Navigate …/bin/windows/base save file R-x.y.z.-win.exe computer. Click file start installation procedure select defaults unless good reason . select ‘Create desktop icon’ installation phase, icon similar one appear desktop. Alternatively, can find R Applications.core R system installed includes several packages. Apart installed packages several thousands dedicated contributed packages available downloaded users need .","code":""},{"path":"intro.html","id":"QuickSample","chapter":"1 Introducing the R System","heading":"1.3 A quick sample R session","text":"Click R icon created desktop open Commands Window Console. Notice R prompt > waiting instruction user.R prompt > enter 5 – 8. follow following convention write instructions:Repeat () enter 5 – see happens:+ secondary R prompt. indicates instruction unfinished. Either respond completing instruction press Esc key start primary prompt.EnterThis instruction creates R object name (label) xx containing vector\n(1, 2, 3, 4, 5, 6, 7, 8, 10).EnterThis instruction creates R object name yy containing random sample 20 values normal distribution mean 50 standard deviation 15.EnterThe example shows name R object entered prompt, R respond displaying contents object.Obtain representation contents object yy created (d).Obtain representation contents object yy created (d).program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.\ncan R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:program R called function. function R also R object therefore name (label). follows (e) name function entered prompt, R respond displaying contents function.can R function executed .e. can R function called? Apart name R function list arguments enclosed within parentheses. R function called entering name followed list arguments enclosed within parentheses. example, let us calculate mean object yy created calling function mean:Note prompt appear followed mean object yy.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects created R session workspace stored database .RData current folder. listing objects database can obtained calling functions ls() objects(). Now, first enter, R prompt, instruction objects (ls) instruction objects() (ls()). Explain happened.Objects can removed following instruction: rm(name1, name2, ... ).Objects can removed following instruction: rm(name1, name2, ... ).Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:Apart console several types windows available R e.g. graphs displayed graph windows. illustrate, enter following instructions R prompt console commands window:instructions resulted opening graph window containing required histogram user can switch console graph window back console.R session can terminated closing window entering q() R prompt. Either way user prompted save workspace. user chooses save, objects created session lost.","code":"\n5 - 8\n#> [1] -3> 5 -\n> +\n> +\nxx <- 1:10\nyy <- rnorm(n = 20, mean = 50, sd = 15) \nxx\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nmean(yy) \n#> [1] 53.0393\ngr.data <- rnorm(1000) \nhist(gr.data)"},{"path":"intro.html","id":"working-with-rstudio","chapter":"1 Introducing the R System","heading":"1.4 Working with RStudio","text":"Many users R prefer working RStudio. RStudio free open source integrated development environment R works standard version R available CRAN. can downloaded RStudio home page run desktop (Windows, Mac Linux). Full details functionality RStudio available home page. , brief introduction RStudio given.RStudio installed computer following icon created desktop:Clicking icon open RStudio development environment shown Figure 1.1. order open R workspace RStudio drag corresponding .RData file RStudio icon drop soon ‘Open RStudio’ becomes visible.\nFigure 1.1: RStudio development environment R.\nbottom left-hand panel familiar R console.bottom right-hand panel used :\n() listing files folder workspace (.RData) active project kept\n(b) listing installed packages available attached search path well menus installing updating packages\n(c) graph windows ()\n(d) Help facilities.top left-hand panel can used creating managing script files (see 1.9.1) top right-hand panel provides information objects current folder well history previous commands given console.","code":""},{"path":"intro.html","id":"r-an-interpretive-computer-language","chapter":"1 Introducing the R System","heading":"1.5 R: an interpretive computer language","text":"Essentially, interpretive language instructions given one one. instruction evaluated interpreted turn internal program called interpreter evaluator immediate action taken. example, instruction given 1.3() evaluated R evaluator resulting answer –3 returned. hand, 1.3(b) evaluator found instruction incomplete therefore asked information.advantage interpretive language intermediate results can obtained quickly without first wait complete program finish case compiler language. latter case complete program translated (compiled) program called compiler. compiled program can converted standalone application can called programs perform complete task. general compiler languages handle computer memory relatively efficiently calculations executed speedily.\nCommunication R evaluator takes place set instructions called escape sequences. escape sequences take form backslash preceding character. Examples escape sequences :\\n new line\\r carriage return\\t go next tab stop\\b backspace\\bell\\f form feed\\v vertical tabA consequence role backslash R single backslash filename properly recognized. Therefore, referring R following file path “c:\\Documents\\myFile.txt” backslashes must entered double backslashes .e. \"c:\\\\Documents\\\\myFile.txt\" \"c:/Documents/myFile.txt\".","code":""},{"path":"intro.html","id":"exercise","chapter":"1 Introducing the R System","heading":"1.5.1 Exercise","text":"cat() function can used write text message console. Initialize new R session investigate results following R instructions:purpose semi-colon line ?distinguish two soundings bell? Try following:now distinguish two soundings bell?purpose Sys.sleep() instruction?","code":"\ncat(\"aaa bbb\")\ncat(\"aaa bbb \\n\")\ncat(\"aaa \\n bbb \\n\")\ncat(\"aaa \\nbbb \\n\")\ncat(\"aaa \\t\\t bbb \\n\") \ncat(\"aaa\\b\\b\\bbbb \\n\") \ncat(\"aaa \\n\\a bbb \\a\\n\") \ncat(\"1\\a\\n\"); cat(\"2\\a\\n\")\ncat(\"1\\a\\n\"); Sys.sleep(2); cat(\"2\\a\\n\") "},{"path":"intro.html","id":"exercise-1","chapter":"1 Introducing the R System","heading":"1.5.2 Exercise","text":"Write R code achieve following output:name :Bell sounds .name appears new line.Two distinct sounds bell heard andThank visible new line.cursor appears new line.","code":""},{"path":"intro.html","id":"accessing-the-help-functionality","chapter":"1 Introducing the R System","heading":"1.6 Accessing the Help functionality","text":"Useto obtain help usage R function mean().Find difference instructionsandWhat help available via instructionUseto find obtain help using R function help.search(xx). Note: hep operator reserved word quotes needed, e.g.butor","code":"\n?mean\n?mean\n??mean\nhelp.start()\n?help.search()\n?matrix\n?\"?\"\n?\"for\""},{"path":"intro.html","id":"MoreBasics","chapter":"1 Introducing the R System","heading":"1.7 More R basics","text":"R interactive language allows fast acquisition results.R interactive language allows fast acquisition results.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R functional language two important senses: technical sense means R model computation relies function evaluation procedural computations changes state. second sense refers way users communicate R namely almost entirely function calls.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R object-oriented language refers technical sense S4 S5 type objects associated classes methods mentioned Preface. less technical sense means everything R object.R objects studied detail later chapters. important now, following:R objects studied detail later chapters. important now, following:Everything R object.different types objects e.g. function objects, data objects, graphics objects, character objects, numeric objects.Usually objects stored current folder called Global environment; recognized R name .GlobalEnv available file system name .RData.Objects created console assignment instructionorIn R names case sensitive .e. peter Peter two different objects.Objects created assignment R session stored permanently Global environment (working directory) unless user chooses save terminating R session.Care must exercised creating new object assignment: object name .object already exists Global environment new object created assigning name .object old .object -written replaced new object without warning.Remember way R evaluator operates: object name given R prompt R evaluator responds displaying content object. Review difference instructionsandThe symbol # marks comment. Everything following # line ignored R evaluator. Check example result instructionUsage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.Usage symbols <-, = ==. symbol <- used assigning object right-hand side name (label) left-hand side; equality sign = used specifying arguments functions double equality symbol == used comparison purposes. earlier versions R rules strictly applied R evaluator. However, recent versions R evaluator allows equality sign also case assigning object name. believe reserving equality sign argument specifications functions leads clarity writing complex functions therefore discourage usage creating objects assignment. book creating objects assignment exclusively carried assignment symbol <-.symbol -> assigns object left-hand side name (label) right-hand side.symbol -> assigns object left-hand side name (label) right-hand side.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.Working packages: core installation includes several packages. see issue command search() R prompt console. Notice first object search list .GlobalEnv. followed objects. Packages recognized string package followed colon name package. order package used following steps must followed: package installed previously needs loaded search path using command library(packagename) R prompt. load package default second position search path. package installed previously must first installed. easily done using top menu Packages. command require(packagename) appears identical library(packagename). function require() designed use inside functions gives warning, rather error, package exist.help (?) facility: Table 1.1 contains details help available special keywords.help (?) facility: Table 1.1 contains details help available special keywords.Table 1.1:  useful keywords available help queries.","code":"\nname <- object\nobject <- name\nq\nq()\n5+8 # +12\n#> [1] 13"},{"path":"intro.html","id":"regular-expressions-in-r-the-basics","chapter":"1 Introducing the R System","heading":"1.8 Regular expressions in R: the basics","text":"follows 1.7(d) care must taken objects assigned names. Furthermore, Global environment R database may easily contain hundreds objects. Therefore, frequent task search patterns names objects e.g. searching object names starting “Figure” ending “.dat”. R function objects() ls() arguments pos pattern specifying position database search pattern characters appearing name (string), respectively. pattern argument can given regular expression. Regular expressions provide method expressing patterns character values used perform various tasks R. considering task extracting certain specified objects database using pattern argument objects() ls().syntax regular expressions follows different rules syntax ordinary R instructions. Moreover syntax differs depending particular implementation program uses. default, R uses set regular expressions similar used UNIX utilities, function arguments available changing default e.g. setting argument perl = TRUE.Regular expressions consist three components: single characters, character classes modifiers operating single characters character classes.Character classes formed using square brackets surrounding set characters matched e.g. [abc123], [-z], [-zA-Z], [0-9a-z]. Note usage dash indicate range values.modifiers operating characters character classes summarized Table 1.2.Table 1.2:  Modifiers regular expressions.role modifiers forming character classes following characters must preceded backslash literal meaning needed:Note R means whenever one characters needs escaped regular expression must preceded double backslashes. Table 1.3 contains examples regular expressions.Table 1.3:  Examples regular expressions.","code":"[  ]  {  }  (  )  ^  $  .  |  *  +  \\"},{"path":"intro.html","id":"exercise-2","chapter":"1 Introducing the R System","heading":"1.8.1 Exercise","text":"Initialize R sessionAttach MASS package second (default) position search path issuing commandGet listing objects package MASS requestingExplain difference objects(pos=2, pat=\".\") objects(pos=2, patt=\"\\\\.\").Obtain listing objects names starting three letters followed digit.Obtain listing objects names ending three letters followed digit.Obtain listing objects names ending period followed exactly three four letters.","code":"\nlibrary(MASS)\nobjects(pos=2)"},{"path":"intro.html","id":"FunctionIntro","chapter":"1 Introducing the R System","heading":"1.9 From single instructions to sets of instructions: introducing R functions","text":"Consider following problem: R data set sleep contains extra hours sleep 20 patients drug treatment. Suppose data set can considered sample normal population. 95% confidence interval required mean extra hours sleep. known confidence interval given \\(\\left[ \\mathbf{\\bar{x}}- \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025}; \\mathbf{\\bar{x}}+ \\left( \\frac{s}{\\sqrt(n)} \\right) t_{n-1,0.025} \\right]\\). problem can solved entering following instructions one one:situations like , problem can addressed using script file writing function. going introduce two methods writing functions R:using script file andusing function fix().","code":"\nsleep.data <- sleep[ ,1]   \nsleep.mean <- mean(sleep.data)   \nsleep.sd <- sd(sleep.data)    \nt.perc <- qt(0.975,19) \nleft.boundary <- sleep.mean - (sleep.sd/sqrt(length(sleep.data)))*t.perc \nright.boundary <- sleep.mean + (sleep.sd/sqrt(length(sleep.data)))*t.perc\ncat (\"[\", left.boundary, \";\", right.boundary, \"]\\n\")\n#> [ 0.5955845 ; 2.484416 ]"},{"path":"intro.html","id":"script","chapter":"1 Introducing the R System","heading":"1.9.1 Writing an R function using a script file","text":"R top menu select File; New script. script window open simultaneous change menu bar.Type instructions script window.Select typed text run script clicking run icon (Ctrl+R).Note shown R console window.Script files ordinary text files. can saved, edited opened using text editor.convention R script files extension xxxx.r.Next, change spelling last two lines right.boundary Right.boundary. Select text run script. Check output appearing console.Script windows can also used creating R function.Create R function changing text shown .Select text notice happens R commands window (console).Give instruction objects() R prompt. happened?can now run function commands window (console) typing:want create run function conf.int script window add instruction conf.func (x = sleep[,1]) last line script window. Now, select line run . Check R console.happen syntax error made script window? Change code script file follows, deliberately deleting last closing parenthesis last line function.Select final line run . Check R console. problem, function executed correctly. code conf.int script file changed, updated object created running console.Select code script run . Check R console. Discuss.","code":"\nconf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)  \n}\nconf.int (x = sleep[,1])\n#> $lower\n#> [1] 0.5955845\n#> \n#> $upper\n#> [1] 2.484416conf.int <- function (x = sleep[,1])\n{\n  x.mean <- mean(x)   \n  x.sd <- sd(x)    \n  t.perc <- qt(0.975,19) \n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc \n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary\n}\nconf.int (x = sleep[,1])"},{"path":"intro.html","id":"writing-an-r-function-using-fix","chapter":"1 Introducing the R System","heading":"1.9.2 Writing an R function using fix()","text":"using fix() built-R text editor can used using script files windows environment notepad preferably notepad++ Tinn-R preferred.following instruction necessary changing default editor used fix():orEnter fix (.func) R prompt. text editor open. Type instructions shown .Close window. Check happens R console.can now run function commands window (console) similar 1.9.1(l), changing name function conf.int .func.happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?happen syntax error made using fix? R prompt type fix (.func). Make deliberate syntax error, e.g. delete last closing brace. Close text editor window. happens console? done correct mistake?Carefully study message R console syntax error occurred function created fix():Carefully study message R console syntax error occurred function created fix():following correct way respond message R evaluator:simply use fix(.func) point, R editor revert version function previous edit.WARNINGBefore writing function solving problem: make sure problem understood exactly; make 100% sure relevant statistical theory understood correctly. Failure careless dangerous!","code":"\noptions(editor = \"notepad\")\noptions(editor = \"full path to the relevant exe file\")function (x = sleep[,1])\n{\n  x.mean <- mean(x)`\n  x.sd <- sd(x)\n  t.perc <- qt(0.975,19)\n  left.boundary <- x.mean - (x.sd/sqrt(length(x)))*t.perc\n  right.boundary <- x.mean + (x.sd/sqrt(length(x)))*t.perc\n  list (lower = left.boundary, upper = right.boundary)\n}> Error in edit(name, file, title, editor) :\n    unexpected 'yyy' occurred on line xx\n    use a command like\n    x <- edit()\n    to recover\nmy.func <- edit()"},{"path":"intro.html","id":"r-projects","chapter":"1 Introducing the R System","heading":"1.10 R Projects","text":"different windows R Data window, Script window, Graph window Menus Dialog windows. current workspace R .GlobalEnv. function getwd() used obtain path current folder’s .Rdata .Rhistory.Note: order see files .Rdata .Rhistory displayed , may necessary turn option “Hide extensions known file types” Windows Explorer.important make provision different workspaces associated different projects. R, different .Rdata files different folders separate different projects. however much gain using Projects RStudio.","code":""},{"path":"intro.html","id":"creating-a-project-in-rstudio","chapter":"1 Introducing the R System","heading":"1.10.1 Creating a project in RStudio","text":"top menu, select File, New Project. Follow prompts create new project, either existing folder creating new folder project, say MyProject.Navigate folder MyProject Windows Explorer.Notice file MyProject.Rproj created folder.double-clicking file open project RStudio. advantages opening project way :workspace file MyProject.Rdata automatically loadedby placing related files like data set folder MyProject subfolder, say MyProject\\data means code use relative folder references, .e. refer MyProject\\mydata.xlsx MyProject\\data\\mydata.xlsx instead something like c:\\users\\myname\\Documents\\MyProject\\data\\mydata.xlsx.major advantage relative references specific computer makes porting devices possiblesharing project collaborator simply entail copying entire contents MyProject folder.","code":""},{"path":"intro.html","id":"a-note-on-computations-by-a-computer","chapter":"1 Introducing the R System","heading":"1.11 A note on computations by a computer","text":"writing R functions important keep mind way computations performed computer always according rules algebra. Two important occurrences given .mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.mathematics following statement incorrect: x = x + k \\(k \\neq 0\\) computer programming statement x = x + k legitimate means x replaced x + k.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.general, treatment integers real numbers R uses floating point representation happens fundamental level R control. Real numbers necessarily exactly represented computer – can approximated. Furthermore, limitations minimum maximum numbers can represented computer. might lead known underflow overflow. detailed discussion appears later chapter.Open R session issue commandfor details numerical environment computer.","code":"\n.Machine"},{"path":"intro.html","id":"built-in-data-sets-in-r","chapter":"1 Introducing the R System","heading":"1.12 Built-in data sets in R","text":"R contains several built-data sets collected package datasets. package automatically attached search path. Type ?datasets R prompt details. Apart data sets several data sets packages also used book.","code":""},{"path":"intro.html","id":"the-use-of-.first-and-.last","chapter":"1 Introducing the R System","heading":"1.13 The use of .First() and .Last()","text":"function .First() executed beginning every R session. works R RStudio.Instead specifyeach time R session initialized, create following function save .Rdata exiting R.ensures Notepad text editor subsequent session.Similar .First() function .Last() can created execution end R session.","code":"\noptions(editor = \"notepad\")\n.First <- function() { options(editor = \"notepad\") }"},{"path":"intro.html","id":"security-an-example-of-the-usage-of-.first","chapter":"1 Introducing the R System","heading":"1.13.1 Security: an example of the usage of .First()","text":".First() facility can used prevent access R workspace setting password protection. can done follows:Create new workspace running example security. workspace create following R functionNow create function:Terminate R session open .Discuss construction usage functions.Can break security?Can make changes security make safe?","code":"\npassword <- function()        # Note the structure of a function\n{ cat(\"Password? \\n\")\n  password <- readline()      # What is the usage of readline()? \n  if (password != \"PASSWORD\") \n    q(save=\"no\")              # The meaning of !=  is \"not equal to\"\n  else (cat(\"You can proceed \\n\"))\n}               \n.First <- function()\n{   #  What must you be careful of?\n   password()\n}"},{"path":"intro.html","id":"options","chapter":"1 Introducing the R System","heading":"1.14 Options","text":"Study result instruction > options() R.","code":""},{"path":"intro.html","id":"creating-pdf-and-html-documents-from-r-output-r-markdown","chapter":"1 Introducing the R System","heading":"1.15 Creating PDF and HTML documents from R output: R Markdown","text":"R package knitr used obtain reproducible results R code form PDF HTML documents. addition knitr, R Markdown can used create HTML, PDF even MS Word documents. Markdown -called markup language plain-text-formating syntax. R Markdown document written markdown contains chunks embedded R code. Although render() function package rmarkdown can used (similar knit() function package knitr), create output document R Markdown .Rmd file, R Markdown typically used conjunction RStudio. top menu, select File, New File, R Markdown… open example.Rmd file providing user structure R Markdown file. illustration, select output format HTML.Edit example.Rmd file contain following:top text editor, click Knit create HTML document. Note arrow, options Knit PDF Knit Word can also chosen. output format also specified line 5 text file output: html_document. chosen PDF output format, output: pdf_document. Typically, R Markdown used reporting, directly incorporating R code output. formal documents Figure Table caption references, tables content, etc. R package bookdown used. Install package replace output statement output:bookdown::pdf_document2. information use bookdown, click .","code":"---\ntitle: \"An Illustration of Some Capabilities of R Markdown\"\nauthor: \"Niel le Roux and Sugnet Lubbe\"\ndate: \"22/01/2021\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## Short description\n\nCode chunks in .Rmd files are delimited with ` ```{r} ` at the top where a chunk \nlabel and any chunk options can appear and  ` ``` ` at the end. In-line R code \nchunks are indicated with single ` `r ` on either side.\n\n*****\n\nHere is an example containing several chunks of code. Note that in the first \nchunk R code is not shown due to the option `echo = FALSE`. In the remaining \nchunks R code is shown due to the option above 'echo = TRUE'.\n\n_Note R code not shown for this chunk._\n\n```{r y, echo=FALSE}\ny <- 1\ny\n```\n\n```{r rnorm}\nrequire(lattice)\nset.seed(123)\nx <- rnorm(1000, 20, 5)\n```\n\nWe analyse data drawn from $\\mathcal{N}(20,25)$. The mean is \n`r round(mean(x),3)`. The following code shows the distribution via a histogram\n\n```{r histexample}\n  hist(x)\n```\n\nand the code below via a boxplot.\n\n```{r boxexample}\n  boxplot(x)\n```\n\nThe first element of \\texttt{x} is `r x[1]`. Note the usage of ` \\texttt{x} ` \nabove.\n\n*two plots side by side (option fig.show='hold')*\n\n```{r side-by-side, fig.show='hold', out.width=\"50%\"}\n  par(mar=c(4,4,0.1,0.1), cex.lab=0.95, cex.axis=0.9, mgp=c(2,0.7,0), \n      tcl=-0.3, las=1)\n  boxplot(x)\n  hist(x,main=\"\")\n```\n\n```{r linear_model}\n  n <- 10\n  x <- rnorm(n)\n  y <- 2*x + rnorm(n)\n  out <- lm(y ~ x)\n  summary(out)$coef\n```"},{"path":"intro.html","id":"command-line-editing","chapter":"1 Introducing the R System","heading":"1.16 Command line editing","text":"Commands given R session stored together commands given previous sessions file .History folder .RData file. R session previous commands can retrieved R prompt pressing arrow keys. previous command can edited using backspace, delete, home, end keys well shortcuts copy paste.","code":""},{"path":"objects.html","id":"objects","chapter":"2 Managing objects","heading":"2 Managing objects","text":"completing introductory chapter now know toinitialize R session;save workspace;open existing project;execute simple tasks R obtain numerical, text graphical results;obtain help.know also everything R can considered kind object. chapter focus properties different objects manage objects workspace.","code":""},{"path":"objects.html","id":"instructions-and-objects-in-r","chapter":"2 Managing objects","heading":"2.1 Instructions and objects in R","text":"","code":""},{"path":"objects.html","id":"general","chapter":"2 Managing objects","heading":"2.1.1 General","text":"Recall thatinstructions separated semi-colon start new lines;instructions separated semi-colon start new lines;# symbol marks rest line comments;# symbol marks rest line comments;default R (primary) prompt >; secondary default prompt +;default R (primary) prompt >; secondary default prompt +;use <- create objects. (equality sign (=) also accepted. However, avoid practice use\n= function arguments;\n<- assignment;\n== comparison / control structures);\nuse <- create objects. (equality sign (=) also accepted. However, avoid practice use= function arguments;<- assignment;== comparison / control structures);use -> assigning left-hand side name right-hand side.use -> assigning left-hand side name right-hand side.use function assign() assigning names objects. (discussed detail Chapter 3)use function assign() assigning names objects. (discussed detail Chapter 3)","code":""},{"path":"objects.html","id":"examples","chapter":"2 Managing objects","heading":"Examples","text":"Assigning numeric vector name “aa”. Assignment takes place global environment.Assigning character vector name “bb”.Note use argument pos, ” ” ’ ’ used characters. careful mixing single quotes double quotes. See .Explain error message .Explain backslash .","code":"\naa <- 1:10\nAa <- seq(from = 1,to = 10,by = 0.01); yy <- c(\"a\",\"b\",\"c\")\nc(\"a\",\"b\",\"c\") -> bb \nassign(\"aa\", rnorm(10), pos = 1)c(\"u\",'v',\"'w'\",\"\"x\"\",'\"y\"',''z'') -> cc\n#> Error in parse(text = input): <text>:1:19: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",\"\"x\n#>                       ^c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z'') -> cc\n#> Error in parse(text = input): <text>:1:31: unexpected symbol\n#> 1: c(\"u\",'v',\"'w'\",'\"x\"','\"y\"',''z\n#>                                   ^\nc(\"u\",'v',\"'w'\",'\"x\"','\"y\"','z') -> cc \ncc\n#> [1] \"u\"     \"v\"     \"'w'\"   \"\\\"x\\\"\" \"\\\"y\\\"\" \"z\"\nobjects()\n#> [1] \"aa\" \"Aa\" \"bb\" \"cc\" \"yy\"\naa\n#>  [1] -1.05008177  0.76758559 -0.48141044  0.27484154\n#>  [5]  0.71086231 -0.06299331  1.08499066  0.44551307\n#>  [9] -0.92539144  1.08684547\nbb\n#> [1] \"a\" \"b\" \"c\"\nobjects()[3]\n#> [1] \"bb\"\nparse(text=objects()[3])\n#> expression(bb)\neval(parse(text=objects()[3]))\n#> [1] \"a\" \"b\" \"c\"\nrm(a,b)\n#> Warning in rm(a, b): object 'a' not found\n#> Warning in rm(a, b): object 'b' not found\nrm(aa,bb)\nobjects()\n#> [1] \"Aa\" \"cc\" \"yy\"\nrm(\"cc\")\nobjects()\n#> [1] \"Aa\" \"yy\""},{"path":"objects.html","id":"objects-in-r","chapter":"2 Managing objects","heading":"2.1.2 Objects in R","text":"Everything object many different types objects.Everything object many different types objects.Study also take note following naming conventions:Study also take note following naming conventions:Allowed upper lower case letters, numbers 0 – 9, full stop(s) underscore(s).Must begin number.R case sensitive .e. John john refer different objects.Use full stops (periods) underscores break name meaningful words.Avoid c, s, t, C, F, T, diff well reserved words naming object.use functions conflicts() find() naming objects. instruction conflicts (detail = TRUE) outputs details whether objects identical names exist search path e.g.instruction find (\"object\") outputs details whether objects name object exist search path e.g.Objects can possess several attributes e.g. mode (way object internally stored)lengthnamesdimclass","code":"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nfind(\"kronecker\")\n#> [1] \"package:methods\" \"package:base\""},{"path":"objects.html","id":"examples-1","chapter":"2 Managing objects","heading":"Examples","text":"Levels show categorical variable (object).Mode numeric tells us categorical variable (object) b internally stored set numeric codes.Special attention given class mode integers. object type integer stored internally effectively integer represented double format.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects R vectors, functions lists. scalars - instead vectors length one used. addition three types, several types objects.Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created session permanently stored .RData file folder containing workspace (unless saved termination).Objects created within function exist long function executed.Objects created within function exist long function executed.Use rm() rm(list = ListOfNames) remove objects workspace.Use rm() rm(list = ListOfNames) remove objects workspace.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.Use objects() equivalently ls() obtain list object names data base (default workspace). Note optional arguments pos, .names pattern specify database considered object names include.can object printed screen?can object printed screen?Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .Warning: new object assigned name already exists working directory old object overwritten without warning retrieved .","code":"\na <- 1:10\nclass(a)\n#> [1] \"integer\"\nb <- factor(c(\"a\",\"b\",\"c\"))\nclass(b)\n#> [1] \"factor\"\nb\n#> [1] a b c\n#> Levels: a b c\nmode(a)\n#> [1] \"numeric\"\nmode(b)\n#> [1] \"numeric\"\nlength(a)\n#> [1] 10\nlength(b)\n#> [1] 3\ndim(a)\n#> NULL\nmat <- matrix(1:12,nrow=4)\nmat\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12\ndim(mat)\n#> [1] 4 3\nmode(mat)\n#> [1] \"numeric\"\nlogic <- c(TRUE,TRUE,FALSE,TRUE)\nmode(logic)\n#> [1] \"logical\"\nclass(logic)\n#> [1] \"logical\"\nx <- 5\ny <- 5L\ntypeof(x)\n#> [1] \"double\"\ntypeof(y)\n#> [1] \"integer\"\nclass(x)\n#> [1] \"numeric\"\nclass(y)\n#> [1] \"integer\"\nmode(x)\n#> [1] \"numeric\"\nmode(y)\n#> [1] \"numeric\""},{"path":"objects.html","id":"data-in-r","chapter":"2 Managing objects","heading":"2.1.3 Data in R","text":"R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.R several built-data sets. Use ?datasets /library(help= \"datasets\") details. Note two instructions return different information.Study help file c().Study help file c().Study help file scan().Study help file scan().Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.Study help files read.table() read.csv(). Care must taken data containing characters (text) categorical variables. Reading data R discussed detail Chapter 9.","code":""},{"path":"objects.html","id":"generation-of-data","chapter":"2 Managing objects","heading":"2.1.4 Generation of data","text":"Study operators functions :, seq(), rep(), rev(), rnorm(), runif() following instructions:function rmvnorm() generating multivariate normal samples mvtnorm R package. package must first loaded using instructionAlternatively, generating multivariate normally data also function mvrnorm() R package MASS.","code":"\n1:10\n8:3\nseq(from=1, to=10, length=10)\nseq(from=2, to=10, length=5)\nrev(10:1)\nrnorm (20, mean=50, sd=5)\nrunif (10, min=1, max=3)\nlibrary(mvtnorm)"},{"path":"objects.html","id":"introduction-to-functions-in-r","chapter":"2 Managing objects","heading":"2.2 Introduction to functions in R","text":"introduced R functions section 1.9. basic structure R function follows:function func.name() called, code { } executed.arguments function can inspected using commandThe function str(x) provides information object x. x function output similar args(). Default values given function arguments using construction (argument name = value). good programming practice make extensively use comments describe arguments / particular chunk code .\nusage following function:function argument called dummy argument. happen object working directory?Functions called replacing formal arguments actual arguments. can done position name. Hint: less error prone call functions using named arguments. Create following functionExecute following function calls explain outputNote use prompt() package.skeleton() provide new function help-file.final expression R function automatically returned function completes execution.function consists single line, can written succinctlyor even without { }:general, functions consist lines code often multiple outputs returned. single output object needs returned, object can created last line codeor return() statement:general, outputs combined returned list. final expression function creates list object:return multiple outputs, list simply extended shown :good practice name output objects list, :Finally, place output object processing, function assigned object name:","code":"func.name <- function(list of arguments)\n{\n  # R code\n}args(name of function)\ncube <- function(a) a^3\nDemofunc <- function(vec = 1:10, m,k)\n { # Function to subtract a specified constant from\n   # each element of a given vector and after subtraction\n   # divide each element by a second specified constant.\n   # The result of the above transformation is returned.\n (vec - m)/ k \n}\nDemofunc(3, 2, 5)\n#> [1] 0.2\nDemofunc(2,5)\n#> Error in Demofunc(2, 5): argument \"k\" is missing, with no default\nDemofunc(m = 2, k = 5)\n#>  [1] -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6\nDemofunc(m = 2, k = 5, vec = 1:100)\n#>   [1] -0.2  0.0  0.2  0.4  0.6  0.8  1.0  1.2  1.4  1.6  1.8\n#>  [12]  2.0  2.2  2.4  2.6  2.8  3.0  3.2  3.4  3.6  3.8  4.0\n#>  [23]  4.2  4.4  4.6  4.8  5.0  5.2  5.4  5.6  5.8  6.0  6.2\n#>  [34]  6.4  6.6  6.8  7.0  7.2  7.4  7.6  7.8  8.0  8.2  8.4\n#>  [45]  8.6  8.8  9.0  9.2  9.4  9.6  9.8 10.0 10.2 10.4 10.6\n#>  [56] 10.8 11.0 11.2 11.4 11.6 11.8 12.0 12.2 12.4 12.6 12.8\n#>  [67] 13.0 13.2 13.4 13.6 13.8 14.0 14.2 14.4 14.6 14.8 15.0\n#>  [78] 15.2 15.4 15.6 15.8 16.0 16.2 16.4 16.6 16.8 17.0 17.2\n#>  [89] 17.4 17.6 17.8 18.0 18.2 18.4 18.6 18.8 19.0 19.2 19.4\n#> [100] 19.6\nmy.func <- function(a=5) \n{  a+2\n}\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) {  a+2  }\nmy.func()\n#> [1] 7\nmy.func <- function(a=5) a+2\nmy.func()\n#> [1] 7\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     number/a\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     return(number/a)\n  }\nmy.func()\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number, number/a)\n  }\nmy.func()\n#> [[1]]\n#> [1] 64\n#> \n#> [[2]]\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nmy.func()\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8\nmy.func <- function(a=5)\n  {  number <- (a+3)^2\n     list(number = number, ratio = number/a)\n  }\nout <- my.func()\nout\n#> $number\n#> [1] 64\n#> \n#> $ratio\n#> [1] 12.8"},{"path":"objects.html","id":"findData","chapter":"2 Managing objects","heading":"2.3 How R finds data","text":"order understand objects found R necessary understanding conceptsEnvironmentFrameSearch pathParent environmentInheritance.mechanism R uses organize objects based frames environments. frame collection named objects environment consists frame together pointer reference another environment called parent environment. Environments nested parent environment environment directly contains current environment. start R session workspace created always associate environment, global environment. global environment occupies first position search path accessed call globalenv(). Packages databases can added search path call attach() removed search path call detach().R package? difference installing loading package?Work following example:attach package MASSBy default MASS attached second position search path.use detach remove MASS search path.obtain parent global environmentWhen R evaluator looks object find name global environment search parent global environment. carry search along search path first occurrence name. name found return message Error: object 'xx' found. usage double colon :: triple colon ::: access intended object one object name exist search path. two operators use namespace facility R packages. namespace package allow creator package hide functions data meant internal use; provides way operators :: ::: object within particular package. Thus namespace prevent functions breaking user selects name clashes one package. double-colon operator :: selects objects particular namespace. functions exported package can retrieved way. triple-colon operator ::: acts like double-colon operator also allows access hidden objects. Packages often inter-dependent, loading one may cause others automatically loaded. automatically loaded packages added search list.note function call getAnywhere(), searches multiple packages can used finding hidden objects. function called, R creates new (temporary) environment enclosed current (calling) environment. Objects created new environment available parent environment dies function terminates. Objects calling environment available use new environment created function called.Similarly, expression evaluated hierarchy environments created. Search objects continue hierarchy necessary global environment onto search path.Study use arguments pos, .names, pattern function objects().Study behaviour functions conflicts() exists() examples :Study code carefully explain inheritance .example leads conclusion complicated stage. behaviour become clear work coming chapters.Direct access objects search path can achieved function get().\nfunction get() takes first argument name object character string. optional argument pos can used specify search list look object. illustration explain outcomes following function calls:Instead attaching databases function () often preferred. Discuss usage () referring instructions:","code":"\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nlibrary (MASS)\nsearch()\n#>  [1] \".GlobalEnv\"        \"package:MASS\"     \n#>  [3] \"package:stats\"     \"package:graphics\" \n#>  [5] \"package:grDevices\" \"package:utils\"    \n#>  [7] \"package:datasets\"  \"package:methods\"  \n#>  [9] \"Autoloads\"         \"package:base\"\ndetach(\"package:MASS\")\nsearch()\n#> [1] \".GlobalEnv\"        \"package:stats\"    \n#> [3] \"package:graphics\"  \"package:grDevices\"\n#> [5] \"package:utils\"     \"package:datasets\" \n#> [7] \"package:methods\"   \"Autoloads\"        \n#> [9] \"package:base\"\nparent.env(.GlobalEnv)\n#> <environment: package:stats>\n#> attr(,\"name\")\n#> [1] \"package:stats\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.5.1/library/stats\"\nparent.env(parent.env(.GlobalEnv))\n#> <environment: package:graphics>\n#> attr(,\"name\")\n#> [1] \"package:graphics\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.5.1/library/graphics\"\nparent.env(parent.env(parent.env(.GlobalEnv)))\n#> <environment: package:grDevices>\n#> attr(,\"name\")\n#> [1] \"package:grDevices\"\n#> attr(,\"path\")\n#> [1] \"C:/Program Files/R/R-4.5.1/library/grDevices\"\nenvironmentName(parent.env(parent.env(parent.env(.GlobalEnv))))\n#> [1] \"package:grDevices\"\nconflicts()\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nconflicts(detail=TRUE)\n#> $`package:graphics`\n#> [1] \"plot\"\n#> \n#> $`package:methods`\n#> [1] \"body<-\"    \"kronecker\"\n#> \n#> $`package:base`\n#> [1] \"body<-\"    \"kronecker\" \"plot\"\nexists(\"kronecker\")\n#> [1] TRUE\nexists(\"kronecker\", where = 1)\n#> [1] TRUE\nexists(\"kronecker\", where = 1, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 2)\n#> [1] TRUE\nexists(\"kronecker\", where = 2, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 7, inherits = FALSE)\n#> [1] TRUE\nexists(\"kronecker\", where = 8, inherits = FALSE)\n#> [1] FALSE\nexists(\"kronecker\", where = 9, inherits = FALSE)\n#> [1] TRUE\nsapply(search(), function(x) exists(\"kronecker\", where = x, inherits=FALSE))\n#>        .GlobalEnv     package:stats  package:graphics \n#>             FALSE             FALSE             FALSE \n#> package:grDevices     package:utils  package:datasets \n#>             FALSE             FALSE             FALSE \n#>   package:methods         Autoloads      package:base \n#>              TRUE             FALSE              TRUE\nget (\"%o%\") \n#> function (X, Y) \n#> outer(X, Y)\n#> <bytecode: 0x000002397148f060>\n#> <environment: namespace:base>\nmean <- mean (rnorm (1000))\nget (mean)\n#> Error in get(mean): invalid first argument\nget (\"mean\") \n#> [1] -0.006721025\nget (\"mean\", pos = 1) \n#> [1] -0.006721025\nget (\"mean\", pos = 2)\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000002396f50d530>\n#> <environment: namespace:base>\nrm (mean)\nwith (beaver1, mean(time))\n#> [1] 1312.018\nwith (beaver2, mean(time))\n#> [1] 1446.2"},{"path":"objects.html","id":"the-organisation-of-data-data-structures","chapter":"2 Managing objects","heading":"2.4 The organisation of data (data structures)","text":"Study help files list(), matrix(), data.frame() c() carefully.list created function list(). list basic means storing collection data objects R modes /lengths objects different. List elements accessed using [[ ]] $ objects named. List objects named using constructionand elements retrieved using instructionA matrix R rectangular collection data, mode (e.g. numeric, character/text logical). formed constructionMatrix elements accessed using .matrix[,j]. functions nrow(), ncol(), dim(), dimnames(), colnames() rownames() useful working matrices.dataframe also rectangular collection data columns can different modes. can regarded cross list matrix. Dataframes constructed function data.frame().Study help files functions.","code":"\nmy.list <- list(name1 = 1:10, name2 = mean)\nmy.list\n#> $name1\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> $name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000002396f50d530>\n#> <environment: namespace:base>\nmy.list[[2]]\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000002396f50d530>\n#> <environment: namespace:base>\nmy.list$name2\n#> function (x, ...) \n#> UseMethod(\"mean\")\n#> <bytecode: 0x000002396f50d530>\n#> <environment: namespace:base>\nmy.matrix <- matrix(1:12, ncol=3, nrow=4, byrow=FALSE)\nmy.matrix\n#>      [,1] [,2] [,3]\n#> [1,]    1    5    9\n#> [2,]    2    6   10\n#> [3,]    3    7   11\n#> [4,]    4    8   12"},{"path":"objects.html","id":"time-series","chapter":"2 Managing objects","heading":"2.5 Time series","text":"Study usage function ts().","code":""},{"path":"objects.html","id":"the-functions-as.xxx-and-is.xxx","chapter":"2 Managing objects","heading":"2.6 The functions as.xxx() and is.xxx()","text":"function .xxx() transforms object best possible specified type e.g. .matrix(mydata) transforms numerical dataframe numerical matrix. .xxx() tests argument certain type e.g. .matrix(mydata) evaluates false mydata satisfy conditions matrix.","code":""},{"path":"objects.html","id":"simple-manipulations-numbers-and-vectors","chapter":"2 Managing objects","heading":"2.7 Simple manipulations; numbers and vectors","text":"Explain vector calculations recycling principle referring example .Logical vectors. Explain behaviour instruction belowMissing values: NA (indicate missing value data), NaN (number)Character vectors: see section 3.5.11Character vectors: see section 3.5.11Subscripting vectors: see section 5.1Subscripting vectors: see section 5.1","code":"\nc(1,3,5,9) + c(1,2,3)\n#> Warning in c(1, 3, 5, 9) + c(1, 2, 3): longer object length\n#> is not a multiple of shorter object length\n#> [1]  2  5  8 10\nsum (c (TRUE, FALSE, TRUE, TRUE, FALSE))\n#> [1] 3\n10/0\n#> [1] Inf\n0/0\n#> [1] NaN"},{"path":"objects.html","id":"objects-their-modes-and-attributes","chapter":"2 Managing objects","heading":"2.8 Objects, their modes and attributes","text":"Vector elements must mode: logical, numeric, complex, characterEmpty object; created (e.g. xx <- numeric()) components may added (e.g. xx[5] <- 22)Getting setting attributes: functions attr() attributes()Class object function unclass() removing class.","code":""},{"path":"objects.html","id":"representation-of-objects","chapter":"2 Managing objects","heading":"2.9 Representation of objects","text":"already seen representation object can obtained calling (entering) name:often convenient full representation returned object . functions head(), str() summary() available extracting partial representation object:many R functions provided getting information R object represents. functions like mode(), class(), length(), levels(), .xxx() .xxx() already encountered others given chapters come.","code":"\ncars\n#>    speed dist\n#> 1      4    2\n#> 2      4   10\n#> 3      7    4\n#> 4      7   22\n#> 5      8   16\n#> 6      9   10\n#> 7     10   18\n#> 8     10   26\n#> 9     10   34\n#> 10    11   17\n#> 11    11   28\n#> 12    12   14\n#> 13    12   20\n#> 14    12   24\n#> 15    12   28\n#> 16    13   26\n#> 17    13   34\n#> 18    13   34\n#> 19    13   46\n#> 20    14   26\n#> 21    14   36\n#> 22    14   60\n#> 23    14   80\n#> 24    15   20\n#> 25    15   26\n#> 26    15   54\n#> 27    16   32\n#> 28    16   40\n#> 29    17   32\n#> 30    17   40\n#> 31    17   50\n#> 32    18   42\n#> 33    18   56\n#> 34    18   76\n#> 35    18   84\n#> 36    19   36\n#> 37    19   46\n#> 38    19   68\n#> 39    20   32\n#> 40    20   48\n#> 41    20   52\n#> 42    20   56\n#> 43    20   64\n#> 44    22   66\n#> 45    23   54\n#> 46    24   70\n#> 47    24   92\n#> 48    24   93\n#> 49    24  120\n#> 50    25   85\nhead(cars)\n#>   speed dist\n#> 1     4    2\n#> 2     4   10\n#> 3     7    4\n#> 4     7   22\n#> 5     8   16\n#> 6     9   10\nsummary(cars)\n#>      speed           dist       \n#>  Min.   : 4.0   Min.   :  2.00  \n#>  1st Qu.:12.0   1st Qu.: 26.00  \n#>  Median :15.0   Median : 36.00  \n#>  Mean   :15.4   Mean   : 42.98  \n#>  3rd Qu.:19.0   3rd Qu.: 56.00  \n#>  Max.   :25.0   Max.   :120.00\nstr(cars)\n#> 'data.frame':    50 obs. of  2 variables:\n#>  $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n#>  $ dist : num  2 10 4 22 16 10 18 26 34 17 ...\nlength(cars) \n#> [1] 2\nlength(as.matrix(cars))\n#> [1] 100\ndim(cars)\n#> [1] 50  2\nis.matrix(cars)\n#> [1] FALSE\nis.data.frame(cars)\n#> [1] TRUE\nis.list(cars)\n#> [1] TRUE\nmode(cars)\n#> [1] \"list\"\nclass(cars)\n#> [1] \"data.frame\"\nlevels(cars)\n#> NULL"},{"path":"objects.html","id":"exercise-3","chapter":"2 Managing objects","heading":"2.10 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"objects.html","id":"exercise-4","chapter":"2 Managing objects","heading":"2.10.1 Exercise","text":"According central limit theorem (CLT) distribution sum (mean) independently, identically distributed stochastic variables converges normal distribution increase number variables. binomial distribution can expressed sum independently, identically distributed Bernoulli stochastic variables therefore converges distribution normal distribution. lognormal distribution contrast expressed sum.Make use function rbinom() generate sample size 10 binomial distribution modelling 20 coin flips probability \\(0.4\\) returning “heads”. Use function hist() graph results. Repeat sample sizes \\(50\\), \\(100\\), \\(1000\\), \\(10000\\) \\(100000\\).\nRepeat whole study success probability \\(0.5\\), \\(0.3\\), \\(0.1\\) \\(0.05\\). Discuss findings.Now repeat exercise using () lognormal distribution function rlnorm() (b) uniform distribution interval \\([10; 25]\\) function runif(min = 10, max = 25). Comment findings.","code":""},{"path":"objects.html","id":"exercise-5","chapter":"2 Managing objects","heading":"2.10.2 Exercise","text":"Assume random sample size \\(n\\) available certain distribution. bootstrap sample obtained sampling replacement sample size \\(n\\) given sample. One uses bootstrap obtain estimate standard error statistic. example, bootstrap estimate standard error \\(\\bar{X}\\) can obtained follows:Generate independently \\(B\\) bootstrap samples.Calculate mean B bootstrap samples, .e. calculate \\(\\bar{x}_1^*, \\bar{x}_2^*, \\dots, \\bar{x}_B^*\\).Calculate \\(\\bar{\\bar{x}} = \\frac{1}{B} \\sum_{=1}^{B}{\\bar{x}_i^*}\\).Calculate \\(\\hat{se}(b) = \\sqrt{\\frac{1}{B-1} \\sum_{=1}^{B}{(\\bar{x}_i^*-\\bar{\\bar{x}})^2}}\\).Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Generate random sample size \\(25\\) \\(normal (100; 255)\\) distribution.Use R obtain graphical representations statistics characteristics sample.Use R obtain graphical representations statistics characteristics sample.Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary instructions R obtain bootstrap estimates standard error sample mean well sample median. Use \\(50\\), \\(100\\), \\(500\\) \\(1000\\) \\(B\\) (number bootstrap repetitions). answers compare theoretically expected?Program necessary R instructions obtain graphical representations bootstrap distribution (c).Program necessary R instructions obtain graphical representations bootstrap distribution (c).","code":""},{"path":"objects.html","id":"exercise-6","chapter":"2 Managing objects","heading":"2.10.3 Exercise","text":"Generate random sample size \\(50\\) multivariate normal distribution mean vector \\((118, 396, 118, 400)\\) covariance matrix variances variables given \\(778\\), \\(1810\\), \\(580\\) \\(2535\\) respectively. Variables 1 2 covariance \\(-642.5\\) variables 3 4 covariance \\(-670\\). variables uncorrelated. Store sample matrix object program necessary R instructions calculate sample covariance matrix sample mean vector.","code":""},{"path":"objects.html","id":"exercise-7","chapter":"2 Managing objects","heading":"2.10.4 Exercise","text":"Execute instruction set.seed(101023).Next, obtain \\(400\\) random \\(normal (0; 1)\\) values arrange matrix \\(20\\) rows \\(20\\) columns. Finally, write R function calculate return () sum elements matrix, (ii) eigenvalues matrix, (iii) inverse matrix well (iv) rank matrix making use eigenvalues. Hint: Read help functions eigen() solve().)","code":""},{"path":"operators.html","id":"operators","chapter":"3 R operators and functions","heading":"3 R operators and functions","text":"completing Chapters 1 2 assumed following now familiar:communicate R;manage workspaces;perform simple tasks using R.chapter take closer look behaviour commonR operatorsR functions.","code":""},{"path":"operators.html","id":"arithmetic-operators","chapter":"3 R operators and functions","heading":"3.1 Arithmetic operators","text":"Study use operators Table 3.1.Table 3.1:  Arithmetic operators.Note arithmetic operators also functions. follows studying following examples:Rules operator expressions vector arguments.Study results following R instructions.Explain following instructions output R:examples illustrated R uses vectorized arithmetic .e. operates vectors wholes. Sometimes recycling principle applied without warning. good R programming habit make use vectorizing calculations possible. effect recycling principle must kept mind since might lead unwanted results.Missing values, infinity “number”.missing value R denoted NA. result computation involving NAs always NA e.g.result computation represented number e.g. 0/0 denoted NaN.\nNote: computational results differently reported R corresponding algebraic equivalents, 5/0 R given Inf algebraically undefined.Scientific notationR uses decimal notation well scientific notation arithmetic calculations. Scientific notation confused \\(exp()\\).numbers represented computer’s memory? implications ?Computers use /(1/0) switches encoding information. single switch called bit group eight bits called byte. single integer represented exactly computer fixed number bytes .e. 32 64 bits. several schemes according integers represented bits computer. representation computer takes place level R control R stores information computing environment object .Machine. element .Machine$integer.max returns largest integer can represented computer R running e.g.Although method representing integers strings bits provides efficient way storing integers computer R usually treats integers similar real numbers using floating point representation. binary floating point notation number x written sequence zeros ones (mantissa) times two exponent say \\(m\\): \\(x=b_0 b_1 b_2…×2^m\\) \\(b_0=1\\) except \\(x=0\\).practice limited number \\(b\\)’s available exponent also limited therefore, general, real numbers can represented exactly computer – can approximated. smallest number \\(x\\) \\(1 + x\\) can distinguished \\(1\\) computer called machine epsilon. R can obtained .Machine$double.eps e.g.Although floating point representation allows computation small (magnitude) large numbers limitations can lead underflow overflow can disastrous consequences practice. Writing good code R must take seriously account.","code":"\n3+7\n#> [1] 10\n\"+\"(3,7)\n#> [1] 10\n17 %% 3\n#> [1] 2\n\"%%\"(17,3)\n#> [1] 2\ncars [,2] * 12 * 25.4 / 1000\n#>  [1]  0.6096  3.0480  1.2192  6.7056  4.8768  3.0480  5.4864\n#>  [8]  7.9248 10.3632  5.1816  8.5344  4.2672  6.0960  7.3152\n#> [15]  8.5344  7.9248 10.3632 10.3632 14.0208  7.9248 10.9728\n#> [22] 18.2880 24.3840  6.0960  7.9248 16.4592  9.7536 12.1920\n#> [29]  9.7536 12.1920 15.2400 12.8016 17.0688 23.1648 25.6032\n#> [36] 10.9728 14.0208 20.7264  9.7536 14.6304 15.8496 17.0688\n#> [43] 19.5072 20.1168 16.4592 21.3360 28.0416 28.3464 36.5760\n#> [50] 25.9080\n7%/%3\n#> [1] 2\n7%%3\n#> [1] 1\nmatrix(1,nrow=4,ncol=4) * matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    3    3    3    3\n#> [2,]    3    3    3    3\n#> [3,]    3    3    3    3\n#> [4,]    3    3    3    3\nmatrix(1,nrow=4,ncol=4) %*% matrix(3,nrow=4,ncol=4)\n#>      [,1] [,2] [,3] [,4]\n#> [1,]   12   12   12   12\n#> [2,]   12   12   12   12\n#> [3,]   12   12   12   12\n#> [4,]   12   12   12   12\n1:12 + 1:3\n#>  [1]  2  4  6  5  7  9  8 10 12 11 13 15\n1:10 + 1:2\n#>  [1]  2  4  4  6  6  8  8 10 10 12\n1:10 + 1:3\n#> Warning in 1:10 + 1:3: longer object length is not a\n#> multiple of shorter object length\n#>  [1]  2  4  6  5  7  9  8 10 12 11\nmean(c(1,3,NA,12,5))\n#> [1] NA\n0/0\n#> [1] NaN\n5/0\n#> [1] Inf\n-5/0\n#> [1] -Inf\n5/(-0)\n#> [1] -Inf\n60000000\n#> [1] 6e+07\n1/6000000\n#> [1] 1.666667e-07\nexp(15)\n#> [1] 3269017\nexp(-15)\n#> [1] 3.059023e-07\n.Machine$integer.max\n#> [1] 2147483647\n.Machine$double.eps\n#> [1] 2.220446e-16"},{"path":"operators.html","id":"logical-operators","chapter":"3 R operators and functions","heading":"3.2 Logical operators","text":"Logical operators result TRUE, FALSE NA. Study use logical operators Table 3.2. Warning: perfectly legitimate writeit incorrect specifyThe correct code latter case isWhat consequences code? Also take note functions () (). two functions useful combining logical objects. Give necessary instructions carry following tasks:Check states state.x77 data set populations illiteracy rate larger \\(1.6\\) Murder rate \\(10.0\\).Check least one state income greater \\(\\$5000\\) life expectancy less \\(70.0\\) years.Check states income \\(\\$5000\\) illiteracy \\(2.0\\).meant control logical operator?Table 3.2:  Logical operators.Carry instructions:Comment .result sum(c(TRUE, !FALSE, FALSE, TRUE, TRUE))?result sum(c(TRUE, !FALSE, FALSE, NA, TRUE)) ?Explain","code":"\nx[x == -1] <- 0\nx[x == 1] <- 0 x[x == NA] <- 0\nx[x = = NaN] <- 0 \nx[is.na(x)] <- 0\nx[is.nan(x)] <- 0\nmata <- matrix(1:4, ncol = 2)\nmatb <- matrix(c(10, 20, 30, 40), ncol = 2)\nmata\n#>      [,1] [,2]\n#> [1,]    1    3\n#> [2,]    2    4\nmatb\n#>      [,1] [,2]\n#> [1,]   10   30\n#> [2,]   20   40\nmata>1 & matb>1\n#>       [,1] [,2]\n#> [1,] FALSE TRUE\n#> [2,]  TRUE TRUE\nmata>1 | matb>1\n#>      [,1] [,2]\n#> [1,] TRUE TRUE\n#> [2,] TRUE TRUE\nmata>1 && matb>1\n#> Error in mata > 1 && matb > 1: 'length = 4' in coercion to 'logical(1)'\nmata>1 || matb>1\n#> Error in mata > 1 || matb > 1: 'length = 4' in coercion to 'logical(1)'"},{"path":"operators.html","id":"the-operators-----and","chapter":"3 R operators and functions","heading":"3.3 The operators <-, <<- and ~","text":"considering use operators answer following:happen object aa working directory within function following assignment made aa <- 20?happen object aa working directory within function following assignment made aa <- 20?Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.Now, study help file <<- answer () operator <- replaced operator <<-. Warning: use <<- carefully.tilde operator used modelling functions, e.g. lm (length ~ age).tilde operator used modelling functions, e.g. lm (length ~ age).","code":""},{"path":"operators.html","id":"operator-precedence","chapter":"3 R operators and functions","heading":"3.4 Operator precedence","text":"Study precedence rules summarized Table 3.4.1. rules followed shown Table 3.3 top bottom left right. Note use ofparentheses ( ) function arguments changing precedence,braces { } demarcating blocks instructionsand brackets [ ] subscripting.correct way extracting fifth element sequence like 1:20 isTable 3.3:  Precedence rules.Explain result following R instructions:","code":"\n(1:20)[5]\n#> [1] 5\n20 / 4 * 12 ^2 - 6 + 1\n#> [1] 715\n(20 / 4) * (12 ^2) + (-6 + 14)\n#> [1] 728\n20 / 4 * 12 ^(2 - 6 + 14)\n#> [1] 309586821120\n20 / 4 * (12 ^2 - 6 + 14)\n#> [1] 760"},{"path":"operators.html","id":"some-mathematical-functions","chapter":"3 R operators and functions","heading":"3.5 Some mathematical functions","text":"","code":""},{"path":"operators.html","id":"general-mathematical-functions","chapter":"3 R operators and functions","heading":"3.5.1 General mathematical functions","text":"abs(), exp(), log(x, base = exp(1)), log10(), gamma(), sign(), sqrt()","code":""},{"path":"operators.html","id":"trigonometric-functions","chapter":"3 R operators and functions","heading":"3.5.2 Trigonometric functions","text":"See Table 3.4.Table 3.4:  Trigonometric functions.","code":""},{"path":"operators.html","id":"complex-numbers","chapter":"3 R operators and functions","heading":"3.5.3 Complex numbers","text":"Arg(), Conj(), Mod(), Re(), Im()","code":""},{"path":"operators.html","id":"functions-for-rounding-and-truncating","chapter":"3 R operators and functions","heading":"3.5.4 Functions for rounding and truncating","text":"round(), ceiling(), floor(), trunc()Study help files functions. Check arguments.","code":""},{"path":"operators.html","id":"functions-for-matrices","chapter":"3 R operators and functions","heading":"3.5.5 Functions for matrices","text":"Study Table 3.5 detail.Two functions play important role matrix calculations functions rbind() cbind() concatenating matrices row-wise column-wise. Also revise functions matrix(), dim(), dimnames(), colnames(), rownames() well scan() read.table().Table 3.5:  Functions matrices.function chol() performs Cholesky decomposition square, symmetric, positive definite matrix \\(\\mathbf{}=\\mathbf{U}'\\mathbf{U}\\) \\(\\mathbf{U}\\) upper triangular matrix.function chol() performs Cholesky decomposition square, symmetric, positive definite matrix \\(\\mathbf{}=\\mathbf{U}'\\mathbf{U}\\) \\(\\mathbf{U}\\) upper triangular matrix.function crossprod (, B) returns matrix \\(\\mathbf{'B}\\).function crossprod (, B) returns matrix \\(\\mathbf{'B}\\).function diag(arg) performs various actions depending argument: arg positive integer diag(arg) returns identity matrix given size; arg vector diag(arg) returns diagonal matrix diagonal elements respective elements given vector; arg matrix diag(arg) returns vector containing diagonal elements given matrix.function diag(arg) performs various actions depending argument: arg positive integer diag(arg) returns identity matrix given size; arg vector diag(arg) returns diagonal matrix diagonal elements respective elements given vector; arg matrix diag(arg) returns vector containing diagonal elements given matrix.difference diag() diag(diag()) square matrix?difference diag() diag(diag()) square matrix?function eigen() operates square matrix returns list named elements values vectors containing respectively, eigenvalues eigenvectors. Study help file eigen() carefully.function eigen() operates square matrix returns list named elements values vectors containing respectively, eigenvalues eigenvectors. Study help file eigen() carefully.function kronecker() returns Kronecker product \\(\\mathbf{} \\otimes \\mathbf{B}\\) matrices \\(\\mathbf{}\\) \\(\\mathbf{B}\\).function kronecker() returns Kronecker product \\(\\mathbf{} \\otimes \\mathbf{B}\\) matrices \\(\\mathbf{}\\) \\(\\mathbf{B}\\).function outer (x, y, f) operates two vectors \\(x:n\\times 1\\) \\(y:p\\times 1\\) return matrix size \\(n \\times p\\) \\(ij\\)th element result applying function f x[] y[j]. default f *.function outer (x, y, f) operates two vectors \\(x:n\\times 1\\) \\(y:p\\times 1\\) return matrix size \\(n \\times p\\) \\(ij\\)th element result applying function f x[] y[j]. default f *.function scale() three arguments: matrix first argument; second argument center third argument scale. center = FALSE, centring columns matrix argument performed, set TRUE (default), mean value column subtracted respective columns, given vector values values subtracted respective columns. scale = FALSE, scaling columns matrix argument performed, set TRUE (default) column divided standard deviation, given vector values column divided corresponding value.function scale() three arguments: matrix first argument; second argument center third argument scale. center = FALSE, centring columns matrix argument performed, set TRUE (default), mean value column subtracted respective columns, given vector values values subtracted respective columns. scale = FALSE, scaling columns matrix argument performed, set TRUE (default) column divided standard deviation, given vector values column divided corresponding value.function solve (, b) used solving equation \\(\\mathbf{Ax=b}\\) \\(\\mathbf{x}\\), \\(\\mathbf{b}\\) can either vector matrix \\(\\mathbf{}\\) square matrix. argument b missing taken identity matrix inverse argument returned.function solve (, b) used solving equation \\(\\mathbf{Ax=b}\\) \\(\\mathbf{x}\\), \\(\\mathbf{b}\\) can either vector matrix \\(\\mathbf{}\\) square matrix. argument b missing taken identity matrix inverse argument returned.function svd() returns singular value decomposition matrix argument \\(\\mathbf{=UDV}'\\). returns list three components: u orthogonal orthonormal matrix \\(\\mathbf{U}\\); d vector containing ordered singular values rectangular matrix \\(\\mathbf{}\\); v orthogonal orthonormal matrix \\(\\mathbf{V}\\).function svd() returns singular value decomposition matrix argument \\(\\mathbf{=UDV}'\\). returns list three components: u orthogonal orthonormal matrix \\(\\mathbf{U}\\); d vector containing ordered singular values rectangular matrix \\(\\mathbf{}\\); v orthogonal orthonormal matrix \\(\\mathbf{V}\\).function qr() performs QR decomposition arbitrary matrix \\(\\mathbf{M=QR}\\) \\(\\mathbf{Q}\\) orthogonal matrix \\(\\mathbf{R}\\) upper triangular matrix. Study help file qr() full details usages function. Note matrices \\(\\mathbf{Q}\\) \\(\\mathbf{R}\\) can obtained directly calling qr.Q(qr()) qr.R(qr()), respectively.function qr() performs QR decomposition arbitrary matrix \\(\\mathbf{M=QR}\\) \\(\\mathbf{Q}\\) orthogonal matrix \\(\\mathbf{R}\\) upper triangular matrix. Study help file qr() full details usages function. Note matrices \\(\\mathbf{Q}\\) \\(\\mathbf{R}\\) can obtained directly calling qr.Q(qr()) qr.R(qr()), respectively.meaning following instructions?rbind(,b); rbind(1,x); rbind(= 1:5,b = 10:14,c=20:24); cbind( = 1:5, b=10:14, c=20:24)Write function calculate determinant square matrix. Name function det.() order distinguish built R function det().Write function calculate determinant square matrix. Name function det.() order distinguish built R function det().user satisfied function, often necessary available R projects. useful assign functions data base folder. Use function assign (x, object, pos = , envir = ) store function det.() R functions folder. argument x assign() character string assigning name object. function remove (list objects names, pos = , envir = ) can used remove objects database. Hint: First create file use attach() add R search path.user satisfied function, often necessary available R projects. useful assign functions data base folder. Use function assign (x, object, pos = , envir = ) store function det.() R functions folder. argument x assign() character string assigning name object. function remove (list objects names, pos = , envir = ) can used remove objects database. Hint: First create file use attach() add R search path.Study save() works.Study attach() works.Study assign() works.Explain use argument list=objects(2). summarize: construction NAME <- object simple way assign object name. form assignment always takes place global environment (workspace). Assignment can also performed using functions save() assign() illustrated . latter form assignment complicated assignment restricted global environment.result function gamma(x) \\((x-1)!\\) \\(x\\) non-negative whole number. Now write function fact() calculate \\(x!\\). function must make provision \\(0!\\) well negative number fraction read mistake. Hint: First study usage statement requesting help ?Control, recall Table 1.1. Store function folder R functions. go make fact() det.() available R project?result function gamma(x) \\((x-1)!\\) \\(x\\) non-negative whole number. Now write function fact() calculate \\(x!\\). function must make provision \\(0!\\) well negative number fraction read mistake. Hint: First study usage statement requesting help ?Control, recall Table 1.1. Store function folder R functions. go make fact() det.() available R project?function lgamma(x) returns logarithms \\(\\Gamma(x)\\). Write function calculate value \\(f(n) = \\frac{\\Gamma(\\frac{n-1}{2})}{\\Gamma(\\frac{1}{2})\\Gamma(\\frac{n-2}{2})}\\). Calculate value \\(f(n)\\) \\(n = -10, 10, 100, 500, 1000\\).function lgamma(x) returns logarithms \\(\\Gamma(x)\\). Write function calculate value \\(f(n) = \\frac{\\Gamma(\\frac{n-1}{2})}{\\Gamma(\\frac{1}{2})\\Gamma(\\frac{n-2}{2})}\\). Calculate value \\(f(n)\\) \\(n = -10, 10, 100, 500, 1000\\).","code":"save(file= \" C:\\\\MyFunctions\").  attach(\"C:\\\\MyFunctions\", pos=2). assign(\"det.own\", det.own, pos=2). \nsave(list=objects(2), file = \"C:\\\\MyFunctions\")"},{"path":"operators.html","id":"sorting-functions","chapter":"3 R operators and functions","heading":"3.5.6 Sorting functions","text":"Note use functions sort(), order() rank(). First construct MatX using functions scan() matrix(). Explain detail order() sorting columns MatX according values first column matrix.\\[\nMatX = \\begin{bmatrix}\n         4 & 80 & 12\\\\\n         5 & 70 & 70\\\\\n         6 & 30 & 19\\\\\n         2 & 40 & 80\\\\\n         4 & 90 & 40\\\\\n         1 & 60 & 50\\\\\n         7 & 10 & 20\\\\\n         3 & 30 & 200\n       \\end{bmatrix}\n\\]","code":""},{"path":"operators.html","id":"some-functions-for-data-manipulation","chapter":"3 R operators and functions","heading":"3.5.7 Some functions for data manipulation","text":"Study functions Table 3.6.Table 3.6:  Functions data manipulation.Insert vector (101, 102, 103, 104, 105) vector (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) fifth element utilising argument function append().Insert vector (101, 102, 103, 104, 105) vector (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) fifth element utilising argument function append().function replace() requires three arguments x, list vals. values x indices given list replaced successive values vals making use recycling principle needed. Explain replacing vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1,1 15), values 10, 20 15 zeros.function replace() requires three arguments x, list vals. values x indices given list replaced successive values vals making use recycling principle needed. Explain replacing vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1,1 15), values 10, 20 15 zeros.Find unique values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15).Find unique values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15).Find duplicated values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15, 20, 20, 15).Find duplicated values vector (10, 2, 7, 20, 5, 8, 9, 20, 9, 1, 15, 20, 20, 15).Explain usage match() considering difference betweenExplain usage match() considering difference betweenIllustrate difference match() pmatch() considering names days week.","code":"\nmatch (c(10,2,7,20,5,8,9,20,9,1,15), c(10,20,15))\n#>  [1]  1 NA NA  2 NA NA NA  2 NA NA  3\nmatch (c(10,20,15), c(10,2,7,20,5,8,9,20,9,1,15))\n#> [1]  1  4 11"},{"path":"operators.html","id":"basic-statistical-functions","chapter":"3 R operators and functions","heading":"3.5.8 Basic statistical functions","text":"Study functions detail Table 3.7.Table 3.7:  Basic statistical functions.Note also functions pmax() pmin().Find average Life Expectancy states state.x77 data set.Find 5% trimmed mean Illiteracy states state.x77 data set.Find correlation Illiteracy Income states state.x77 data set.Find covariance matrix variables state.x77 data set.Find range Murder state.x77 data set.Obtain details random sample 10 states state.x77 data set.Obtain two independent random permutations numbers \\(1, 2, \\dots, 10\\).Write function computing coefficient kurtosis random sample. Test function Frost variable state.x77 data set.Write function computing coefficient skewness random sample. Test function Murder variable state.x77 data set.Write function compute harmonic mean numeric vector. Test function Life Expectancy states state.x77 data set. Compare answer answer ().","code":""},{"path":"operators.html","id":"probability-distributions-in-r","chapter":"3 R operators and functions","heading":"3.5.9 Probability distributions in R","text":"First, execute R-instructionto obtain list available statistical distributions R. distribution identifying name preceded one letters d, p, q r. case F-distribution, example, identifier just letter f normal distribution identifier norm. Preceding distribution’s identifier one letters d, p, q r returns density value, probability, quantile random sample specified distribution (probability density function probability mass function). See Figure 3.1 explanation.\nFigure 3.1: Meaning letters d, p q preceding R distribution identifier.\n","code":"\nhelp.search(\"distribution\")"},{"path":"operators.html","id":"areagrp","chapter":"3 R operators and functions","heading":"3.5.10 Functions for categorical variables","text":"Apart numeric logical, data R can also categorical (factor R) character strings. Study detail functions operating factor data Table 3.8.Use cut() create object areagrp divide state.x77 data set three groups representing states area within intervals \\((0, 10 000]\\),\\((10 000, 100 000]\\) \\((100 000, Inf]\\), respectively. Hint: First study arguments cut().Use cut() create object areagrp divide state.x77 data set three groups representing states area within intervals \\((0, 10 000]\\),\\((10 000, 100 000]\\) \\((100 000, Inf]\\), respectively. Hint: First study arguments cut().Repeat () argument labels = ?? specify state Small, Medium Large respect area.Repeat () argument labels = ?? specify state Small, Medium Large respect area.Use unclass() obtain numeric codes associated level areagrp.Use unclass() obtain numeric codes associated level areagrp.Repeat () obtain areagrp2 containing five equally spaced categories.Repeat () obtain areagrp2 containing five equally spaced categories.Repeat () obtain areagrp3 containing five groups containing \\(20\\%\\) data.Repeat () obtain areagrp3 containing five groups containing \\(20\\%\\) data.Use cut() create object illitgrp divide state.x77 data set five groups representing states illiteracy within interval \\([0, 0.50)\\), \\([0.50, 1.00)\\), \\([1.00, 1.50)\\), \\([1.50, 2.00)\\) \\([2.00, 5.00)\\), respectively.Use cut() create object illitgrp divide state.x77 data set five groups representing states illiteracy within interval \\([0, 0.50)\\), \\([0.50, 1.00)\\), \\([1.00, 1.50)\\), \\([1.50, 2.00)\\) \\([2.00, 5.00)\\), respectively.Obtain two-way table state.x77 data set according areagrp illitgrp.Obtain two-way table state.x77 data set according areagrp illitgrp.Table 3.8:  Basic functions categorical variables.","code":""},{"path":"operators.html","id":"character","chapter":"3 R operators and functions","heading":"3.5.11 Functions for character manipulation","text":"Study functions Table 3.9 detail.Table 3.9:  Basic functions character manipulation.returned value grep (\"ia\", state.name)?returned value grep (\"ia\", state.name)?Discuss usage grep (\"ia\", state.name).Discuss usage grep (\"ia\", state.name).Discuss output objects (pos = grep(\"stats\", search())).Discuss output objects (pos = grep(\"stats\", search())).Use paste() create variable names: var1, var2, …, var100.Use paste() create variable names: var1, var2, …, var100.Repeat (d) create variable names: var_1, var_2, …, var_100.Repeat (d) create variable names: var_1, var_2, …, var_100.Discuss output :Discuss output :Help menu, select Manuals (PDF) open Introduction R document. Obtain copy first two paragraphs Preface page 1 book R commands window. Use copy calculate number words well total number characters (including spaces words) passage.going use several functions Table 3.9 perform task steps. Proceed follows R copying relevant passage clipboard:obtain vector containing words separate element.convert TextPar vector containing one element consisting words concatenated separated spaces single character string. Add correct line breaks (“\\n”) TextPar using e.g. fix().change TextPar character vector.","code":"substring (paste (letters, collapse = \"\"),  \n             1:nchar (paste (letters, collapse=\"\")), \n             1:nchar (paste (letters, collapse=\"\")))\nTextPar <- scan(file = \"clipboard\", what = \"\")\nTextPar <- paste (TextPar, collapse = \" \")\nTextPar <- strsplit(x = TextPar, split = '\\n')mode(TextPar)\n[1] \"list\"\n\nmode(unlist(TextPar))\n[1] \"character\" \nTextPar <- unlist(TextPar)\nnchar(TextPar)\nlength(TextPar)"},{"path":"operators.html","id":"differentiation-and-integration","chapter":"3 R operators and functions","heading":"3.6 Differentiation and integration","text":"","code":""},{"path":"operators.html","id":"symbolic-differentiation","chapter":"3 R operators and functions","heading":"3.6.1 Symbolic differentiation","text":"Study help files D() deriv().","code":""},{"path":"operators.html","id":"integration","chapter":"3 R operators and functions","heading":"3.6.2 Integration","text":"Study help file integrate().","code":""},{"path":"operators.html","id":"exercise-8","chapter":"3 R operators and functions","heading":"3.6.3 Exercise","text":"known elementary statistics approximately 68% data normal distribution mean zero standard deviation unity absolute value less unity. Use sum() rnorm() functions find proportion \\(n\\) random \\(normal (0, 1)\\) variables whose absolute value less \\(1.0\\). Repeat different values \\(n\\) investigate widely results vary.known elementary statistics approximately 68% data normal distribution mean zero standard deviation unity absolute value less unity. Use sum() rnorm() functions find proportion \\(n\\) random \\(normal (0, 1)\\) variables whose absolute value less \\(1.0\\). Repeat different values \\(n\\) investigate widely results vary.Define: conditional inverse generalized (Moore-Penrose) inverse matrix \\(\\mathbf{X}: p \\times q\\) make provision \\(p = q\\), \\(p > q\\) \\(p < q\\). First, show svd \\(\\mathbf{X}\\) can used obtain conditional inverse, \\(\\mathbf{X}^c\\) \\(\\mathbf{X}\\). Now use information write R function calculating \\(\\mathbf{X}^c\\) given \\(\\mathbf{X}\\). function must provide test check calculated conditional inverse indeed conditional inverse. Illustrate usage function.Define: conditional inverse generalized (Moore-Penrose) inverse matrix \\(\\mathbf{X}: p \\times q\\) make provision \\(p = q\\), \\(p > q\\) \\(p < q\\). First, show svd \\(\\mathbf{X}\\) can used obtain conditional inverse, \\(\\mathbf{X}^c\\) \\(\\mathbf{X}\\). Now use information write R function calculating \\(\\mathbf{X}^c\\) given \\(\\mathbf{X}\\). function must provide test check calculated conditional inverse indeed conditional inverse. Illustrate usage function.Give necessary instructions :\nread R external text data file consisting \\(10\\) sample observations consisting one character variable two numerical variables.\nread R large external text data file consisting \\(50\\) numerical variables unknown number records. record data file takes 5 lines. variables R object must names X1, …, X50.\nGive necessary instructions :read R external text data file consisting \\(10\\) sample observations consisting one character variable two numerical variables.read R large external text data file consisting \\(50\\) numerical variables unknown number records. record data file takes 5 lines. variables R object must names X1, …, X50.Discuss meaning following R instructions:\ny <- x[!.na(x)]\nz <- (x + y)[!.na(x) & x >0]\n<- x[-(1:5)]\nx[.na(x)] <- 0\nDiscuss meaning following R instructions:y <- x[!.na(x)]z <- (x + y)[!.na(x) & x >0]<- x[-(1:5)]x[.na(x)] <- 0","code":""},{"path":"graphics.html","id":"graphics","chapter":"4 Introducing traditional R graphics","heading":"4 Introducing traditional R graphics","text":"basic knowledge R graphics needed directing attention art writing programs (functions) R. Therefore, chapter brief overview given basics traditional R graphics. later chapter, studying principles R programming, second round R graphics follow.","code":""},{"path":"graphics.html","id":"general-1","chapter":"4 Introducing traditional R graphics","heading":"4.1 General","text":"Study graphical parameters requestingIn Figure 4.1 main components graph window illustrated. Study figure detail. Plot Region together theMargins called Figure Region.\nFigure 4.1: main components graph window parameters controlling sizes. parameter mai numerical vector form c(bottom, left, top, right) specifying margins inches parameter mar similar form specifying respective margins number lines. default mar c(5, 4, 4, 2) + 0.1.\ndifference high-level low-level plotting instructions?difference high-level low-level plotting instructions?Take note especially functions windows(), win.graph() x11() used well different options available functions.Take note especially functions windows(), win.graph() x11() used well different options available functions.instruction dev.new() allows opening new graph window platform-independent way.instruction dev.new() allows opening new graph window platform-independent way.chapter high-level plotting instructions studied. instructions results (new) graph window complete graph drawn. command graphics.() deletes open graphic devices.chapter high-level plotting instructions studied. instructions results (new) graph window complete graph drawn. command graphics.() deletes open graphic devices.Study use par(), par(mfrow =) par(mfcol =). Study use par(new = TRUE) plot one figure set axes.Study use par(), par(mfrow =) par(mfcol =). Study use par(new = TRUE) plot one figure set axes.Study functions graphics.() dev.() work.Study functions graphics.() dev.() work.","code":"\n?par"},{"path":"graphics.html","id":"highLevelPlotting","chapter":"4 Introducing traditional R graphics","heading":"4.2 High-level plotting instructions","text":"Construct barplot illiteracy states according areagrp (defined section 3.5.10) state.x77 dataframe. Hint: function tapply() operates vector given first argument. second argument groups first argument groups function given third argument can applied groups. Study following command:Construct, state.x77 data set, box plots illiteracy broken income states. First use cut() form three categories state income:use boxplot() together split() produce desired graph:Add labels axes well title figure.Repeat previous example use argument notch = TRUE.Repeat previous example use argument notch = TRUE.Attach package akima. usage function interp()? Discuss constructing following contour plot:Attach package akima. usage function interp()? Discuss constructing following contour plot:coplot? Discuss giving following instruction referring role tilde (~) operator.dotchart constructed function dotchart(). First preparations necessary:Complete graph adding label x-axis heading graph.Use function faces() available package aplpack construct Chernoff faces Western states data set state.x77. Hint: Western states appear rows 3, 5, 12, 26, 28, 37, 44, 47 50. Explain represented facial features. First set argument face.type = 0 face.type = 1.Use function faces() available package aplpack construct Chernoff faces Western states data set state.x77. Hint: Western states appear rows 3, 5, 12, 26, 28, 37, 44, 47 50. Explain represented facial features. First set argument face.type = 0 face.type = 1.Obtain histogram life expectancy states state.x77.Obtain histogram life expectancy states state.x77.Execute commandExecute commandInterpret graph.Three-dimensional graphs constructed function persp().Discuss meaning instructions. Experiment different values arguments theta phi.Obtain pie chart object areagrp defined section 3.5.10. Hint: function table() may useful .Obtain pie chart object areagrp defined section 3.5.10. Hint: function table() may useful .cluster plot (dendrogram) can constructed function plclust() follows:cluster plot (dendrogram) can constructed function plclust() follows:Interpret instructions resulting plot.Use function plot() plot \\(sin (\\theta)\\) \\(\\theta\\) varies \\(–\\pi\\) \\(\\pi\\).Use function plot() plot \\(sin (\\theta)\\) \\(\\theta\\) varies \\(–\\pi\\) \\(\\pi\\).explain different graphs resulting two calls (l) (m) plot() function ?explain different graphs resulting two calls (l) (m) plot() function ?Obtain empirical distribution function variable Life Exp state.x77 data set using functions cut(), ecdf() plot().Obtain empirical distribution function variable Life Exp state.x77 data set using functions cut(), ecdf() plot().Check normality variable Income state.x77 data set using function qqnorm().Check normality variable Income state.x77 data set using function qqnorm().Obtain qqplot income small states versus income large states data set state.x77 small large defined median income, respectively.Obtain qqplot income small states versus income large states data set state.x77 small large defined median income, respectively.Use function ts.plot() construct time series plot sunspots data set.","code":"\nbarplot (tapply (state.x77[, \"Illiteracy\"], areagrp, mean), \n         names=levels(areagrp), ylab = \"Illiteracy\", xlab = \"Area of State\", \n         main = \"Barplot of Mean Illiteracy\")\nstate.income <- cut (state.x77[ , \"Income\"], c(0, 4000, 5000, Inf),\n                   labels=c(\"$4000 or less\", \"$4001-$5000\", \"more than $5001\"))\nboxplot (split (state.x77[ , \"Income\"], state.income))\ncontour (interp (state.center$x, state.center$y,  state.x77[,\"Frost\"])) \ncoplot (state.x77[,\"Illiteracy\"] ~ state.x77[,\"Area\"] | state.x77[,\"Income\"])\nincgroup <- cut(state.x77[,\"Income\"],  3, \n                labels = c(\"LowInc\", \"MediumInc\", \"HighInc\"))\nlifgroup <- cut(state.x77[,\"Life Exp\"], 2, \n                labels = c(\"LowExp\", \"HighExp\"))\ntable.out <- tapply(state.x77 [,\"Income\"], list(lifgroup,incgroup), mean)\ntable.out\n#>           LowInc MediumInc HighInc\n#> LowExp  3640.917  4698.417    5807\n#> HighExp 4039.600  4697.667    5348\ndotchart (table.out, \n          levels (factor (col (table.out), \n                          labels = levels (incgroup)))[col(table.out)], \n          factor(row(table.out), labels = levels(lifgroup)))\npairs (state.x77)\npts <- seq(from = -pi, to = pi, len = 20)\nz <- outer(X = pts, Y = pts, function(x,y) sin(x)*cos(y))\npersp(x = pts, y = pts, z, theta = 10, phi = 60, ticktype = 'detailed')\nwest.rows <- c(3, 5, 12, 26, 28, 37, 44, 47, 50)\ndistmat.west <- dist (scale (state.x77[west.rows,]))\nplot(hclust(distmat.west), labels = rownames(state.x77)[west.rows])\nstate.size <- cut (state.x77[,\"Area\"],  \n                   c(0, median (state.x77[,\"Area\"]), max (state.x77[,\"Area\"])))\nstate.income <- split (state.x77[,\"Income\"], state.size)\nqqplot(state.income[[1]], state.income[[2]], xlab=\"Income for small states\", \n       ylab=\"income for large states\")"},{"path":"graphics.html","id":"interactive-communication-with-graphs","chapter":"4 Introducing traditional R graphics","heading":"4.3 Interactive communication with graphs","text":"Study help files functions text(), identify() locator().Study help files functions text(), identify() locator().Illustrate usage identify() scatterplot variables Illiteracy Life Exp state.x77 data set:Illustrate usage identify() scatterplot variables Illiteracy Life Exp state.x77 data set:create scatterplot, callNotice change cursor; cursor changes cross moved graph. Hover cursor point identify click left mouse button. Repeat \\(n = 5\\) times. Explain result. Next, create scatterplot callExplain happened.Illustrate usage locator() :Joining \\(5\\) user defined points graph interactively straight linesUse mouse select five points graph. happened graph? happened commands window?Writing text interactively specified position existing graph","code":"\nplot (x = state.x77[,'Life Exp'], y = state.x77[,'Income'])\nidentify (x = state.x77[,'Life Exp'], y = state.x77[,'Income'], \n          seq (along = rownames(state.x77)), n = 5)\nidentify (x = state.x77[,'Life Exp'],  y = state.x77[,'Income'], \n          labels = rownames(state.x77)[seq (along = \n                                              rownames(state.x77))] , n = 5) \nplot (x = state.x77[,'Life Exp'], y = state.x77[,'Income'])\nlocator(5, type = \"l\") \nplot (x = state.x77[,'Life Exp'], y = state.x77[,'Income'])\ntext (locator (n = 1, type = \"n\"), label = \"State with the highest income\")"},{"path":"graphics.html","id":"d-graphics-package-rgl","chapter":"4 Introducing traditional R graphics","heading":"4.4 3D graphics: package rgl","text":"Write execute following function.Study code constructions detail.","code":"\nrgl.example <- function (size = 0.1, col = \"green\", alpha.3d = 0.6) \n{ require(rgl)\n  datmat <- matrix (rnorm (30), ncol = 3)\n  open3d()\n  spheres3d (datmat,radius = size, color = col, alpha = alpha.3d)\n  axes3d(col = \"black\")\n  device.ID <- rgl.cur()\n  answer <- readline (\"Save 3D graph as a .png file? Y/N\\n\")\n  while (!(answer == \"Y\" | answer == \"y\" | answer == \"N\" | answer == \"n\")) \n    answer <- readline(\"Save 3D graph as a .png file? Y/N\\n\")\n  if (answer == \"Y\" | answer == \"y\") \n    repeat \n    { file.name <- readline (\"Provide file name including full \n                              path NOT in quotes and SINGLE \n                              back slashes!\\n\")\n      file.name <- paste (file.name, \".png\", sep = \"\")\n      snapshot3d (file = file.name)\n      rgl.set (device.ID)\n      answer2 <- readline(\"Save another 3D graph as a .png file? Y/N \\n\")\n      if (answer2 == \"Y\" | answer2 == \"y\") next else break\n    }\n  else rgl.set (device.ID)\n}"},{"path":"graphics.html","id":"exercise-9","chapter":"4 Introducing traditional R graphics","heading":"4.5 Exercise","text":"Obtain graph \\(normal(100, 25)\\) probability density function (p.d.f.).Obtain graph \\(normal(100, 25)\\) probability density function (p.d.f.).Plot set axes\ncentral \\(beta(9, 5)\\) p.d.f.;\nnon-central \\(beta(9 5)\\) p.d.f. non-centrality parameter = \\(15\\) \nnon-central \\(beta(9, 5)\\) p.d.f. non-centrality parameter = \\(40\\).\nPlot set axesa central \\(beta(9, 5)\\) p.d.f.;non-central \\(beta(9 5)\\) p.d.f. non-centrality parameter = \\(15\\) anda non-central \\(beta(9, 5)\\) p.d.f. non-centrality parameter = \\(40\\).Add suitable legend plot.Use persp() obtain graph user specified bivariate function. challenge function specification must appear main title graph. order address problem need information arguments persp():helpful tryThe reason error message follows persp.default visible. immediate visibility function regulated package builder package’s namespace mechanism. object names exported immediately visible; object names exported marked asterisk visible. functions\nargsAnywhere() getAnywhere() available get information asterisked object names:notice can make use argument main call persp() provide perspective plot title. However, main accepts character strings mathematical expressions. Furthermore, seen persp() example section 4.2 values argument z conveniently found call outer() using argument FUN. However FUN requires function. need means convert expressions character strings vice versa convert character strings expressions.following pairs functions allow conversions made:Character strings (” “) → expressions: parse() eval()Expressions (unquoted) → character strings (” “): deparse() substitute()Explain carefully parse() .Explain carefully eval() .Explain carefully role paste().Use volcano data :\nObtain perspective plot using persp().\nObtain RGL plot volcano data.\nUse volcano data :Obtain perspective plot using persp().Obtain perspective plot using persp().Obtain RGL plot volcano data.Obtain RGL plot volcano data.","code":"\nargs (persp)\n#> function (x, ...) \n#> NULL\nmethods (persp)\n#> [1] persp.default*\n#> see '?methods' for accessing help and source code\nargs (persp.default)\n#> Error: object 'persp.default' not found\nargsAnywhere (persp.default)\n#> function (x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, \n#>     length.out = ncol(z)), z, xlim = range(x), ylim = range(y), \n#>     zlim = range(z, na.rm = TRUE), xlab = NULL, ylab = NULL, \n#>     zlab = NULL, main = NULL, sub = NULL, theta = 0, phi = 15, \n#>     r = sqrt(3), d = 1, scale = TRUE, expand = 1, col = \"white\", \n#>     border = NULL, ltheta = -135, lphi = 0, shade = NA, box = TRUE, \n#>     axes = TRUE, nticks = 5, ticktype = \"simple\", ...) \n#> NULL\npts <- seq (from = -3, to = 3, len = 50)\nfun1 <- \"2 * pi * exp(-(x^2 + y^2)/2)\"\nfun2 <- parse (text = paste (\"function(x,y)\", fun1))\nzz <- outer (pts, pts, eval(fun2))persp (x = pts, y = pts, z = zz, theta = 0, phi = 15, ticktype = \"detailed\", \n       main = paste(\"Persp plot of `\"fun2,\"`\",sep=\"\"))"},{"path":"subscripting.html","id":"subscripting","chapter":"5 Subscripting","heading":"5 Subscripting","text":"Vectorized arithmetic subscripting two cornerstones R programming. Review section 4.2 several examples subscripting used. chapter subscripting studied detail. Specifically, following two related topics studied:Extracting parts object using subscripting.combination rearranging data within data structures like matrices, dataframes lists.","code":""},{"path":"subscripting.html","id":"vectorSubscripting","chapter":"5 Subscripting","heading":"5.1 Subscripting with vectors","text":"different types subscripting vectors summarized Table 5.1:Table 5.1:  Different types subscripting vectors.Logical subscripting provides powerful operation R. logical subscript vector TRUEs FALSEs must length object subscripted e.g.Logical subscripting allows finding indices elements vector meet certain condition e.g.find corresponding names statesIn addition extracting elements, subscripting operations can also used modify selected elements vector e.g. changing NA-values zero:right-hand side assignment scalar value, selected values changed specified scalar value; right-hand side vector, selecting values changed order, recycling values values selected left-hand side available right-hand side.","code":"\nstate.x77[ , \"Area\"] > 80000  \n#>        Alabama         Alaska        Arizona       Arkansas \n#>          FALSE           TRUE           TRUE          FALSE \n#>     California       Colorado    Connecticut       Delaware \n#>           TRUE           TRUE          FALSE          FALSE \n#>        Florida        Georgia         Hawaii          Idaho \n#>          FALSE          FALSE          FALSE           TRUE \n#>       Illinois        Indiana           Iowa         Kansas \n#>          FALSE          FALSE          FALSE           TRUE \n#>       Kentucky      Louisiana          Maine       Maryland \n#>          FALSE          FALSE          FALSE          FALSE \n#>  Massachusetts       Michigan      Minnesota    Mississippi \n#>          FALSE          FALSE          FALSE          FALSE \n#>       Missouri        Montana       Nebraska         Nevada \n#>          FALSE           TRUE          FALSE           TRUE \n#>  New Hampshire     New Jersey     New Mexico       New York \n#>          FALSE          FALSE           TRUE          FALSE \n#> North Carolina   North Dakota           Ohio       Oklahoma \n#>          FALSE          FALSE          FALSE          FALSE \n#>         Oregon   Pennsylvania   Rhode Island South Carolina \n#>           TRUE          FALSE          FALSE          FALSE \n#>   South Dakota      Tennessee          Texas           Utah \n#>          FALSE          FALSE           TRUE           TRUE \n#>        Vermont       Virginia     Washington  West Virginia \n#>          FALSE          FALSE          FALSE          FALSE \n#>      Wisconsin        Wyoming \n#>          FALSE           TRUE\nx <- c(10, 15, 12, NA, 18, 20)\nis.na (x)\n#> [1] FALSE FALSE FALSE  TRUE FALSE FALSE\nx[is.na (x)]\n#> [1] NA\nx[!is.na (x)]\n#> [1] 10 15 12 18 20\nmean (x)\n#> [1] NA\nmean (x[!is.na (x)])\n#> [1] 15\nmean (na.omit (x))\n#> [1] 15\n(1:length (rownames (state.x77)))[state.x77[ ,\"Income\"] > 5000]\n#> [1]  2  5  7 13 20 28 30 34\nrownames(state.x77)[\n  (1:length (rownames(state.x77)))[state.x77[ ,\"Income\"] > 5000]]\n#> [1] \"Alaska\"       \"California\"   \"Connecticut\" \n#> [4] \"Illinois\"     \"Maryland\"     \"Nevada\"      \n#> [7] \"New Jersey\"   \"North Dakota\"\nx\n#> [1] 10 15 12 NA 18 20\nx[is.na (x)] <- 0\nx\n#> [1] 10 15 12  0 18 20"},{"path":"subscripting.html","id":"subscripting-with-matrices","chapter":"5 Subscripting","heading":"5.2 Subscripting with matrices","text":"Element submatrix extraction matrices discussed .Revise use matrix(), names(), dim() dimnames().Revise use matrix(), names(), dim() dimnames().matrix R array two indices. Arrays order two higher can constructed function dim() array().matrix R array two indices. Arrays order two higher can constructed function dim() array().Let, example, \\(\\mathbf{}\\) vector consisting \\(150\\) elements. instructionor instructionconstructs \\(3 \\times 5 \\times 10\\) array.Matrices can therefore formed , function matrix() usually easier use.elements \\(p\\)-dimensional array can also extracted using one-index two-index method described .subscripting methods described section 5.1 can also applied first second dimension matrix first dimension refers rows second dimension columns matrix.subscripting methods described section 5.1 can also applied first second dimension matrix first dimension refers rows second dimension columns matrix.Note elements matrix can referred two-index method one index method. one index method used assumed matrix first strung column-wise vector.Note elements matrix can referred two-index method one index method. one index method used assumed matrix first strung column-wise vector.Comment difference testmat.testmat.b.Write function convert one-index two-index matrix reference. Give example usage function.Write function convert one-index two-index matrix reference. Give example usage function.Write function convert two-index one-index matrix reference. Give example usage function.Write function convert two-index one-index matrix reference. Give example usage function.Consider following example form submatrices:Consider following example form submatrices:Notice difference testmat [1:2, 3] testmat [1:2, 3, drop = FALSE]. first command results output given form vector optional drop = FALSE second command retains matrix structure output. distinction can serious consequences procedure expects matrix argument vector.Notice difference testmat [1:2, 3] testmat [1:2, 3, drop = FALSE]. first command results output given form vector optional drop = FALSE second command retains matrix structure output. distinction can serious consequences procedure expects matrix argument vector.Notice also output testmat[1:2,3] testmat[3, 1:2] similar form: R makes distinction column vectors row vectors; one-dimensional collections numbers treated identically.Notice also output testmat[1:2,3] testmat[3, 1:2] similar form: R makes distinction column vectors row vectors; one-dimensional collections numbers treated identically.Apart using vectors subscripts matrix, matrix can also used subscript matrix. two cases:\nnumeric subscripting matrix \nlogical subscripting matrix.\nApart using vectors subscripts matrix, matrix can also used subscript matrix. two cases:numeric subscripting matrix anda logical subscripting matrix.","code":"\ndim(a) <- c(3, 5, 10) \na <- array (a, dim = c(3, 5, 10)) \ntestmat.a <- matrix (c (17, 40, 20, 34, 21, 12, 14, 57, \n                        78, 37, 29, 64), nrow = 4)\ntestmat.a\n#>      [,1] [,2] [,3]\n#> [1,]   17   21   78\n#> [2,]   40   12   37\n#> [3,]   20   14   29\n#> [4,]   34   57   64\ntestmat.b <- matrix (c (17, 40, 20, 34, 21, 12, 14, 57, \n                        78, 37, 29, 64), nrow = 4, byrow = TRUE)\ntestmat.b\n#>      [,1] [,2] [,3]\n#> [1,]   17   40   20\n#> [2,]   34   21   12\n#> [3,]   14   57   78\n#> [4,]   37   29   64\ntestmat.a[2,3]   # Two index matrix reference\n#> [1] 37\ntestmat.a[10]   # One index matrix reference\n#> [1] 37\ntestmat <- matrix(1:50, nrow = 10, byrow = TRUE)\ntestmat[1:2, c (3, 5)]\n#>      [,1] [,2]\n#> [1,]    3    5\n#> [2,]    8   10\ntestmat[1:2, 3]\n#> [1] 3 8\ntestmat[1:2, 3, drop=FALSE]\n#>      [,1]\n#> [1,]    3\n#> [2,]    8"},{"path":"subscripting.html","id":"case-a","chapter":"5 Subscripting","heading":"Case A","text":"subscripting numeric matrix must exactly two columns: first provide row indices second column indices.used right-hand side expression result case subscripting vector containing values specified subscripting matrix.used right-hand side expression result case subscripting vector containing values specified subscripting matrix.used left-hand side assignment numeric matrix first selects elements specified row column indices; values replaced one one objects specified right-hand side assignment.used left-hand side assignment numeric matrix first selects elements specified row column indices; values replaced one one objects specified right-hand side assignment.example case subscripting subscript matrix right-hand side assignment:Case subscripting numeric subscript matrix left-hand side assignment:","code":"\nxmat <- matrix (1:25, nrow = 5)\nxmat\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    6   11   16   21\n#> [2,]    2    7   12   17   22\n#> [3,]    3    8   13   18   23\n#> [4,]    4    9   14   19   24\n#> [5,]    5   10   15   20   25\nsuperdiag.index <- matrix (c (1:4, 2:5), ncol = 2, byrow = FALSE)\nsuperdiag.values <- xmat[superdiag.index]\nsuperdiag.values\n#> [1]  6 12 18 24\nsubscript.mat <- matrix (c(1:3, 1:3, rep(1,3), rep(2,3)), ncol=2)\nsubscript.mat\n#>      [,1] [,2]\n#> [1,]    1    1\n#> [2,]    2    1\n#> [3,]    3    1\n#> [4,]    1    2\n#> [5,]    2    2\n#> [6,]    3    2\nxx <- matrix(NA, nrow=3,ncol=2)\nxx \n#>      [,1] [,2]\n#> [1,]   NA   NA\n#> [2,]   NA   NA\n#> [3,]   NA   NA\nxx[subscript.mat] <- c(10,12,14,100,120,140)\nxx\n#>      [,1] [,2]\n#> [1,]   10  100\n#> [2,]   12  120\n#> [3,]   14  140"},{"path":"subscripting.html","id":"case-b","chapter":"5 Subscripting","heading":"Case B","text":"logical subscripting matrix must size exactly similar matrix subscripting select values corresponding TRUE subscripting matrix.Case B logical subscripting matrix right-hand side assignment:Note selected elements placed column-wise vector.Case B logical subscripting matrix left-hand side assignment:order restrict assignment subset matrix two sets subscripts needed. See example :Study use functions row() col() constructing logical matrices.","code":"\ntestmat\n#>       [,1] [,2] [,3] [,4] [,5]\n#>  [1,]    1    2    3    4    5\n#>  [2,]    6    7    8    9   10\n#>  [3,]   11   12   13   14   15\n#>  [4,]   16   17   18   19   20\n#>  [5,]   21   22   23   24   25\n#>  [6,]   26   27   28   29   30\n#>  [7,]   31   32   33   34   35\n#>  [8,]   36   37   38   39   40\n#>  [9,]   41   42   43   44   45\n#> [10,]   46   47   48   49   50\naa <- testmat[testmat < 12]\naa\n#>  [1]  1  6 11  2  7  3  8  4  9  5 10\ntestmat[testmat < 12] <- 12\ntestmat\n#>       [,1] [,2] [,3] [,4] [,5]\n#>  [1,]   12   12   12   12   12\n#>  [2,]   12   12   12   12   12\n#>  [3,]   12   12   13   14   15\n#>  [4,]   16   17   18   19   20\n#>  [5,]   21   22   23   24   25\n#>  [6,]   26   27   28   29   30\n#>  [7,]   31   32   33   34   35\n#>  [8,]   36   37   38   39   40\n#>  [9,]   41   42   43   44   45\n#> [10,]   46   47   48   49   50\ntestmat <- matrix(1:50, nrow=10, byrow=TRUE)\ntestmat[, c(1,3)][testmat[,c(1,3)] <12] <- 12\ntestmat\n#>       [,1] [,2] [,3] [,4] [,5]\n#>  [1,]   12    2   12    4    5\n#>  [2,]   12    7   12    9   10\n#>  [3,]   12   12   13   14   15\n#>  [4,]   16   17   18   19   20\n#>  [5,]   21   22   23   24   25\n#>  [6,]   26   27   28   29   30\n#>  [7,]   31   32   33   34   35\n#>  [8,]   36   37   38   39   40\n#>  [9,]   41   42   43   44   45\n#> [10,]   46   47   48   49   50"},{"path":"subscripting.html","id":"extracting-elements-of-lists","chapter":"5 Subscripting","heading":"5.3 Extracting elements of lists","text":"Note use list() collect objects list elements extracted $function names(),function names(),single square brackets [ ] andthe single square brackets [ ] andthe double square brackets [[ ]].double square brackets [[ ]].Study following example carefully:Note: example shows using single pair square brackets subscripting list always result list object returned. often cause error message. See example .Explain differences similarities symbols [ ], [[ ]] $ subscripting lists.","code":"\nmy.list <- list(el1 = 1:5, \n                el2 = c(\"a\", \"b\", \"c\"), \n                el3 = matrix(1:16, ncol = 4), \n                el4 = c(12, 17, 23, 9))\nmy.list\n#> $el1\n#> [1] 1 2 3 4 5\n#> \n#> $el2\n#> [1] \"a\" \"b\" \"c\"\n#> \n#> $el3\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    5    9   13\n#> [2,]    2    6   10   14\n#> [3,]    3    7   11   15\n#> [4,]    4    8   12   16\n#> \n#> $el4\n#> [1] 12 17 23  9\nmy.list$el2\n#> [1] \"a\" \"b\" \"c\"\nmode (my.list$el2)\n#> [1] \"character\"\nmy.list[el2]\n#> Error: object 'el2' not found\nmy.list[\"el2\"]\n#> $el2\n#> [1] \"a\" \"b\" \"c\"\nmode (my.list[\"el2\"])\n#> [1] \"list\"\nmy.list[[\"el2\"]]\n#> [1] \"a\" \"b\" \"c\"\nmode (my.list[[\"el2\"]])\n#> [1] \"character\"\nmy.list[1]\n#> $el1\n#> [1] 1 2 3 4 5\nmode (my.list[1])\n#> [1] \"list\"\nmy.list[[1]]\n#> [1] 1 2 3 4 5\nmode (my.list[[1]])\n#> [1] \"numeric\"\nmy.list[3][2,4]\n#> Error in my.list[3][2, 4]: incorrect number of dimensions\nmy.list[[3]][2,4]\n#> [1] 14\nmy.list$el3[2,4]\n#> [1] 14\nmean (my.list[4])\n#> Warning in mean.default(my.list[4]): argument is not\n#> numeric or logical: returning NA\n#> [1] NA\nmean (my.list[[4]])\n#> [1] 15.25\nmean (my.list$el4)\n#> [1] 15.25"},{"path":"subscripting.html","id":"extracting-elements-from-dataframes","chapter":"5 Subscripting","heading":"5.4 Extracting elements from dataframes","text":"Note use data.frame() creating dataframes. dataframe rectangular structure similar matrix differs matrix columns restricted contain type data. columns must contain sort data columns can numerical others factors example.Note use data.frame() creating dataframes. dataframe rectangular structure similar matrix differs matrix columns restricted contain type data. columns must contain sort data columns can numerical others factors example.Explain difference objects created following two instructions:Explain difference objects created following two instructions:Note followingA sample behaviour dataframesDataframe behaves like matrixDataframe behaves like listExplain happened .examples show dataframe can considered cross matrix list. Therefore, subscripting dataframes generally can performed using basic techniques available matrices lists.examples show dataframe can considered cross matrix list. Therefore, subscripting dataframes generally can performed using basic techniques available matrices lists.alternative technique extract elements list using functions attach() names(). technique especially importance statistical modelling. potential danger technique attaching dataframes? danger can avoided using (). also true modelling performed?alternative technique extract elements list using functions attach() names(). technique especially importance statistical modelling. potential danger technique attaching dataframes? danger can avoided using (). also true modelling performed?Review section 2.3. Study help file function (). important usage ()?Review section 2.3. Study help file function (). important usage ()?","code":"\nmy.matrix <- matrix (c (17, 40, 20, 34, 21, 12, 14, 57,\n                        78, 37, 29, 64), nrow = 4, ncol = 3)\nmy.dataframe <- data.frame ( c(17, 40, 20, 34, 21, 12, 14, 57,\n                               78, 37, 29, 64), nrow = 4, ncol = 3)\nclass(my.matrix)\n#> [1] \"matrix\" \"array\"\nclass(my.dataframe)\n#> [1] \"data.frame\"\nis.list(data.frame)\n#> [1] FALSE\nmode(my.matrix)\n#> [1] \"numeric\"\nmode(data.frame)\n#> [1] \"function\"\nmy.dataframe.2 <- data.frame (C1 = c('a', 'b', 'c', 'd'), \n                              C2 = c(5, 9, 23, 17), \n                              C3 = c(TRUE, TRUE, FALSE, TRUE))\nmy.dataframe.2\n#>   C1 C2    C3\n#> 1  a  5  TRUE\n#> 2  b  9  TRUE\n#> 3  c 23 FALSE\n#> 4  d 17  TRUE\nmy.dataframe.2[ ,1:2]\n#>   C1 C2\n#> 1  a  5\n#> 2  b  9\n#> 3  c 23\n#> 4  d 17\nmy.dataframe.2$C1\n#> [1] \"a\" \"b\" \"c\" \"d\"\nas.matrix(my.dataframe.2)\n#>      C1  C2   C3     \n#> [1,] \"a\" \" 5\" \"TRUE\" \n#> [2,] \"b\" \" 9\" \"TRUE\" \n#> [3,] \"c\" \"23\" \"FALSE\"\n#> [4,] \"d\" \"17\" \"TRUE\""},{"path":"subscripting.html","id":"combining-vectors-matrices-lists-and-dataframes","chapter":"5 Subscripting","heading":"5.5 Combining vectors, matrices, lists and dataframes","text":"result commandRecall function c() creating vectors. c() used combine numeric vector character vector result vector mode “character”. Similarly, using c() combine vector list results list.Recall function c() creating vectors. c() used combine numeric vector character vector result vector mode “character”. Similarly, using c() combine vector list results list.list() used combine two vectors lists result list objects.list() used combine two vectors lists result list objects.function unlist() can used convert elements list single vector.function unlist() can used convert elements list single vector.Explain output.Review functions cbind(), rbind(), append(), data.frame(), dim(), dimnames(), names(), colnames(), rownames(), nrow() ncol().","code":"my.list <- vector (\"list\", k)?\nmy.list\n#> $el1\n#> [1] 1 2 3 4 5\n#> \n#> $el2\n#> [1] \"a\" \"b\" \"c\"\n#> \n#> $el3\n#>      [,1] [,2] [,3] [,4]\n#> [1,]    1    5    9   13\n#> [2,]    2    6   10   14\n#> [3,]    3    7   11   15\n#> [4,]    4    8   12   16\n#> \n#> $el4\n#> [1] 12 17 23  9\nunlist(my.list)\n#>  el11  el12  el13  el14  el15  el21  el22  el23  el31  el32 \n#>   \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"a\"   \"b\"   \"c\"   \"1\"   \"2\" \n#>  el33  el34  el35  el36  el37  el38  el39 el310 el311 el312 \n#>   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"  \"10\"  \"11\"  \"12\" \n#> el313 el314 el315 el316  el41  el42  el43  el44 \n#>  \"13\"  \"14\"  \"15\"  \"16\"  \"12\"  \"17\"  \"23\"   \"9\""},{"path":"subscripting.html","id":"rearranging-the-elements-in-a-matrix","chapter":"5 Subscripting","heading":"5.6 Rearranging the elements in a matrix","text":"Study usage functions matrix(), t() diag(). functions useful form submatrices matrix rearrange matrix elements. Note argument byrow = matrix().","code":""},{"path":"subscripting.html","id":"exercise-10","chapter":"5 Subscripting","heading":"5.7 Exercise","text":"Write R function check given matrix symmetric.Write R function check given matrix symmetric.Write R function extract () row(s) (ii) columns containing maximum value matrix. Note provision must made maximum value can occur one row (column). Furthermore, indices actual values rows (columns) must returned. Illustrate usage function suitable example.Write R function extract () row(s) (ii) columns containing maximum value matrix. Note provision must made maximum value can occur one row (column). Furthermore, indices actual values rows (columns) must returned. Illustrate usage function suitable example.Describe variables built-data set LifeCycleSavings. data set form matrix dataframe?Describe variables built-data set LifeCycleSavings. data set form matrix dataframe?Use subscripting find largest proportion 75 countries dpi less 1000 LifeCycleSavings data set. Also determine country(ies) pop75 value.Use subscripting find largest proportion 75 countries dpi less 1000 LifeCycleSavings data set. Also determine country(ies) pop75 value.Consider LifeCycleSavings data set.\nUse subscripting find mean aggregate savings countries percentage population younger 15 least 10 times percentage population 75.\nAlso find mean aggregate savings countries ratio less 10.\nUse function t.test() test mean aggregate savings different two groups.\nUse notched box plots approximate test.\nConsider LifeCycleSavings data set.Use subscripting find mean aggregate savings countries percentage population younger 15 least 10 times percentage population 75.Also find mean aggregate savings countries ratio less 10.Use function t.test() test mean aggregate savings different two groups.Use notched box plots approximate test.First, carefully study output obtained (iii) (iv). interpret/discuss output detail.Consider state.x77 data set variable state.region. Find state minimum income regions defined state.region.","code":""},{"path":"revision.html","id":"revision","chapter":"6 Revision tasks","heading":"6 Revision tasks","text":"general, purpose writing program R address practical problem directly indirectly. prepare student seriously writing R functions (programs) chapter consists mixture revision tasks. tasks straight forward others need thought preparation starting writing R code. Section 6.1 guidelines considered writing R code address practical problem.","code":""},{"path":"revision.html","id":"guidelines","chapter":"6 Revision tasks","heading":"6.1 Guidelines for problem solving by writing R code","text":"Make sure problem clearly understood. write good code something correctly grasped.Make sure problem clearly understood. write good code something correctly grasped.Break complex problems simpler components. Formulate simpler components terms specific questions answered.Break complex problems simpler components. Formulate simpler components terms specific questions answered.Think terms way R operates e.g. vectorized arithmetic, recycling principle, operating objects wholes/units, subscripting, R data structures . . .Think terms way R operates e.g. vectorized arithmetic, recycling principle, operating objects wholes/units, subscripting, R data structures . . .Spend time prepare data.Spend time prepare data.Ask question information need attempting write code coming answer. , facilities provided R get necessary information information available manipulations needed code useful output.Ask question information need attempting write code coming answer. , facilities provided R get necessary information information available manipulations needed code useful output.Write dedicated code answering specific questions (b).Write dedicated code answering specific questions (b).neglect debugging/optimizing phase code succeeds providing first round answer.neglect debugging/optimizing phase code succeeds providing first round answer.","code":""},{"path":"revision.html","id":"Ex6","chapter":"6 Revision tasks","heading":"6.2 Exercise","text":"Use R obtain five-point summary variable dpi LifeCycleSavings data set. Illustrate difference working fivenum() quantile(). Hint: See boxplot.stats() definition hinges.Use R obtain five-point summary variable dpi LifeCycleSavings data set. Illustrate difference working fivenum() quantile(). Hint: See boxplot.stats() definition hinges.Display pdf \\(normal (100, 15)\\) distribution graphically. area density bounded 70th 90th percentiles must appear red.Display pdf \\(normal (100, 15)\\) distribution graphically. area density bounded 70th 90th percentiles must appear red.Use R obtain following graphical representations:\npdf well cdf \\(F (15, 10)\\) \\(F (10, 15)\\) stochastic variable. graphs must one graph window set axes F-distributions supplied suitable titles. Furthermore, must line graphs contain plotting characters except lines.\nObtain representations line graphs inverses cdfs single separate graph page.\nUse R obtain following graphical representations:pdf well cdf \\(F (15, 10)\\) \\(F (10, 15)\\) stochastic variable. graphs must one graph window set axes F-distributions supplied suitable titles. Furthermore, must line graphs contain plotting characters except lines.pdf well cdf \\(F (15, 10)\\) \\(F (10, 15)\\) stochastic variable. graphs must one graph window set axes F-distributions supplied suitable titles. Furthermore, must line graphs contain plotting characters except lines.Obtain representations line graphs inverses cdfs single separate graph page.Obtain representations line graphs inverses cdfs single separate graph page.First set seed 172389 generate random sample size 500 \\(normal (100, 20)\\) distribution. Give necessary R instructions determine class frequencies class intervals “Smaller 50”, “50 75–“, “75 90–“, “90 100”, “100+ 110”, “Larger 110”.First set seed 172389 generate random sample size 500 \\(normal (100, 20)\\) distribution. Give necessary R instructions determine class frequencies class intervals “Smaller 50”, “50 75–“, “75 90–“, “90 100”, “100+ 110”, “Larger 110”.Generate random sample size 80 bivariate normal distribution mean vector \\((50, 100)\\). variances two variables 900 2500 respectively correlation 0.90. Store sample R matrix object obtain scatterplot form \npoint diagram \nline graph sample.\nGenerate random sample size 80 bivariate normal distribution mean vector \\((50, 100)\\). variances two variables 900 2500 respectively correlation 0.90. Store sample R matrix object obtain scatterplot form ofa point diagram anda line graph sample.Define harmonic mean vector observations. conditions must satisfied observations?\nWrite function calculating harmonic mean use calculate harmonic mean variable dpi LifeCycleSavings data set.\nCalculate ordinary mean variable dpi LifeCycleSavings data set. Compare answer answer (). answer use practice? Motivate.\nDefine harmonic mean vector observations. conditions must satisfied observations?Write function calculating harmonic mean use calculate harmonic mean variable dpi LifeCycleSavings data set.Write function calculating harmonic mean use calculate harmonic mean variable dpi LifeCycleSavings data set.Calculate ordinary mean variable dpi LifeCycleSavings data set. Compare answer answer (). answer use practice? Motivate.Calculate ordinary mean variable dpi LifeCycleSavings data set. Compare answer answer (). answer use practice? Motivate.Fisher’s linear discriminant function case two groups defined follows:Fisher’s linear discriminant function case two groups defined follows:\\(LDF = (\\mathbf{\\bar{x}}_1 - \\mathbf{\\bar{x}}_2)' \\mathbf{S}^{-1} \\mathbf{x}\\) \\(\\mathbf{S} = [(n_1-1)\\mathbf{S}_1 + (n_2-1)\\mathbf{S}_2]/(n_1 + n_2 - 2)\\) \\(\\mathbf{\\bar{x}}_i\\) \\(\\mathbf{S}_i\\) vector means covariance matrix \\(\\)th group (sample), respectively.corresponding classification function written \\(CF =(\\mathbf{\\bar{x}}_1 - \\mathbf{\\bar{x}}_2)' \\mathbf{S}^{-1} \\mathbf{x} - \\frac{1}{2} (\\mathbf{\\bar{x}}_1 - \\mathbf{\\bar{x}}_2)' \\mathbf{S}^{-1} (\\mathbf{\\bar{x}}_1 + \\mathbf{\\bar{x}}_2)\\). expression \\((\\mathbf{\\bar{x}}_1 - \\mathbf{\\bar{x}}_2)' \\mathbf{S}^{-1}\\) referred discriminant coefficients.agreement section 6.1 make sure \\(LDF\\) \\(CF\\) entail. crabs data set package MASS consists 200 rows 8 columns, describing 5 morphological measurements 50 crabs two colour forms sexes, species Leptograpsus variegatus collected Fremantle, Western Australia.Obtain covariance matrix two species crabs.Obtain covariance matrix two species crabs.Obtain vector means two species crabs.Obtain vector means two species crabs.Use standard R functions operating matrices write function code calculates discriminant coefficients given linear discriminant function.Use standard R functions operating matrices write function code calculates discriminant coefficients given linear discriminant function.Write function determines linear discriminant function returnWrite function determines linear discriminant function returnthe discriminant coefficients;discriminant coefficients;CF observation.CF observation.Repeat discriminant analysis , discriminating male female crabs, ignoring differences species.Compare results using lda() function package MASS commandConsider matrix \\(\\mathbf{}:n \\times m\\). understood column space \\(V(\\mathbf{})\\) orthogonal complement \\(V^⊥(\\mathbf{})\\)? R function svd() can used obtain orthogonal basis \\(V(\\mathbf{})\\) rank \\(\\mathbf{}\\) \\(k\\). also want determine orthogonal basis \\(V^⊥(\\mathbf{})\\). can function svd() used simultaneously find basis \\(V(\\mathbf{})\\) \\(V^⊥(\\mathbf{})\\)?propositions can proved follows: Assume \\(n≥m\\) orthonormal basis \\(V(\\mathbf{})\\) well \\(V^⊥(\\mathbf{})\\) must found. Append \\(n-m\\) zero vectors size \\(n\\) matrix \\(\\mathbf{}\\). Write \\(\\mathbf{}^0\\) appended matrix perform function svd() \\(\\mathbf{}^0\\). follows \\(\\mathbf{}^0 = \\mathbf{UDV}'\\) \\(\\mathbf{}^0 \\mathbf{V} = \\mathbf{UD}\\), .e. \\[\n\\begin{bmatrix}\n\\mathbf{}^0 \\mathbf{v}_{(1)} & \\mathbf{}^0 \\mathbf{v}_{(2)} & \\dots & \\mathbf{}^0 \\mathbf{v}_{(n)}\n\\end{bmatrix} = \\begin{bmatrix}\nd_1 \\mathbf{u}_{(1)} & d_2 \\mathbf{u}_{(2)} & \\dots & d_n \\mathbf{u}_{(n)}\n\\end{bmatrix}.\n\\]\nNow \\(\\mathbf{}^0 \\mathbf{v}_{()} \\V(\\mathbf{}^0) = V(\\mathbf{})\\). (Motivate detail.) follows \\(\\mathbf{u}_{()} \\V(\\mathbf{}), = 1, 2, \\dots, k\\) . (Motivate detail.) Therefore columns \\(\\mathbf{U}\\) correspond non-zero \\(d\\)s form orthonormal basis \\(V(\\mathbf{})\\) columns \\(\\mathbf{U}\\) correspond zero \\(d\\)s form orthonormal basis orthogonal complement \\(V(\\mathbf{})\\). Motivate last statement detail.Based results (8) , write R function returns \\(rank(\\mathbf{})\\), orthogonal basis \\(V(\\mathbf{})\\) orthogonal basis \\(V^⊥(\\mathbf{})\\). Test function matrix:\\[\n\\mathbf{} = \\begin{bmatrix}\n                    1 & 1 & 2 \\\\\n                    2 & 2 & 4 \\\\\n                    3 & 2 & 7 \\\\\n                    -1 & -5 & 2 \\\\\n                    2 & 7 & -1\n              \\end{bmatrix}\n\\]many graphical displays whose purpose represent distances two dimensions, essential scales axes geometrically accurate. called aspect ratio graph R graphics parameter par used controlling aspect ratio graphics R. default value par generally ensure scales horizontal vertical axes geometrically accurate. ensuring geometrically accurate scales setting asp = 1 must explicitly specified e.g. plot(x =, y =, asp = 1).going investigate effect aspect ratio graphs writing function drawing circle. agreement section 6.1 start project reviewing basic concepts regarding coordinates graphical purposes. Figure 6.1 summarizes reference point geometric space using () Cartesian coordinates (b) polar coordinates.\nFigure 6.1: Cartesian polar coordinates referencing point graph.\nConsider following function drawing circle specified radius centred origin:Next, add argument asp = 1 call plot .circle. Run changed function; change size graph window. happens?Next, add argument asp = 1 call plot .circle. Run changed function; change size graph window. happens?changes necessary producing circle centred point geometrical space? Make necessary changes .circle() constructing circle centred user specified point graph.changes necessary producing circle centred point geometrical space? Make necessary changes .circle() constructing circle centred user specified point graph.understood p-dimensional ellipsoid?\nGive mathematical expression matrix notation describes ellipsoid p dimensions.\nDescribe axes ellipsoid terms eigenvalues eigenvectors.\nLet \\(p = 2\\). Simplify expression ellipse concerned terms scalar quantities.\nUse plot() write R-function draw ellipse. Make provision centre point \\((0, 0)\\) well arbitrary \\((x_1,x_2)\\) point; correlation two variables well positive negative correlation.\nUse function written (iv) illustrate differences plot (using default value argument asp) plot asp=1.\nunderstood p-dimensional ellipsoid?Give mathematical expression matrix notation describes ellipsoid p dimensions.Give mathematical expression matrix notation describes ellipsoid p dimensions.Describe axes ellipsoid terms eigenvalues eigenvectors.Describe axes ellipsoid terms eigenvalues eigenvectors.Let \\(p = 2\\). Simplify expression ellipse concerned terms scalar quantities.Let \\(p = 2\\). Simplify expression ellipse concerned terms scalar quantities.Use plot() write R-function draw ellipse. Make provision centre point \\((0, 0)\\) well arbitrary \\((x_1,x_2)\\) point; correlation two variables well positive negative correlation.Use plot() write R-function draw ellipse. Make provision centre point \\((0, 0)\\) well arbitrary \\((x_1,x_2)\\) point; correlation two variables well positive negative correlation.Use function written (iv) illustrate differences plot (using default value argument asp) plot asp=1.Use function written (iv) illustrate differences plot (using default value argument asp) plot asp=1.experimental design often useful predict value dependent variable every combination levels factor variables. Write R function task makes provision number factor arguments also provides dataframe factors columns every combination levels rows. Every levels-combination can appear . function must user friendly must test given independent variable factor variable. Hint: Study help file expand.grid().experimental design often useful predict value dependent variable every combination levels factor variables. Write R function task makes provision number factor arguments also provides dataframe factors columns every combination levels rows. Every levels-combination can appear . function must user friendly must test given independent variable factor variable. Hint: Study help file expand.grid().Consider following game. given computer screen containing rectangle filled random evenly spaced letters. Repetitions letter allowed. challenge user sequentially select first \\(n\\) letters alphabet quickly possible. user must read line left right top bottom. Going backwards allowed. time complete task taken well whether rules obeyed. Program R version game.Consider following game. given computer screen containing rectangle filled random evenly spaced letters. Repetitions letter allowed. challenge user sequentially select first \\(n\\) letters alphabet quickly possible. user must read line left right top bottom. Going backwards allowed. time complete task taken well whether rules obeyed. Program R version game.","code":"\npredict (lda (sex ~ FL + RW + CL + CW + BD, data=crabs))$class\nmy.circle <- function (r = 1, xrange = -2:2, yrange = -2:2) \n{ plot (x = xrange, y = yrange, type = 'n', xlab = '', ylab = '',\n        xaxt = 'n', yaxt = 'n')\n  theta <- seq(from = 0, to = 2 * pi, by = 0.01) \n  # Notice the use of radians.\n  lines (x = r*cos(theta), y = r*sin(theta))\n  abline(h = 0)\n  abline(v = 0)\n}"},{"path":"functions.html","id":"functions","chapter":"7 Writing functions in R","heading":"7 Writing functions in R","text":"Although already written various functions R, chapter writing R functions approached systematically.","code":""},{"path":"functions.html","id":"general-2","chapter":"7 Writing functions in R","heading":"7.1 General","text":"good way learn functions write new function look existing ones. example consider like write function implement novel plotting procedure. start taking look existing plot function.helpful give instruction:decide take look plot.default can bySince new plotting method aimed categorical data decide rather take look plot.factor. asterisked function hence visible:Asterisked functions can inspected using following method:default values assigned arguments functions?default values assigned arguments functions?default behaviour plot.factor()?default behaviour plot.factor()?tasks can achieved pmatch() understood partial matching? happen plot.factor() called () legend.text = 'AA=Agecat'; (ii) leg = 'AA=Agecat'? Explain.tasks can achieved pmatch() understood partial matching? happen plot.factor() called () legend.text = 'AA=Agecat'; (ii) leg = 'AA=Agecat'? Explain.Discuss usage missing().Discuss usage missing().Give example usage function stop(message= \" \").Give example usage function stop(message= \" \").Give example usage function warning(message= \" \").Give example usage function warning(message= \" \").usage function warnings()?usage function warnings()?can functions called without specifying arguments e.g. q()?can functions called without specifying arguments e.g. q()?body function consists single instruction necessary enclose braces.body function consists single instruction necessary enclose braces.convention use last evaluated statement function’s return value. several objects returned gather list.convention use last evaluated statement function’s return value. several objects returned gather list.function return() single object list objects useful interrupt function intermediate stage return object list objects particular stage. usually done function development.function return() single object list objects useful interrupt function intermediate stage return object list objects particular stage. usually done function development.Sometimes meaningful value return e.g. function written primarily produce plot. cases like function invisible() can used last statement function. example usage invisible() give following instructions:Sometimes meaningful value return e.g. function written primarily produce plot. cases like function invisible() can used last statement function. example usage invisible() give following instructions:Now look end function boxplot.default() see invisible() implemented.Libraries (packages) R functions. Attaching detaching libraries search path. (Revise Chapter 1)Libraries (packages) R functions. Attaching detaching libraries search path. (Revise Chapter 1)Creating new function using scripts fix(). (Revise Chapter 1)Creating new function using scripts fix(). (Revise Chapter 1)Editing existing function using scripts fix(). (Revise Chapter 1)Editing existing function using scripts fix(). (Revise Chapter 1)Note writing function line can interrupted place continued next line. Warning: careful put break point marks completion executable statement. Explain.Note writing function line can interrupted place continued next line. Warning: careful put break point marks completion executable statement. Explain.","code":"\nplot\n#> function (x, y, ...) \n#> UseMethod(\"plot\")\n#> <bytecode: 0x0000027164d25108>\n#> <environment: namespace:base>\nmethods(plot)\n#>  [1] plot.acf*           plot.data.frame*   \n#>  [3] plot.decomposed.ts* plot.default       \n#>  [5] plot.dendrogram*    plot.density*      \n#>  [7] plot.ecdf           plot.factor*       \n#>  [9] plot.formula*       plot.function      \n#> [11] plot.hclust*        plot.histogram*    \n#> [13] plot.HoltWinters*   plot.isoreg*       \n#> [15] plot.lm*            plot.medpolish*    \n#> [17] plot.mlm*           plot.ppr*          \n#> [19] plot.prcomp*        plot.princomp*     \n#> [21] plot.profile*       plot.profile.nls*  \n#> [23] plot.R6*            plot.raster*       \n#> [25] plot.spec*          plot.stepfun       \n#> [27] plot.stl*           plot.table*        \n#> [29] plot.ts             plot.tskernel*     \n#> [31] plot.TukeyHSD*     \n#> see '?methods' for accessing help and source code\nplot.default\n#> function (x, y = NULL, type = \"p\", xlim = NULL, ylim = NULL, \n#>     log = \"\", main = NULL, sub = NULL, xlab = NULL, ylab = NULL, \n#>     ann = par(\"ann\"), axes = TRUE, frame.plot = axes, panel.first = NULL, \n#>     panel.last = NULL, asp = NA, xgap.axis = NA, ygap.axis = NA, \n#>     ...) \n#> {\n#>     localAxis <- function(..., col, bg, pch, cex, lty, lwd) Axis(...)\n#>     localBox <- function(..., col, bg, pch, cex, lty, lwd) box(...)\n#>     localWindow <- function(..., col, bg, pch, cex, lty, lwd) plot.window(...)\n#>     localTitle <- function(..., col, bg, pch, cex, lty, lwd) title(...)\n#>     xlabel <- if (!missing(x)) \n#>         deparse1(substitute(x))\n#>     ylabel <- if (!missing(y)) \n#>         deparse1(substitute(y))\n#>     xy <- xy.coords(x, y, xlabel, ylabel, log)\n#>     if (is.null(xlab)) \n#>         xlab <- xy$xlab\n#>     if (is.null(ylab)) \n#>         ylab <- xy$ylab\n#>     if (is.null(xlim)) \n#>         xlim <- range(xy$x[is.finite(xy$x)])\n#>     if (is.null(ylim)) \n#>         ylim <- range(xy$y[is.finite(xy$y)])\n#>     dev.hold()\n#>     on.exit(dev.flush())\n#>     plot.new()\n#>     localWindow(xlim, ylim, log, asp, ...)\n#>     panel.first\n#>     plot.xy(xy, type, ...)\n#>     panel.last\n#>     if (axes) {\n#>         localAxis(if (is.null(y)) \n#>             xy$x\n#>         else x, side = 1, gap.axis = xgap.axis, ...)\n#>         localAxis(if (is.null(y)) \n#>             x\n#>         else y, side = 2, gap.axis = ygap.axis, ...)\n#>     }\n#>     if (frame.plot) \n#>         localBox(...)\n#>     if (ann) \n#>         localTitle(main = main, sub = sub, xlab = xlab, ylab = ylab, \n#>             ...)\n#>     invisible()\n#> }\n#> <bytecode: 0x0000027166148d80>\n#> <environment: namespace:graphics>\nplot.factor\n#> Error: object 'plot.factor' not found\ngetAnywhere(plot.factor)\n#> A single object matching 'plot.factor' was found\n#> It was found in the following places\n#>   registered S3 method for plot from namespace graphics\n#>   namespace:graphics\n#> with value\n#> \n#> function (x, y, legend.text = NULL, ...) \n#> {\n#>     if (missing(y) || is.factor(y)) {\n#>         dargs <- list(...)\n#>         axisnames <- dargs$axes %||% if (!is.null(dargs$xaxt)) \n#>             dargs$xaxt != \"n\"\n#>         else TRUE\n#>     }\n#>     if (missing(y)) {\n#>         barplot(table(x), axisnames = axisnames, ...)\n#>     }\n#>     else if (is.factor(y)) {\n#>         if (is.null(legend.text)) \n#>             spineplot(x, y, ...)\n#>         else {\n#>             args <- c(list(x = x, y = y), list(...))\n#>             args$yaxlabels <- legend.text\n#>             do.call(\"spineplot\", args)\n#>         }\n#>     }\n#>     else if (is.numeric(y)) \n#>         boxplot(y ~ x, ...)\n#>     else NextMethod(\"plot\")\n#> }\n#> <bytecode: 0x0000027166bb2538>\n#> <environment: namespace:graphics>\nboxplot(rnorm(100), plot = TRUE)\nboxplot(rnorm(100), plot = FALSE)\n#> $stats\n#>             [,1]\n#> [1,] -2.26815521\n#> [2,] -0.81951349\n#> [3,]  0.01436698\n#> [4,]  0.52755909\n#> [5,]  2.50781656\n#> \n#> $n\n#> [1] 100\n#> \n#> $conf\n#>            [,1]\n#> [1,] -0.1984705\n#> [2,]  0.2272045\n#> \n#> $out\n#> numeric(0)\n#> \n#> $group\n#> numeric(0)\n#> \n#> $names\n#> [1] \"1\""},{"path":"functions.html","id":"writing-a-new-function","chapter":"7 Writing functions in R","heading":"7.2 Writing a new function","text":"Determining indices elements vector matrix meet certain condition: function ()Write following function:Inspect airquality data set using command str(airquality).Inspect airquality data set using command str(airquality).Use () function find indices () NAs, (ii) maximum value (iii) minimum value airquality data set.Use () function find indices () NAs, (ii) maximum value (iii) minimum value airquality data set.Repeat (b) using built-function ().Repeat (b) using built-function ().","code":"\nwhere <- function(x, cond)\n{ # Argument cond must evaluate to a logical value\n     if(!is.matrix(x))\n       seq(along = x)[cond]\n     else matrix(c(row(x)[cond], col(x)[cond]), ncol = 2)\n}"},{"path":"functions.html","id":"checking-for-object-name-clashes","chapter":"7 Writing functions in R","heading":"7.3 Checking for object name clashes","text":"happens R object given name existing object?happens R object given name existing object?Discuss usages functions apropos(), conflicts(), find() match() naming objects.Discuss usages functions apropos(), conflicts(), find() match() naming objects.Remember function called R evaluator first looks global environment function name subsequently attached packages date bases order shown search(). evaluator generally stops searching name found first time. two attached packages functions name one mask object . example, function gam() exists two packages: gam mgcv. attached commandRemember function called R evaluator first looks global environment function name subsequently attached packages date bases order shown search(). evaluator generally stops searching name found first time. two attached packages functions name one mask object . example, function gam() exists two packages: gam mgcv. attached commandwill return version.operator :: can used access intended version gam() using call mgcv::gam() gam::gam().operator :: can used access intended version gam() using call mgcv::gam() gam::gam().writing R packages namespace package provides another mechanism ensuring correct version function used. Note regard operator ::: can used access objects exported.writing R packages namespace package provides another mechanism ensuring correct version function used. Note regard operator ::: can used access objects exported.","code":"\nlibrary (mgcv)\n#> Loading required package: nlme\n#> This is mgcv 1.9-3. For overview type 'help(\"mgcv-package\")'.\nlibrary (gam)\n#> Loading required package: splines\n#> Loading required package: foreach\n#> Loaded gam 1.22-6\n#> \n#> Attaching package: 'gam'\n#> The following objects are masked from 'package:mgcv':\n#> \n#>     gam, gam.control, gam.fit, s\nfind(\"gam\")\n#> [1] \"package:gam\"  \"package:mgcv\""},{"path":"functions.html","id":"returning-multiple-values","chapter":"7 Writing functions in R","heading":"7.4 Returning multiple values","text":"","code":""},{"path":"functions.html","id":"exercise-11","chapter":"7 Writing functions in R","heading":"7.4.1 Exercise","text":"Write R function returns mean, median, variance, minimum, maximum coefficient variation numeric vector sample data. different components must accessible name. Test function value rnorm(1000). Hint: Use construct list (mean = ..., median = ..., ...).","code":""},{"path":"functions.html","id":"local-variables-and-evaluation-environments","chapter":"7 Writing functions in R","heading":"7.5 Local variables and evaluation environments","text":"object stored created script fix()?object stored created script fix()?local objects (objects created execution function) stored?local objects (objects created execution function) stored?Explain evaluation environment works.Explain evaluation environment works.understood global environment?understood global environment?Study R help-file w.r.t. operator <<-. useful use operator? dangers inherent operator?Study R help-file w.r.t. operator <<-. useful use operator? dangers inherent operator?understood scope expression function?understood scope expression function?symbols occur body function can divided three classes: formal parameters, local variables free variables. formal parameters function appearing within parentheses denoting argument list function. values determined process binding actual function arguments formal parameters. Local variables created evaluation expressions body functions. Variables neither formal parameters local variables called free variables. Free variables become local variables assigned . Consider following function definition.function, datvec formal parameter, object mean left-hand assignment symbol local variable (confused function mean() right-hand side assignment symbol) Traffic free variable. R free variable bindings resolved first looking environment function created. called lexical scope.following function call made prompt working directory fun(1:25) formal parameter datvec within body function assigned value 1:25 (actual argument) mean assigned local object mean. free parameter Traffic found global environment data base search path required graph created else error message sent console. Perform call.","code":"\nfun <- function(datvec) {\n          mean <- mean(datvec)\n          print(mean)\n          plot(datvec)\n          plot(Traffic)\n       }"},{"path":"functions.html","id":"cleaning-up","chapter":"7 Writing functions in R","heading":"7.6 Cleaning up","text":"Study function .exit() used. function can used reset options changed R-session back original values session ended function terminates error message. also convenient removal temporary files.Study function .exit() used. function can used reset options changed R-session back original values session ended function terminates error message. also convenient removal temporary files.Study uses functions .First() .Last().Study uses functions .First() .Last().Write function automatically opens graph window square plot region R-session started.Write function automatically opens graph window square plot region R-session started.","code":""},{"path":"functions.html","id":"variable-number-of-arguments-argument-...","chapter":"7 Writing functions in R","heading":"7.7 Variable number of arguments: argument ...","text":"Consider following situation: want write function complex task. particular stage graph intermediate results constructed. requires calling function contain call hist function. example chunk code executing task:call like complexfun(rnorm(1000), 'yellow') can now executed desired result. problem hist function several arguments like able access passing suitable actual values calling function complexfun. Instead resort provide complete set arguments argument list complexfun R provides neat way addressing situation: argument ... acts like formal argument except can represent variable number arguments. see argument ... works change function :Arguments represented argument ... argument list hist passed hist argument ... appearing arguments list function complexfun2:Write function retrieve maximum length unspecified number arguments specified mode. another example use ... argument:Note named argument must specified function call:","code":"\ncomplexfun <- function(datmat,colgraph)\n    { datmat <- scale(datmat) \n       # Several lines of complex code here \n      hist(datmat, col = colgraph)              }\ncomplexfun2 <- function(datmat, ... )\n { datmat <- scale(datmat) \n       # Several lines of complex code here \n   hist(datmat, ... )    }\ncomplexfun2(datmat = rnorm(1000), col = 'yellow', \n        probability = TRUE, xlim = c(-5,5))\nmaxlen <- function (mode.use=\"numeric\", ...) \n  { my.list <- list(...)\n    out <- 0\n    for(x in my.list) \n      print (mode(x)) #if(mode(x) == mode.use) out <- max(out,length(x))\n    out\n  }\nmaxlen(1:10, 1:15, 1:3, letters)\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0\nmaxlen(mode.use=\"numeric\", 1:10, 1:15, 1:3, letters)\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0\nmaxlen(1:10, 1:15, 1:3, letters, mode.use=\"character\")\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0\nmaxlen(mode.use=\"character\", 1:10, 1:15, 1:3, letters)\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"numeric\"\n#> [1] \"character\"\n#> [1] 0"},{"path":"functions.html","id":"retrieving-names-of-arguments-functions-deparse-and-substitute","chapter":"7 Writing functions in R","heading":"7.8 Retrieving names of arguments: functions deparse() and substitute()","text":"many practical situations requiring conversion mathematical expressions character strings (text) , conversely, requiring conversion text mathematical expressions. tools (functions) provided R achieving conversions summarized Figure 7.1.\nFigure 7.1: Converting text mathematical expression mathematical expressions text.\nTask: write R function plot two vectors using axis labels names objects passed arguments function.follows Figure 7.1 function substitute() takes expression argument returns unevaluated. order evaluate return value substitute() function eval() must used. function deparse() takes argument unevaluated expression converts character string. Now ready write following function:Study illustrate usage function labplot().Study illustrate usage function labplot().Figure 7.1 also follows function parse() opposite deparse() converting character string unevaluated expression. latter unevaluated expression can evaluated needed using eval().Figure 7.1 also follows function parse() opposite deparse() converting character string unevaluated expression. latter unevaluated expression can evaluated needed using eval().","code":"\nlabplot <- function (x,y) \n{ xname <- deparse(substitute(x))\n yname <- deparse(substitute(y))\n plot(x,y, xlab=xname, ylab=yname, main = paste(\"Plot of\",\n        yname,\"versus\", xname))\n}"},{"path":"functions.html","id":"operators-1","chapter":"7 Writing functions in R","heading":"7.9 Operators","text":"Execute following instructionin order obtain examples operators available R.Operators special R functions. Discuss statement. respects operators differ ordinary R functions?Operators special R functions. Discuss statement. respects operators differ ordinary R functions?Write operator %E% determine Euclidean distance two vectors give example usage. Hint: creating operators fix() using scripts name must given character string e.g. fix(\"%E%\").Write operator %E% determine Euclidean distance two vectors give example usage. Hint: creating operators fix() using scripts name must given character string e.g. fix(\"%E%\").","code":"\nobjects('package:base')[1:31]\n#>  [1] \"-\"                 \"-.Date\"           \n#>  [3] \"-.POSIXt\"          \"!\"                \n#>  [5] \"!.hexmode\"         \"!.octmode\"        \n#>  [7] \"!=\"                \"$\"                \n#>  [9] \"$.DLLInfo\"         \"$.package_version\"\n#> [11] \"$<-\"               \"$<-.data.frame\"   \n#> [13] \"$<-.POSIXlt\"       \"%%\"               \n#> [15] \"%*%\"               \"%/%\"              \n#> [17] \"%||%\"              \"%in%\"             \n#> [19] \"%o%\"               \"%x%\"              \n#> [21] \"&\"                 \"&&\"               \n#> [23] \"&.hexmode\"         \"&.octmode\"        \n#> [25] \"(\"                 \"*\"                \n#> [27] \"*.difftime\"        \"/\"                \n#> [29] \"/.difftime\"        \":\"                \n#> [31] \"::\""},{"path":"functions.html","id":"replacement-functions","chapter":"7 Writing functions in R","heading":"7.10 Replacement functions","text":"Execute following instructionand notice object names appear pairs name one member pair ending <-. Examples dim<-, levels<-, diag<-, names<-, rownames<-, colnames<- dimnames<-. Functions names ending <- called replacement functions. replacement function appears left-hand side assignment symbol using name without <- replace contents objects appearing argument list contents object appearing right-hand side assignment symbol e.g.:can object diag<- inspected different object diag? Compare result following function calls:respects replacement functions differ functions?order write replacement function following rules must met:function name must end <-function name must end <-function must return complete object suitable changes madethe function must return complete object suitable changes madethe final argument function corresponding replacement data right-hand side assignment, must named valuethe final argument function corresponding replacement data right-hand side assignment, must named valueusually companion function exists name without <-.usually companion function exists name without <-.example, write replacement function undefined() replace missing values data object values right-hand side:function can created edited using fix(\"undefined<-\"). Illustrate usage undefined().","code":"\nobjects('package:base')[300:400]\n#>   [1] \"c.factor\"                  \n#>   [2] \"c.noquote\"                 \n#>   [3] \"c.numeric_version\"         \n#>   [4] \"c.POSIXct\"                 \n#>   [5] \"c.POSIXlt\"                 \n#>   [6] \"c.warnings\"                \n#>   [7] \"call\"                      \n#>   [8] \"callCC\"                    \n#>   [9] \"capabilities\"              \n#>  [10] \"casefold\"                  \n#>  [11] \"cat\"                       \n#>  [12] \"cbind\"                     \n#>  [13] \"cbind.data.frame\"          \n#>  [14] \"ceiling\"                   \n#>  [15] \"char.expand\"               \n#>  [16] \"character\"                 \n#>  [17] \"charmatch\"                 \n#>  [18] \"charToRaw\"                 \n#>  [19] \"chartr\"                    \n#>  [20] \"chkDots\"                   \n#>  [21] \"chol\"                      \n#>  [22] \"chol.default\"              \n#>  [23] \"chol2inv\"                  \n#>  [24] \"choose\"                    \n#>  [25] \"chooseOpsMethod\"           \n#>  [26] \"chooseOpsMethod.default\"   \n#>  [27] \"class\"                     \n#>  [28] \"class<-\"                   \n#>  [29] \"clearPushBack\"             \n#>  [30] \"close\"                     \n#>  [31] \"close.connection\"          \n#>  [32] \"close.srcfile\"             \n#>  [33] \"close.srcfilealias\"        \n#>  [34] \"closeAllConnections\"       \n#>  [35] \"col\"                       \n#>  [36] \"colMeans\"                  \n#>  [37] \"colnames\"                  \n#>  [38] \"colnames<-\"                \n#>  [39] \"colSums\"                   \n#>  [40] \"commandArgs\"               \n#>  [41] \"comment\"                   \n#>  [42] \"comment<-\"                 \n#>  [43] \"complex\"                   \n#>  [44] \"computeRestarts\"           \n#>  [45] \"conditionCall\"             \n#>  [46] \"conditionCall.condition\"   \n#>  [47] \"conditionMessage\"          \n#>  [48] \"conditionMessage.condition\"\n#>  [49] \"conflictRules\"             \n#>  [50] \"conflicts\"                 \n#>  [51] \"Conj\"                      \n#>  [52] \"contributors\"              \n#>  [53] \"cos\"                       \n#>  [54] \"cosh\"                      \n#>  [55] \"cospi\"                     \n#>  [56] \"crossprod\"                 \n#>  [57] \"Cstack_info\"               \n#>  [58] \"cummax\"                    \n#>  [59] \"cummin\"                    \n#>  [60] \"cumprod\"                   \n#>  [61] \"cumsum\"                    \n#>  [62] \"curlGetHeaders\"            \n#>  [63] \"cut\"                       \n#>  [64] \"cut.Date\"                  \n#>  [65] \"cut.default\"               \n#>  [66] \"cut.POSIXt\"                \n#>  [67] \"data.class\"                \n#>  [68] \"data.frame\"                \n#>  [69] \"data.matrix\"               \n#>  [70] \"date\"                      \n#>  [71] \"debug\"                     \n#>  [72] \"debuggingState\"            \n#>  [73] \"debugonce\"                 \n#>  [74] \"declare\"                   \n#>  [75] \"default.stringsAsFactors\"  \n#>  [76] \"delayedAssign\"             \n#>  [77] \"deparse\"                   \n#>  [78] \"deparse1\"                  \n#>  [79] \"det\"                       \n#>  [80] \"detach\"                    \n#>  [81] \"determinant\"               \n#>  [82] \"determinant.matrix\"        \n#>  [83] \"dget\"                      \n#>  [84] \"diag\"                      \n#>  [85] \"diag<-\"                    \n#>  [86] \"diff\"                      \n#>  [87] \"diff.Date\"                 \n#>  [88] \"diff.default\"              \n#>  [89] \"diff.difftime\"             \n#>  [90] \"diff.POSIXt\"               \n#>  [91] \"difftime\"                  \n#>  [92] \"digamma\"                   \n#>  [93] \"dim\"                       \n#>  [94] \"dim.data.frame\"            \n#>  [95] \"dim<-\"                     \n#>  [96] \"dimnames\"                  \n#>  [97] \"dimnames.data.frame\"       \n#>  [98] \"dimnames<-\"                \n#>  [99] \"dimnames<-.data.frame\"     \n#> [100] \"dir\"                       \n#> [101] \"dir.create\"\nX <- matrix (1:12, ncol = 3, dimnames = \n               list (paste0 (\"Row\", 1:4), paste0 (\"X\", 1:3)))\na <- rownames(X) # Function rownames in action.\nrownames(X) <- 1:nrow(X) # Replacement function 'rownames<-' in action.\ngetAnywhere('diag')\n#> 2 differing objects matching 'diag' were found\n#> in the following places\n#>   package:base\n#>   namespace:base\n#>   namespace:Matrix\n#> Use [] to view one of them\ngetAnywhere('diag<-')\n#> 2 differing objects matching 'diag<-' were found\n#> in the following places\n#>   package:base\n#>   namespace:base\n#>   namespace:Matrix\n#> Use [] to view one of them\n\"undefined<-\" <- function (x, codes = numeric(), value) \n  { if (length(codes) > 0) x[x %in% codes] <- NA\n    x[is.na(x)] <- value\n    x\n  }"},{"path":"functions.html","id":"default-values-and-lazy-evaluation","chapter":"7 Writing functions in R","heading":"7.11 Default values and lazy evaluation","text":"function match.arg() useful selecting default value one set possible values. Consider following example:Functions R language governed principle known lazy evaluation means default value evaluated actually needed within function body. result lazy evaluation might happen function call default values never evaluated.","code":"\nchoice <- function(method=c(\"PCA\",\"CVA\",\"CA\",\"NONLIN\"))\n   { match.arg(method)  }\nchoice()\n#> [1] \"PCA\"\nchoice(\"CVA\")\n#> [1] \"CVA\"\nchoice(\"xx\")\n#> Error in match.arg(method): 'arg' should be one of \"PCA\", \"CVA\", \"CA\", \"NONLIN\""},{"path":"functions.html","id":"the-dynamic-loading-of-external-routines","chapter":"7 Writing functions in R","heading":"7.12 The dynamic loading of external routines","text":"Compiled code can run instances much faster corresponding code R. functions .C() .Fortran() allow users make use programs written C Fortran R functions. done illustrated . Study example carefully consult help files details needed.\nFirst R function created compute matrix product two matrices:Next Fortran subroutine written performing matrix multiplication. Fortran code subroutine given :Next dynamic link library (.dll) made Fortran subroutine. easiest way use command R CMD SHLIB matm.f Command Prompt. dll available C:\\matm64.dll.Now R function written Fortran code called:order use matmult.Fortran() correct dll must loaded current folder using function dyn.load():Compare answers execution time matmult() matmult.Fortran() different sized matrices.Rcpp package made inclusion C++ code R considerably easier robust. detailed description package see Rcpp vignette intro.","code":"\nmatmult <- function (A,B) \n { if(ncol(A) != nrow(B)) stop(\"A and B not conformable with                 \n                       respect to matrix multiplication \\n\")\n   n <- nrow(A)\n   q <- ncol(B)\n   Cmat <- matrix(NA, nrow=n, ncol=q)\n   for(i in 1:n)\n      { for(j in 1:q) Cmat[i,j] <- sum(A[i,] * B[,j])\n      }\n  Cmat\n  }      SUBROUTINE MATM (A1, A2B1, B2, A, B, OUT)\nC     This subroutine performs matrix multiplication.\nC     This should be improved with optimized code (such as \nC     from Linpack, etc.)\n      IMPLICIT NONE\n      INTEGER A1, A2B1, B2\n      DOUBLE PRECISION A(A1,A2B1), B(A2B1,B2), OUT(A1,B2)\nC     DUMMIES\n      INTEGER I, J, K\n      DO 300,J=1,B2\n        DO 200,I=1,A1\n          OUT(I,J)=0\n          DO 100,K=1,A2B1\n            OUT(I,J)=OUT(I,J)+A(I,K)*B(K,J)\n100   CONTINUE\n200   CONTINUE\n300   CONTINUE\n      END\nmatmult.Fortran <-function (A,B) \n { if(ncol(A) != nrow(B)) stop(\"A and B not conformable with \n                       respect to matrix multiplication \\n\")\n    n <- nrow(A)\n    q <- ncol(B)\n    p <- ncol(A)\n    Cmat <- matrix(0, nrow=n, ncol=q)\n    storage.mode(A) <- \"double\"\n    storage.mode(B) <- \"double\"\n    storage.mode(Cmat) <- \"double\"\n    value <- .Fortran(\"matm\", as.integer(n), as.integer(p), \n                          as.integer(q), A, B, matprod=Cmat)\n    value$matprod        }\ndyn.load(\"full path\\\\matm64.dll\")"},{"path":"mapping.html","id":"mapping","chapter":"8 Vectorized programming and mapping functions","heading":"8 Vectorized programming and mapping functions","text":"chapter continue study art R programming. important topic set tools operating objects like matrices, dataframes lists wholes.","code":""},{"path":"mapping.html","id":"mapping-functions-to-a-matrix","chapter":"8 Vectorized programming and mapping functions","heading":"8.1 Mapping functions to a matrix","text":"understood mapping function use functions?understood mapping function use functions?function apply().\nthree arguments required?\nSuppose third argument function. arguments function used within apply()?\nfunction apply().three arguments required?three arguments required?Suppose third argument function. arguments function used within apply()?Suppose third argument function. arguments function used within apply()?result instruction apply(.na(x),2,)?result instruction apply(.na(x),2,)?result instruction x[ ,!apply(.na(x), 2,)]?result instruction x[ ,!apply(.na(x), 2,)]?result instruction x[ ,!apply(.na(x), 2,)]?result instruction x[ ,!apply(.na(x), 2,)]?Set random seed 137921. Obtain matrix \\(\\mathbf{}:10 \\times 6\\) random \\(n(0, 1)\\) values. Use apply() find \\(10\\%\\) trimmed mean row.Set random seed 137921. Obtain matrix \\(\\mathbf{}:10 \\times 6\\) random \\(n(0, 1)\\) values. Use apply() find \\(10\\%\\) trimmed mean row.function sweep().\narguments required?\nsimilarities differences arguments sweep() apply()?\nNormalise columns given matrix zero means unit variances using scale(), apply() sweep(). method fastest?\nfunction sweep().arguments required?arguments required?similarities differences arguments sweep() apply()?similarities differences arguments sweep() apply()?Normalise columns given matrix zero means unit variances using scale(), apply() sweep(). method fastest?Normalise columns given matrix zero means unit variances using scale(), apply() sweep(). method fastest?function ifelse().function ifelse().usage illustrated following diagram.Note difference function ifelse() control statement: - else.Note difference function ifelse() control statement: - else.arguments required?arguments required?Study help file detail.Study help file detail.function outer().\narguments required?\nRevise previous example outer() constructing perspective plot persp().\nfunction outer().arguments required?arguments required?Revise previous example outer() constructing perspective plot persp().Revise previous example outer() constructing perspective plot persp().Work following examples note particular functions used together:\nFind maximum value(s) column LifeCycleSavings data set.\nUse apply() together cut() divide column LifeCycleSaving data set low, medium high.\nUse apply() plot column LifeCycleSaving data set ratio pop75 pop15 x-axis.\nUse apply() find coefficient variation column LifeCycleSaving data set.\nUse apply() together cbind() rbind() obtain table minimum maximum values column LifeCycleSaving data set.\nRepeat (v) using airquality data set without elimination NAs using appropriate function definition call apply().\nUse sweep() convert LifeCycleSaving data set standardized scores. apply() also used task? Discuss.\nUse ifelse() convert negative values given vector zero leaving positive values missing values unchanged. Illustrate.\nWork following examples note particular functions used together:Find maximum value(s) column LifeCycleSavings data set.Find maximum value(s) column LifeCycleSavings data set.Use apply() together cut() divide column LifeCycleSaving data set low, medium high.Use apply() together cut() divide column LifeCycleSaving data set low, medium high.Use apply() plot column LifeCycleSaving data set ratio pop75 pop15 x-axis.Use apply() plot column LifeCycleSaving data set ratio pop75 pop15 x-axis.Use apply() find coefficient variation column LifeCycleSaving data set.Use apply() find coefficient variation column LifeCycleSaving data set.Use apply() together cbind() rbind() obtain table minimum maximum values column LifeCycleSaving data set.Use apply() together cbind() rbind() obtain table minimum maximum values column LifeCycleSaving data set.Repeat (v) using airquality data set without elimination NAs using appropriate function definition call apply().Repeat (v) using airquality data set without elimination NAs using appropriate function definition call apply().Use sweep() convert LifeCycleSaving data set standardized scores. apply() also used task? Discuss.Use sweep() convert LifeCycleSaving data set standardized scores. apply() also used task? Discuss.Use ifelse() convert negative values given vector zero leaving positive values missing values unchanged. Illustrate.Use ifelse() convert negative values given vector zero leaving positive values missing values unchanged. Illustrate.","code":""},{"path":"mapping.html","id":"mapping-functions-to-vectors-dataframes-and-lists","chapter":"8 Vectorized programming and mapping functions","heading":"8.2 Mapping functions to vectors, dataframes and lists","text":"Study functions lapply(), sapply() split().Study functions lapply(), sapply() split().Carefully study produced commandCarefully study produced commandNote: order see graphs R-GUI necessary issue commandbefore calling function lapply().Use lapply() produce histograms variables state.x77 data set histogram title correct variable name. \\(x\\)- \\(y\\)-axis must also labelled correctly.","code":"\nlapply (split (data.frame (state.x77),   \n               cut (data.frame (state.x77)$Illiteracy, 3)), pairs)#> $`(0.498,1.27]`\n#> NULL\n#> \n#> $`(1.27,2.03]`\n#> NULL\n#> \n#> $`(2.03,2.8]`\n#> NULL\npar(ask=TRUE) "},{"path":"mapping.html","id":"the-functions-mapply-rapply-and-vectorize","chapter":"8 Vectorized programming and mapping functions","heading":"8.3 The functions: mapply(), rapply() and Vectorize()","text":"apply function one list, mapply() multivariate version sapply(). first argument mapply() function followed arguments function. first argument function applied elements following arguments.Study help-files rapply() Vectorize().","code":"\nmapply (function (x,y,z) {x+y+z}, x = c(2, 3), y = c(4,5), z = c(1,8))\n#> [1]  7 16\nmapply (function(x,y,z) { list (min (c(x,y,z)), max (c(x,y,z))) }, \n        x = c(2, 3), y = c(4, 5), z = c(1, 8))\n#>      [,1] [,2]\n#> [1,] 1    3   \n#> [2,] 4    8"},{"path":"mapping.html","id":"the-mapping-function-tapply-for-grouped-data","chapter":"8 Vectorized programming and mapping functions","heading":"8.4 The mapping function tapply() for grouped data","text":"Study arguments tapply().Study arguments tapply().Consider LifeCycleSavings data set. Create object ddpigrp groups LifeCycleSavings data four groups G1, G2, G3 G4 G1 members ddpi within \\((0, 2.0]\\), G2 members ddpi within \\((2.0, 3.5]\\), G3 members ddpi within \\((3.5, 5.0]\\), G4 members ddpi larger \\(5.0\\). Use tapply() obtain mean aggregate personal savings groups defined ddpigrp.Consider LifeCycleSavings data set. Create object ddpigrp groups LifeCycleSavings data four groups G1, G2, G3 G4 G1 members ddpi within \\((0, 2.0]\\), G2 members ddpi within \\((2.0, 3.5]\\), G3 members ddpi within \\((3.5, 5.0]\\), G4 members ddpi larger \\(5.0\\). Use tapply() obtain mean aggregate personal savings groups defined ddpigrp.needed break vector one categorical variable, list containing grouping variables used second argument tapply(). Illustrate finding mean aggregate personal savings groups ddpigrp broken pop15 rating.needed break vector one categorical variable, list containing grouping variables used second argument tapply(). Illustrate finding mean aggregate personal savings groups ddpigrp broken pop15 rating.order use tapply() one variable simultaneously apply() can used map tapply() variables turn. Study following command output carefully:order use tapply() one variable simultaneously apply() can used map tapply() variables turn. Study following command output carefully:tapply() called without third argument returns vector length first argument containing index output normally produced. Illustrate behaviour discuss usage.","code":"\nddpigrp <- cut (LifeCycleSavings$ddpi, \n                breaks = c(0, 2, 3.5, 5, max(LifeCycleSavings$ddpi)),\n                labels = paste0 (\"G\", 1:4))\napply (LifeCycleSavings [,c (1, 3, 4)], 2, function(x) \n                                           tapply (x, ddpigrp, mean)) \n#>           sr    pop75       dpi\n#> G1  7.855385 1.790769  712.1677\n#> G2  8.230625 2.456250 1497.0731\n#> G3 11.959000 3.189000 1569.4910\n#> G4 11.831818 1.834545  584.6964"},{"path":"mapping.html","id":"the-control-of-execution-flow-statement-if-else-and-the-control-functions-ifelse-and-switch","chapter":"8 Vectorized programming and mapping functions","heading":"8.5 The control of execution flow statement if-else and the control functions ifelse() and switch()","text":"primary tool conditional computations statement. takes form:else accompanying expression(s) optional.else accompanying expression(s) optional.-else statements can nested.-else statements can nested.Remember function ifelse() operates objects wholes illustrated :Remember function ifelse() operates objects wholes illustrated :Note function match() can used alternative multiple -else statements certain cases. function match() takes first argument vector, x, values matched second argument, table, vector possible values matched . third argument nomatch = NA specifies return value match occurs. See example :following example provides illustration usage match():function switch() provides alternative set nested -else statements. takes first argument, EXPR, integer value character string second argument, ..., list alternatives. illustration:two logical control operators && || useful using -else statements. two operators operate logical expressions contrast operators & | operate vectors/matrices.","code":"if (logical condition evaluating to either TRUE or FALSE)\n    {\n     First set consisting of one or more R expressions\n    }\nelse\n    {\n     Second set consisting of one or more R expressions\n    } \nExpression3\nxx <- matrix(1:25, ncol=5)\nxx\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    6   11   16   21\n#> [2,]    2    7   12   17   22\n#> [3,]    3    8   13   18   23\n#> [4,]    4    9   14   19   24\n#> [5,]    5   10   15   20   25\nifelse(xx < 10, 0, 1)\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    0    0    1    1    1\n#> [2,]    0    0    1    1    1\n#> [3,]    0    0    1    1    1\n#> [4,]    0    0    1    1    1\n#> [5,]    0    1    1    1    1\nmatch (c (1:5, 3), c (2, 3))\n#> [1] NA  1  2 NA NA  2\nmatch (c (1:5, 3), c (2, 3), nomatch = 0)\n#> [1] 0 1 2 0 0 2\nmatch (c (1:5, 3), c (3, 2), nomatch = 0)\n#> [1] 0 2 1 0 0 1\nmonth.num <- 5:9\nmonth.name <- c(\"May\", \"June\", \"July\", \"Aug\", \"Sept\")\nnew.vec <-  month.name [match (airquality [, \"Month\"], month.num)]\nout <- data.frame (airquality [ ,1:5], MonthName = new.vec, \n                   Day = airquality$Day)\nout[c(1:5,148:153), ]\n#>     Ozone Solar.R Wind Temp Month MonthName Day\n#> 1      41     190  7.4   67     5       May   1\n#> 2      36     118  8.0   72     5       May   2\n#> 3      12     149 12.6   74     5       May   3\n#> 4      18     313 11.5   62     5       May   4\n#> 5      NA      NA 14.3   56     5       May   5\n#> 148    14      20 16.6   63     9      Sept  25\n#> 149    30     193  6.9   70     9      Sept  26\n#> 150    NA     145 13.2   77     9      Sept  27\n#> 151    14     191 14.3   75     9      Sept  28\n#> 152    18     131  8.0   76     9      Sept  29\n#> 153    20     223 11.5   68     9      Sept  30\ncentre <- function(x, type) \n  { switch(type,\n           mean = mean(x),\n           median = median(x),\n           trimmed = mean(x, trim = 0.1))\n  }\n\nx <- rcauchy(10)\nx\n#>  [1]  1.7839765  1.3921962  2.4310325  0.2535779 -0.7108909\n#>  [6] -1.9787274 -1.1414962  0.1417415 -0.6106848  0.3210230\ncentre(x,\"mean\")\n#> [1] 0.1881748\ncentre(x,\"median\")\n#> [1] 0.1976597\ncentre(x,\"trimmed\")\n#> [1] 0.1786804"},{"path":"mapping.html","id":"loops-in-r","chapter":"8 Vectorized programming and mapping functions","heading":"8.6 Loops in R","text":"loops: general form isThis type loop useful known advance many times statements loop performed. definition values can either vector list elements restricted numeric:Consider list consisting several matrices, different numbers rows number columns. Write R function create single matrix consisting elements given list concatenated rows.loops: general form isThis type loop continues condition evaluates TRUE.Control inside loops: next breakThe command next used skip remaining statements loop continue executing. command break causes immediate exit loop. nested loops commands apply recently opened loop.repeat loops: general form isThis type loop continues break command encountered.Remember many operations might handled loops can efficiently performed R using subscripting tools discussed earlier.Remember many operations might handled loops can efficiently performed R using subscripting tools discussed earlier.example consider calculation Pearson chi-squared statistic test independence two-way classification table:example consider calculation Pearson chi-squared statistic test independence two-way classification table:\\[\n\\chi^2_p = \\sum_{=1}^r \\sum_{j=1}^c \\frac{(f_{ij}-e_{ij})^2}{e_{ij}}\n\\]\\(e_{ij} = \\frac{f_{.}f_{.j}}{f_{..}}\\) expected frequencies. statistic can calculated R without using loops follows:Explicit loops R can potentially expensive terms time memory. functions apply(), tapply(), sapply() lapply() used instead possible. expected frequencies previous example can, example, obtained follows:","code":"for (name in values)\n      { expression(s)\n      }\nfor (i in 1:26) cat(i, letters[i],\"\\n\")\n#> 1 a \n#> 2 b \n#> 3 c \n#> 4 d \n#> 5 e \n#> 6 f \n#> 7 g \n#> 8 h \n#> 9 i \n#> 10 j \n#> 11 k \n#> 12 l \n#> 13 m \n#> 14 n \n#> 15 o \n#> 16 p \n#> 17 q \n#> 18 r \n#> 19 s \n#> 20 t \n#> 21 u \n#> 22 v \n#> 23 w \n#> 24 x \n#> 25 y \n#> 26 z\nfor (letter in letters) cat(letter, \"\\n\")\n#> a \n#> b \n#> c \n#> d \n#> e \n#> f \n#> g \n#> h \n#> i \n#> j \n#> k \n#> l \n#> m \n#> n \n#> o \n#> p \n#> q \n#> r \n#> s \n#> t \n#> u \n#> v \n#> w \n#> x \n#> y \n#> zwhile (condition)\n        { expression(s)\n        }repeat { expression(s)\n       }\nfi. <- ftable %*% rep (1, ncol (ftable))\nf.j <- rep (1, nrow (ftable)) %*% ftable\ne <- (fi. %*% f.j)/sum(fi.)\nX2p <- sum ( (ftable-e)^2 /e)\ne.freq <- outer (apply (ftable, 1, sum),  apply (ftable, 2, sum)) / sum(ftable)"},{"path":"mapping.html","id":"the-execution-time-of-r-tasks","chapter":"8 Vectorized programming and mapping functions","heading":"8.7 The execution time of R tasks","text":"functions system.time() proc.time() provide information regarding execution R tasks.proc.time determines much real CPU time (seconds) currently running R process already take:system.time(expr) calls function proc.time(), evaluates expr, calls proc.time() , returning difference two proc.time() calls:Note user system times necessarily add elapsed time exactly.Write necessary code using proc.time() directly obtain execution time hist (rev (sort (rnorm (1000000)))).Write necessary code using proc.time() directly obtain execution time hist (rev (sort (rnorm (1000000)))).application system.time() proc.time() perform following simulation study: Given covariance matrix \\(\\mathbf{S}:p \\times p\\) task compute corresponding correlation matrix. execution times following three methods compared:\nDirect elementwise calculation \\(r_{ij} = \\frac{s_{ij}}{\\sqrt{s_{ii}s_{jj}}}\\) using two nested loops;\nTwo applications sweep();\nMatrix multiplication \\(\\mathbf{R}:p \\times p = [diag(\\mathbf{S})]^{-\\frac{1}{2}} \\mathbf{S} [diag(\\mathbf{S})]^{-\\frac{1}{2}}\\) \\(diag(\\mathbf{})\\) denotes diagonal matrix formed \\(\\mathbf{}:p \\times p\\) setting -diagonal elements equal zero.\napplication system.time() proc.time() perform following simulation study: Given covariance matrix \\(\\mathbf{S}:p \\times p\\) task compute corresponding correlation matrix. execution times following three methods compared:Direct elementwise calculation \\(r_{ij} = \\frac{s_{ij}}{\\sqrt{s_{ii}s_{jj}}}\\) using two nested loops;Direct elementwise calculation \\(r_{ij} = \\frac{s_{ij}}{\\sqrt{s_{ii}s_{jj}}}\\) using two nested loops;Two applications sweep();Two applications sweep();Matrix multiplication \\(\\mathbf{R}:p \\times p = [diag(\\mathbf{S})]^{-\\frac{1}{2}} \\mathbf{S} [diag(\\mathbf{S})]^{-\\frac{1}{2}}\\) \\(diag(\\mathbf{})\\) denotes diagonal matrix formed \\(\\mathbf{}:p \\times p\\) setting -diagonal elements equal zero.Matrix multiplication \\(\\mathbf{R}:p \\times p = [diag(\\mathbf{S})]^{-\\frac{1}{2}} \\mathbf{S} [diag(\\mathbf{S})]^{-\\frac{1}{2}}\\) \\(diag(\\mathbf{})\\) denotes diagonal matrix formed \\(\\mathbf{}:p \\times p\\) setting -diagonal elements equal zero.Use var() rnorm() compute covariance matrices different sizes \\(p\\) samples varying size \\(n\\). Study role \\(n\\) \\(p\\) effectiveness (economy execution time) three methods. Display results graphically. Remember valid comparisons three methods must executed identical samples.","code":"\nproc.time()   # called with no arguments\n#>    user  system elapsed \n#>    0.59    0.21   10.15\nsystem.time (hist (rev (sort (rnorm (1000000)))))#>    user  system elapsed \n#>    0.07    0.04    0.25"},{"path":"mapping.html","id":"the-calling-of-functions-with-argument-lists","chapter":"8 Vectorized programming and mapping functions","heading":"8.8 The calling of functions with argument lists","text":"function .call() provides alternative usual method calling functions name. allows specifying name function arguments form list:.call() differ function call()?.call() differ function call()?illustration usage .call() study following example:illustration usage .call() study following example:can learned output?difference .integer(), storage.mode() <– \"integer\", storage.mode() mode()?","code":"\nmean ( c (1:100, 500), trim=0.1)\n#> [1] 51\ndo.call (\"mean\", list( c (1:100, 500), trim=0.1))\n#> [1] 51\nna.pattern <- function(frame)\n{ nas <- is.na (frame)\n  storage.mode (nas) <- \"integer\"\n  table (do.call (\"paste\", c(as.data.frame(nas), sep = \"\")))\n}\nna.pattern(as.data.frame(airquality))\n#> \n#> 000000 010000 100000 110000 \n#>    111      5     35      2"},{"path":"mapping.html","id":"evaluating-r-strings-a-commands","chapter":"8 Vectorized programming and mapping functions","heading":"8.9 Evaluating R strings a commands","text":"Recall Figure 7.1 function parse(text = \"3 + 4\") returns unevaluated expression 3 + 4. order evaluate expression use function eval(): eval (parse (text = \"3 + 4\")) returns 7.","code":""},{"path":"mapping.html","id":"object-oriented-programming-in-r","chapter":"8 Vectorized programming and mapping functions","heading":"8.10 Object oriented programming in R","text":"Suppose like investigate body function plot(). know can done entering function’s name R prompt:presence UseMethod(\"plot\") shows plot() generic function. class object determines treated generic function .e. method applied . Function setClass() used setting class attribute object. Function methods() used find () repertoire methods generic function (b) methods available certain class:broad terms currently three types classes use R: old classes S3 classes newer S4 S5 (also called reference classes) classes. newer classes can contain one slots can accessed using operator @. Central concept object oriented programming method can inherit another method. function NextMethod() provides mechanism inheritance.example generic function study example help file function .equal().example generic function study example help file function .equal().R provides many facilities writing object oriented functions. Consult R Language Definition Manual Chapter 5: Object-Oriented Programming details.R provides many facilities writing object oriented functions. Consult R Language Definition Manual Chapter 5: Object-Oriented Programming details.statistical investigation often concerned survey questionnaire data respondents must select one several categorical alternatives. questdata shows responses made 10 respondents four questions. alternatives question measured five point categorical scale. can refer questdata dataframe full data. form representing data effective way storing data number respondents large. compact way saving data without loss information store data form response pattern matrix dataframe. first row questdata constitutes one particular response pattern namely (\"b\" \"c\" \"\" \"d\"). response pattern matrix (dataframe) shows unique response patterns together frequency different response patterns occurred. challenge provide necessary R functions convert full data response pattern representation, conversely recover full data response pattern representation.statistical investigation often concerned survey questionnaire data respondents must select one several categorical alternatives. questdata shows responses made 10 respondents four questions. alternatives question measured five point categorical scale. can refer questdata dataframe full data. form representing data effective way storing data number respondents large. compact way saving data without loss information store data form response pattern matrix dataframe. first row questdata constitutes one particular response pattern namely (\"b\" \"c\" \"\" \"d\"). response pattern matrix (dataframe) shows unique response patterns together frequency different response patterns occurred. challenge provide necessary R functions convert full data response pattern representation, conversely recover full data response pattern representation.Create R object questdata give following instructions:Examine Table 3.5 carefully describe behaviour functions duplicated() unique().Examine Table 3.5 carefully describe behaviour functions duplicated() unique().Write R function, say full2resp obtain response pattern representation questionnaire data like given . Test function questdata.Write R function, say full2resp obtain response pattern representation questionnaire data like given . Test function questdata.Write R function, say resp2full obtain full data set given response pattern representation. Test function response pattern representation questdata.Write R function, say resp2full obtain full data set given response pattern representation. Test function response pattern representation questdata.","code":"\nplot\n#> function (x, y, ...) \n#> UseMethod(\"plot\")\n#> <bytecode: 0x000001e7187259c8>\n#> <environment: namespace:base>\nmethods(plot) # repertoire of methods for FUNCTION plot()\n#>  [1] plot.acf*           plot.data.frame*   \n#>  [3] plot.decomposed.ts* plot.default       \n#>  [5] plot.dendrogram*    plot.density*      \n#>  [7] plot.ecdf           plot.factor*       \n#>  [9] plot.formula*       plot.function      \n#> [11] plot.hclust*        plot.histogram*    \n#> [13] plot.HoltWinters*   plot.isoreg*       \n#> [15] plot.lm*            plot.medpolish*    \n#> [17] plot.mlm*           plot.ppr*          \n#> [19] plot.prcomp*        plot.princomp*     \n#> [21] plot.profile*       plot.profile.nls*  \n#> [23] plot.R6*            plot.raster*       \n#> [25] plot.spec*          plot.stepfun       \n#> [27] plot.stl*           plot.table*        \n#> [29] plot.ts             plot.tskernel*     \n#> [31] plot.TukeyHSD*     \n#> see '?methods' for accessing help and source code\nmethods(class=\"lm\")  # what methods are available for CLASS lm\n#>  [1] add1           alias          anova         \n#>  [4] case.names     coerce         confint       \n#>  [7] cooks.distance deviance       dfbeta        \n#> [10] dfbetas        drop1          dummy.coef    \n#> [13] effects        extractAIC     family        \n#> [16] formula        hatvalues      influence     \n#> [19] initialize     kappa          labels        \n#> [22] logLik         model.frame    model.matrix  \n#> [25] nobs           plot           predict       \n#> [28] print          proj           qr            \n#> [31] residuals      rstandard      rstudent      \n#> [34] show           simulate       slotsFromS3   \n#> [37] summary        variable.names vcov          \n#> see '?methods' for accessing help and source code\nquestdata <- rbind (c(\"b\", \"c\", \"a\", \"d\"),\n                    c(\"d\", \"d\", \"c\", \"a\"),\n                    c(\"a\", \"d\", \"c\", \"e\"),\n                    c(\"a\", \"d\", \"c\", \"e\"),\n                    c(\"b\", \"c\", \"a\", \"d\"),\n                    c(\"a\", \"d\", \"c\", \"e\"),\n                    c(\"b\", \"c\", \"a\", \"d\"),\n                    c(\"d\", \"d\", \"c\", \"a\"),\n                    c(\"c\", \"b\", \"a\", \"e\"),\n                    c(\"b\", \"c\", \"a\", \"d\"))\ncolnames(questdata) <- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\nunique (questdata [,1])\n#> [1] \"b\" \"d\" \"a\" \"c\"\nduplicated (questdata)\n#>  [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n#> [10]  TRUE\nduplicated (questdata, MARGIN = 1)\n#>  [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n#> [10]  TRUE\nduplicated (questdata, MARGIN = 2)\n#>    Q1    Q2    Q3    Q4 \n#> FALSE FALSE FALSE FALSE\nunique (questdata)\n#>      Q1  Q2  Q3  Q4 \n#> [1,] \"b\" \"c\" \"a\" \"d\"\n#> [2,] \"d\" \"d\" \"c\" \"a\"\n#> [3,] \"a\" \"d\" \"c\" \"e\"\n#> [4,] \"c\" \"b\" \"a\" \"e\"\nunique (questdata, MARGIN = 1)\n#>      Q1  Q2  Q3  Q4 \n#> [1,] \"b\" \"c\" \"a\" \"d\"\n#> [2,] \"d\" \"d\" \"c\" \"a\"\n#> [3,] \"a\" \"d\" \"c\" \"e\"\n#> [4,] \"c\" \"b\" \"a\" \"e\"\nunique (questdata, MARGIN = 2)\n#>       Q1  Q2  Q3  Q4 \n#>  [1,] \"b\" \"c\" \"a\" \"d\"\n#>  [2,] \"d\" \"d\" \"c\" \"a\"\n#>  [3,] \"a\" \"d\" \"c\" \"e\"\n#>  [4,] \"a\" \"d\" \"c\" \"e\"\n#>  [5,] \"b\" \"c\" \"a\" \"d\"\n#>  [6,] \"a\" \"d\" \"c\" \"e\"\n#>  [7,] \"b\" \"c\" \"a\" \"d\"\n#>  [8,] \"d\" \"d\" \"c\" \"a\"\n#>  [9,] \"c\" \"b\" \"a\" \"e\"\n#> [10,] \"b\" \"c\" \"a\" \"d\""},{"path":"mapping.html","id":"recursion","chapter":"8 Vectorized programming and mapping functions","heading":"8.11 Recursion","text":"Functions R can call . process called recursion implemented R programming function Recall().example use recursion calculate \\(x(x+1)(x+2)\\dots(x+k)\\) \\(k\\) positive integer:Investigate recurs.example() works correctly.Explain recursion works studying output following function values \\(r = 1, 2, 3, 4, 5, 6\\):Use recursion function Recall() write R function calculate \\(x!\\).Use recursion function Recall() write R function calculate \\(x!\\).Use recursion write R function generates matrix whose rows contain subsets size \\(r\\) first \\(n\\) elements vector v. Ignore possibility repeated values v give vector default value 1:n.Use recursion write R function generates matrix whose rows contain subsets size \\(r\\) first \\(n\\) elements vector v. Ignore possibility repeated values v give vector default value 1:n.","code":"\nrecurs.example <- function (x, k) \n{ # Function to calculate x(x+1)(x+2).....(x+k)\n  # where k is a positive integer.\n     if (k < 0 ) \n      stop(\"k not allowed to be negative or non-integer\")\n    else if( k == 0) x\n       else(x+k) * Recall(x,k-1)\n   }\nRecursiontest <- function (r)\n{ if (r <= 0) NULL\n  else { cat(\"Write = \", r, \"\\n\")\n         Recall (r - 1)\n         Recall (r - 2)\n       }\n}\nRecursiontest(1)\n#> Write =  1\n#> NULL\nRecursiontest(2)\n#> Write =  2 \n#> Write =  1\n#> NULL\nRecursiontest(3)\n#> Write =  3 \n#> Write =  2 \n#> Write =  1 \n#> Write =  1\n#> NULL\nRecursiontest(4)\n#> Write =  4 \n#> Write =  3 \n#> Write =  2 \n#> Write =  1 \n#> Write =  1 \n#> Write =  2 \n#> Write =  1\n#> NULL\nRecursiontest(5)\n#> Write =  5 \n#> Write =  4 \n#> Write =  3 \n#> Write =  2 \n#> Write =  1 \n#> Write =  1 \n#> Write =  2 \n#> Write =  1 \n#> Write =  3 \n#> Write =  2 \n#> Write =  1 \n#> Write =  1\n#> NULL\nRecursiontest(6)\n#> Write =  6 \n#> Write =  5 \n#> Write =  4 \n#> Write =  3 \n#> Write =  2 \n#> Write =  1 \n#> Write =  1 \n#> Write =  2 \n#> Write =  1 \n#> Write =  3 \n#> Write =  2 \n#> Write =  1 \n#> Write =  1 \n#> Write =  4 \n#> Write =  3 \n#> Write =  2 \n#> Write =  1 \n#> Write =  1 \n#> Write =  2 \n#> Write =  1\n#> NULL"},{"path":"mapping.html","id":"environments-in-r","chapter":"8 Vectorized programming and mapping functions","heading":"8.12 Environments in R","text":"Study following parts R Language definition Manual: § 3.5 Scope variables; Chapter 4: Functions.Consider R function xx(argument). Write R function add constant correct object (.e. object correct environment) corresponds argument. order answer question, must determine environment argument exists evaluation must take place environment. Possible candidates consider parent frame, global environment search list. Assume first data basis search list read-cases argument can found anywhere search list can assigned first data basis. Hint: Study following functions work: assign(), deparse(), invisible(), exists(), substitute(), sys.parent().","code":""},{"path":"mapping.html","id":"computing-on-the-language","chapter":"8 Vectorized programming and mapping functions","heading":"8.13 “Computing on the language”","text":"Read R Language Definition Manual Chapter 6: Computing language.","code":""},{"path":"mapping.html","id":"writing-user-friendly-applications-the-package-shiny","chapter":"8 Vectorized programming and mapping functions","heading":"8.14 Writing user friendly applications: the package shiny","text":"shiny package R allows one create interactive environment inside R. example, code generates data bivariate normal distribution makes scatter plot two variables. shiny sliding bar added user can adjust correlation two variables.shiny app consists user interface (ui) server function shinyApp function uses ui object server function build Shiny app object. sliding bar, function sliderInput() used. Table 8.1 provides list different input elements.server function uses inputs – cor.val example – produce output – scatter plot example – using reactive expression – plot command example. server function thus reactive expression called every change input, .e. plot executed updated cor.val. output produced die server function – scatter example – plotted mainPanel function plotOutput.Table 8.1:  Input elements shiny apps.Adjust shiny app adding three input sources:number observations generated.number observations generated.Selecting mean vector bivariate normal following optionsSelecting mean vector bivariate normal following options\\(\\mathbf{\\mu}' = [0, 0]\\)\\(\\mathbf{\\mu}' = [10, 2]\\)\\(\\mathbf{\\mu}' = [-3, -3]\\)\\(\\mathbf{\\mu}' = [8, 207]\\)series radio buttons choose colour observations plot.","code":"\nlibrary(shiny)\n\nui <- pageWithSidebar(\n      headerPanel(\"Bivariate normal plot\"),\n      # App title\n\n      sidebarPanel(\n      # Sidebar panel for inputs\n\n          sliderInput(inputId = \"cor.val\",\n                      label = \"Correlation\",\n                      min = -1,\n                      max = 1,\n                      value = 0,\n                      step = 0.01\n          )\n      ),\n\n      mainPanel(\n      # Main panel for scatter plot\n\n          textOutput(\"caption\"),\n          plotOutput(\"scatter\")\n      )\n   )\n\nserver <- function(input, output) {\n         require(MASS)\n         sigma <- diag(2)\n\n         output$caption <- renderText({ paste (\"Bivariate normal data with \n                                correlation\", input$cor.val)\n                           })\n         output$scatter <- renderPlot({  \n                              sigma[1,2] <- sigma[2,1] <- input$cor.val\n                              X <- mvrnorm(1000, mu=c(0,0), sigma)\n                              plot(X,asp=1,col=\"red\",pch=15)\n                           })\n      }\n\nshinyApp(ui, server)"},{"path":"mapping.html","id":"exercise-12","chapter":"8 Vectorized programming and mapping functions","heading":"8.15 Exercise","text":"Write R function determine positive whole number elements \\(≤10^{10}\\) given vector prime return primes. Test function randomly generated vectors.Write R function determine positive whole number elements \\(≤10^{10}\\) given vector prime return primes. Test function randomly generated vectors.Repeat () using recursion.Repeat () using recursion.Write Shiny App allows user choose one data sets:LifeCycleSavings state.x77 data matrix \\(\\mathbf{X}:n \\times p\\). unweighted Minkowski metric pairwise distance observation \\(\\) observation \\(j\\) defined \\(d_{ij} = \\left( \\sum_{k=1}^p{|x_{ik}-x_{jk}|^λ} \\right)^{(1/λ)}\\), \\(λ≥1\\). Make provision user choose value \\(\\lambda\\) used calculate pairwise distances rows data matrix. Note \\(λ=1\\) Manhattan distance \\(λ=2\\) Euclidean distance. Use \\(λ=2\\) default value.Write Shiny App allows user choose one data sets:LifeCycleSavings state.x77 data matrix \\(\\mathbf{X}:n \\times p\\). unweighted Minkowski metric pairwise distance observation \\(\\) observation \\(j\\) defined \\(d_{ij} = \\left( \\sum_{k=1}^p{|x_{ik}-x_{jk}|^λ} \\right)^{(1/λ)}\\), \\(λ≥1\\). Make provision user choose value \\(\\lambda\\) used calculate pairwise distances rows data matrix. Note \\(λ=1\\) Manhattan distance \\(λ=2\\) Euclidean distance. Use \\(λ=2\\) default value.","code":""},{"path":"mapping.html","id":"the-function-on.exit","chapter":"8 Vectorized programming and mapping functions","heading":"8.16 The function on.exit()","text":"function .exit() ?One use special argument ... together .exit() function allow user make temporary changes graphical parameters graphical display within function. can done follows:assumed arguments par() can substituted function concerned called. use .exit() temporarily changing options.","code":"function(...)\n { oldpar <- par(...)\n   on.exit(par(oldpar))  \n   or on.exit(par(c(par(oldpar),par(mfrow = c(1,1)))))\n   new plot instructions\n   ..............................\n  }"},{"path":"mapping.html","id":"error-tracing","chapter":"8 Vectorized programming and mapping functions","heading":"8.17 Error tracing","text":"error generated execution function record details calls executed time. details can shown using function traceback(). function dump.frames() gives detailed information, must used sparingly can create large objects workspace. function options (error = xx) can used specify action taken error occurs. recommended option program development options(error = recover). ensures error interactive session call recover() lowest relevant function call, usually call produced error. can browse currently active calls recover arbitrary information state computation time error. alternative set options(error = dump.frames). save data calls active error occurred. Calling debugger() later produce similar result recover().following summary common error tracing facilities R:Table 8.2:  Error tracing facilities.Study R Language Manual Definition Chapter 9: Debugging summary error tracing facilities R . Note especially functions print(), cat(), traceback(), browser(), trace(), untrace(), debug(), undebug() options(warn=2 error=) work.Study R Language Manual Definition Chapter 9: Debugging summary error tracing facilities R . Note especially functions print(), cat(), traceback(), browser(), trace(), untrace(), debug(), undebug() options(warn=2 error=) work.Study usage : options(error = dump.frames);  debugger()Study usage : options(error = dump.frames);  debugger()Study usage : options(error = dump.frames)Study usage : options(error = dump.frames)Study usage objects last.dump .Traceback.Study usage objects last.dump .Traceback.","code":""},{"path":"mapping.html","id":"error-handling-the-function-try","chapter":"8 Vectorized programming and mapping functions","heading":"8.18 Error handling: The function try()","text":"example need able handle errors properly consider simulation study involving large number repetitive calculations.iter set large value, inevitably call Example.8.18.() result error message:see try() can used make following change Example.8.18.():typical chunk output call Example.8.18.b() isNotice execution Example.8.18.b halted prematurely. output can make final changes example function:Study output call Example.8.18.c comment merits try() example.","code":"\nExample.8.18.a <- function (iter = 500)\n{ select.sample <- function (x) \n  { temp <- rnorm (100, m = 50, s = 20)\n    if (any (temp < 0)) stop(\"Negative numbers not allowed\")\n    mean(log(temp))                                                         }\n  out <- lapply(1:iter, function(i) select.sample(i))\n  out\n}> Example.8.18.a()\nError in select.sample(i) : Negative numbers not allowed.\nExample.8.18.b <- function (iter = 500)\n{ select.sample <- function (x) \n  { temp <- rnorm (100, m = 50, s = 20)\n    if (any (temp < 0)) stop(\"Negative numbers not allowed\")\n    mean(log(temp))                                                         }\n  out <- lapply(1:iter, function(i) \n                        try(select.sample(i), silent = TRUE))\n  out\n}> Example.8.18.b(2)\n[[1]]\n[1] 3.804975\n[[2]]\n[1] \"Error in select.sample(i) : Negative numbers not allowed\\n\"\nattr(,\"class\")\n[1] \"try-error\"\nattr(,\"condition\")\n<simpleError in select.sample(i): Negative numbers not allowed>\nExample.8.18.c <- function (iter = 500)\n{ select.sample <- function (x) \n  { temp <- rnorm (100, m = 50, s = 20)\n    if (any (temp < 0)) stop(\"Negative numbers not allowed\")\n    mean(log(temp))                                                         }\n  out <- lapply(1:iter, function(i) \n                        try(select.sample(i), silent = TRUE))\n  out <- lapply(out, function(x)\n                     { if (is.null (attr (x,\"condition\"))) x <- x\n                       else x <- attr(x, \"condition\")\n                     })\n  Error.report <- lapply(out, function(x) \n                              ifelse(!is.numeric(x), x, \"No Error\"))\n  Numeric.results <- unlist(lapply(out, function(x)   \n                                        ifelse (is.numeric(x), x, NA)))\n  list (Error.report = Error.report, Numeric.results = Numeric.results) \n}"},{"path":"data.html","id":"data","chapter":"9 Reading data files into R, formatting and printing","heading":"9 Reading data files into R, formatting and printing","text":"","code":""},{"path":"data.html","id":"reading-microsoft-excel-files-into-r","chapter":"9 Reading data files into R, formatting and printing","heading":"9.1 Reading Microsoft Excel files into R","text":"following three ways can used read Excel file R object:file can stored .txt .csv file read.table(), scan() read.csv() can used read file R.file can stored .txt .csv file read.table(), scan() read.csv() can used read file R.Directly read .xlsx file R readxl package. List sheet names excel_sheets(). Specify worksheet name number command like objectname <- read_excel(xlsx_example, sheet = \"Sheet1\").Directly read .xlsx file R readxl package. List sheet names excel_sheets(). Specify worksheet name number command like objectname <- read_excel(xlsx_example, sheet = \"Sheet1\")..xlsx file can also read R xlsx package. R functions read.xlsx() read.xlsx2() can used read contents Excel worksheet R data.frame. difference two functions read.xlsx() preserves data type. tries guess class type variable corresponding column worksheet. Note , read.xlsx() function slow large data sets (worksheet 100 000 cells). read.xlsx2() function faster big files compared read.xlsx() function. commands following format: objectname <- read.xlsx (file, sheetIndex, header = TRUE,             colClasses=NA) objectname <- read.xlsx2 (file, sheetIndex, header = TRUE, colClasses=\"character\")..xlsx file can also read R xlsx package. R functions read.xlsx() read.xlsx2() can used read contents Excel worksheet R data.frame. difference two functions read.xlsx() preserves data type. tries guess class type variable corresponding column worksheet. Note , read.xlsx() function slow large data sets (worksheet 100 000 cells). read.xlsx2() function faster big files compared read.xlsx() function. commands following format: objectname <- read.xlsx (file, sheetIndex, header = TRUE,             colClasses=NA) objectname <- read.xlsx2 (file, sheetIndex, header = TRUE, colClasses=\"character\").Select data Excel (Data can also selected application Word text editor). Copy selected range. R:\nobjectname <- read.table (file = \"clipboard\"). Hint: careful empty cells Excel: preparation Excel file might needed.Select data Excel (Data can also selected application Word text editor). Copy selected range. R:\nobjectname <- read.table (file = \"clipboard\"). Hint: careful empty cells Excel: preparation Excel file might needed.avoid problems end--file characters can occur using method (d), package clipr can used.avoid problems end--file characters can occur using method (d), package clipr can used.functions clear_clip() write_clip() can also useful.","code":"\nlibrary (clipr)\nobjectname <- read_clip_tbl (header = TRUE, row.names = 1)"},{"path":"data.html","id":"reading-other-data-files-into-r","chapter":"9 Reading data files into R, formatting and printing","heading":"9.2 Reading other data files into R","text":"R package foreign() provides functions reading data packages R:Study helpfiles functions reading R binary data, SAS XPORT format, Weka Attribute-Relation File Format, Xbase family database languages dBase, Clipper FoxPro, Stata, Epi Info EpiData files, Minitab portable worksheets, Octave text files, data.dump files produced S version 3, SPSS save export files, SAS data sets converted ssd format1 Systat files.","code":"\nlibrary(foreign)\nobjects(name=\"package:foreign\")\n#>  [1] \"data.restore\"  \"lookup.xport\"  \"read.arff\"    \n#>  [4] \"read.dbf\"      \"read.dta\"      \"read.epiinfo\" \n#>  [7] \"read.mtp\"      \"read.octave\"   \"read.S\"       \n#> [10] \"read.spss\"     \"read.ssd\"      \"read.systat\"  \n#> [13] \"read.xport\"    \"write.arff\"    \"write.dbf\"    \n#> [16] \"write.dta\"     \"write.foreign\""},{"path":"data.html","id":"sending-output-to-a-file","chapter":"9 Reading data files into R, formatting and printing","heading":"9.3 Sending output to a file","text":"function sink(\"filename\") can used divert output normally appears console file. option options (echo = TRUE) ensures R instructions also included file. instruction sink() makes output appear console .functions write(x) sink(\"filename\") differ? Study arguments write() thoroughly.","code":""},{"path":"data.html","id":"writing-r-objects-for-transport","chapter":"9 Reading data files into R, formatting and printing","heading":"9.4 Writing R objects for transport","text":"R function save(..., file = ) writes external representation R objects specified file. names objects saved appear either symbols (character strings) ... character vector list. objects can read back file using function load (file = ). Study two functions work consulting help files. functions save() load() useful transporting R objects computers.functions saveRDS (object = , file = ) object.name <- readRDS (file = ) write single R object file, restore named object.name. Care taken deprecated functions dump() source(). R objects saved file using dump(), restored R workspace source(), load().","code":""},{"path":"data.html","id":"the-use-of-the-file-.rhistory-and-the-function-history","chapter":"9 Reading data files into R, formatting and printing","heading":"9.5 The use of the file .Rhistory and the function history()","text":"file .Rhistory created folder .Rdata exists. can inspected text editor MS Word provides exact record activity R console (commands window).Study help file function history().","code":""},{"path":"data.html","id":"command-re-editing","chapter":"9 Reading data files into R, formatting and printing","heading":"9.6 Command re-editing","text":"Use arrows recall previous commands. Delete, Backspace, Home End keys editing.Use arrows recall previous commands. Delete, Backspace, Home End keys editing.Note use script window execute entire functions selected instructions .Note use script window execute entire functions selected instructions .","code":""},{"path":"data.html","id":"customized-printing","chapter":"9 Reading data files into R, formatting and printing","heading":"9.7 Customized printing","text":"basic tool customized printing function cat(). function can used output messages console file. Note different arguments available cat():default output display screen; output directed file, use argument file = \"file name including path\".default output display screen; output directed file, use argument file = \"file name including path\".default output directed file replaces previous contents file; use argument append = TRUE append new output previous contents.default output directed file replaces previous contents file; use argument append = TRUE append new output previous contents.Use sep = \"xx\" automatically insert characters unnamed arguments cat() output.Use sep = \"xx\" automatically insert characters unnamed arguments cat() output.automatically insert new lines output use fill = TRUE.automatically insert new lines output use fill = TRUE.labels = argument allows insertion character string beginning output line. labels vector values used cyclically.labels = argument allows insertion character string beginning output line. labels vector values used cyclically.Write today’s date given function date() form “date today :   Day week,  xx, month,  20xx.” heading file. Hint: recall functions cat(), match(), substring(), paste(), replace().","code":""},{"path":"data.html","id":"formatting-numbers","chapter":"9 Reading data files into R, formatting and printing","heading":"9.8 Formatting numbers","text":"Study functions round() signif() together cat() can used set number decimals printed.Study functions round() signif() together cat() can used set number decimals printed.Study use options(digits=xx).Study use options(digits=xx).Study function format() works. Note use format() together paste() cat().Study function format() works. Note use format() together paste() cat().print() ?print() ?Study help file write.table().Study help file write.table().functions prmatrix() print() can used output matrices console execution function. convenient inspecting intermediate results. Determine latter function differs cat().functions prmatrix() print() can used output matrices console execution function. convenient inspecting intermediate results. Determine latter function differs cat().Note difference following statements:Note difference following statements:Study following example carefully:","code":"\ncolnames(state.x77)\n#> [1] \"Population\" \"Income\"     \"Illiteracy\" \"Life Exp\"  \n#> [5] \"Murder\"     \"HS Grad\"    \"Frost\"      \"Area\"\nformat(colnames(state.x77))\n#> [1] \"Population\" \"Income    \" \"Illiteracy\" \"Life Exp  \"\n#> [5] \"Murder    \" \"HS Grad   \" \"Frost     \" \"Area      \"\nformat.mns <- format (apply (state.x77, 2, mean))\nformat.names <- format (colnames (state.x77))\ndescrip.mns <- paste(\"Mean for variable\", format.names, \" = \", format.mns)\ncat(descrip.mns, fill = max(nchar(descrip.mns)))\n#> Mean for variable Population  =   4246.4200 \n#> Mean for variable Income      =   4435.8000 \n#> Mean for variable Illiteracy  =      1.1700 \n#> Mean for variable Life Exp    =     70.8786 \n#> Mean for variable Murder      =      7.3780 \n#> Mean for variable HS Grad     =     53.1080 \n#> Mean for variable Frost       =    104.4600 \n#> Mean for variable Area        =  70735.8800"},{"path":"data.html","id":"printing-tables","chapter":"9 Reading data files into R, formatting and printing","heading":"9.9 Printing tables","text":"Study example represent maximum minimum value variables state.x77 data set table names countries corresponding values.alternative version table obtained following instructions:Make necessary changes lines code improve column spacing.","code":"\nmins <- apply(state.x77, 2, min)\nmaxs <- apply(state.x77, 2, max)\nmin.name <- character(ncol(state.x77))\nmin.name\n#> [1] \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"\nfor(i in 1:8) min.name[i] <- rownames(state.x77)[state.x77[,i] == mins[i]][1]\nmax.name <- character(8)\nfor(i in 1:8) max.name[i] <- rownames(state.x77)[state.x77 [,i] == maxs[i]][1]\nmy.table <- data.frame(mins, min.name, maxs, max.name)\ndimnames(my.table) <- list(names(mins),c(\"Minimum\", \n                                         \"State with Min\",\n                                         \"Maximum\",\n                                         \"State with Max\"))\ncolnames(my.table)[3] <- paste(\"     \", colnames(my.table)[3])\nmy.table\n#>            Minimum State with Min       Maximum\n#> Population  365.00         Alaska       21198.0\n#> Income     3098.00    Mississippi        6315.0\n#> Illiteracy    0.50           Iowa           2.8\n#> Life Exp     67.96 South Carolina          73.6\n#> Murder        1.40   North Dakota          15.1\n#> HS Grad      37.80 South Carolina          67.3\n#> Frost         0.00         Hawaii         188.0\n#> Area       1049.00   Rhode Island      566432.0\n#>            State with Max\n#> Population     California\n#> Income             Alaska\n#> Illiteracy      Louisiana\n#> Life Exp           Hawaii\n#> Murder            Alabama\n#> HS Grad              Utah\n#> Frost              Nevada\n#> Area               Alaska\ncat (paste (format (    c  (\" \", \"Statistic\", \" \", names(mins))),\n            format ( paste (\"  \", c(\"  \", \"Minimum\", \" \", format(mins)))),\n            format (    c  (\"State having\", \"Minimum\", \" \", min.name)),\n            format (paste  (\"       \", c(\" \", \"Maximum\", \" \", format(maxs)))),\n            format (    c  (\"State having\",\"Maximum\", \" \", max.name))), \n              fill=TRUE)\n#>                       State having                    State having \n#> Statistic     Minimum Minimum                Maximum  Maximum      \n#>                                                                    \n#> Population     365.00 Alaska                  21198.0 California   \n#> Income        3098.00 Mississippi              6315.0 Alaska       \n#> Illiteracy       0.50 Iowa                        2.8 Louisiana    \n#> Life Exp        67.96 South Carolina             73.6 Hawaii       \n#> Murder           1.40 North Dakota               15.1 Alabama      \n#> HS Grad         37.80 South Carolina             67.3 Utah         \n#> Frost            0.00 Hawaii                    188.0 Nevada       \n#> Area          1049.00 Rhode Island           566432.0 Alaska"},{"path":"data.html","id":"communicating-with-the-operating-system","chapter":"9 Reading data files into R, formatting and printing","heading":"9.10 Communicating with the operating system","text":"Study function system() works using DOS instructions: “time”, “date” “dir”. Hint: First study help file R function system() following instructions:R function system() can also used together Notepad create text file R session:Use system() create text file without terminating R session.Use system() write function myfile.exists() checks specified file exists.","code":"\nsystem (paste (Sys.getenv (\"COMSPEC\"), \"/c\", \"time \\t\"),                      \n         show.output.on.console = TRUE, invisible = TRUE)\nsystem (paste (Sys.getenv (\"COMSPEC\"), \"/c\", \"date \\t\"),                  \n         show.output.on.console = TRUE, invisible = TRUE)\nsystem (paste (Sys.getenv (\"COMSPEC\"), \"/c\", \"dir c:\\\\\"),                  \n         show.output.on.console = TRUE, invisible = TRUE)\nsystem (paste (Sys.getenv (\"COMSPEC\"), \"/c\", \n               \"notepad c:\\\\temp\\\\test.txt\"),\n        show.output.on.console = TRUE, invisible = TRUE)"},{"path":"data.html","id":"exercise-13","chapter":"9 Reading data files into R, formatting and printing","heading":"9.11 Exercise","text":"Construct tables displaying values variables state.x77 data set separately region defined R object state.region.Construct tables displaying values variables state.x77 data set separately region defined R object state.region.Print table state.x77 data set variable, asterisk placed maximum value variable. numbers must line correctly.Print table state.x77 data set variable, asterisk placed maximum value variable. numbers must line correctly.","code":""},{"path":"data.html","id":"tidyverse","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12 Tidyverse","text":"Tidyverse collection ecosystem R packages use data structures data manipulation exploration. command library (tidyverse), core packages listed Table 9.1 also loaded. selection packages tidyverse collection given Table 9.2.Table 9.1:  Additional core tidyverse packages.Table 9.2:  Selection packages tidyverse.","code":""},{"path":"data.html","id":"tibbles","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.1 Tibbles","text":"tibble new version dataframe. Tibbles enhanced print() method makes easier use large datasets containing complex objects. create tibble dataframe iris, use commands:Tibbles can also formed vectors automatically creating column vector.Matrices also easily converted tibbles.Even lists can converted tibbles.create tibble scratch can use command:three major differences tibbles dataframes.seen , print method tibbles shows first 10 rows uses fonts colours emphasis. also shows columns fit onto screen provides summary column type. can control default print behaviour setting options: options(tibble.print_max = n, tibble.print_min = m). \\(n\\) rows, print \\(m\\) rows. Use options(tibble.print_min = Inf) always show rows options(tibble.width = Inf) always print columns, regardless width screen.seen , print method tibbles shows first 10 rows uses fonts colours emphasis. also shows columns fit onto screen provides summary column type. can control default print behaviour setting options: options(tibble.print_max = n, tibble.print_min = m). \\(n\\) rows, print \\(m\\) rows. Use options(tibble.print_min = Inf) always show rows options(tibble.width = Inf) always print columns, regardless width screen.Tibbles stricter subsetting, always returning another tibble.Tibbles stricter subsetting, always returning another tibble.extract column, three options:Tibbles never partial matching, return NULL warning column exist.Tibbles also stricter recycling, allowing values length one recycled. first column length different one determines number rows tibble conflicts lead error. create tibble zero rows, use first row \\(0 \\neq 1\\) rows command","code":"\nlibrary (\"tidyverse\")\n#> ── Attaching core tidyverse packages ──── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n#> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n#> ✔ purrr     1.1.0     \n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\niris.tibble <- tibble(iris)\niris.tibble\n#> # A tibble: 150 × 5\n#>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#>           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n#>  1          5.1         3.5          1.4         0.2 setosa \n#>  2          4.9         3            1.4         0.2 setosa \n#>  3          4.7         3.2          1.3         0.2 setosa \n#>  4          4.6         3.1          1.5         0.2 setosa \n#>  5          5           3.6          1.4         0.2 setosa \n#>  6          5.4         3.9          1.7         0.4 setosa \n#>  7          4.6         3.4          1.4         0.3 setosa \n#>  8          5           3.4          1.5         0.2 setosa \n#>  9          4.4         2.9          1.4         0.2 setosa \n#> 10          4.9         3.1          1.5         0.1 setosa \n#> # ℹ 140 more rows\ntibble(x = fruit)   # data set fruit in package stringr\n#> # A tibble: 80 × 1\n#>    x           \n#>    <chr>       \n#>  1 apple       \n#>  2 apricot     \n#>  3 avocado     \n#>  4 banana      \n#>  5 bell pepper \n#>  6 bilberry    \n#>  7 blackberry  \n#>  8 blackcurrant\n#>  9 blood orange\n#> 10 blueberry   \n#> # ℹ 70 more rows\nX <- matrix (1:12,ncol=3)\ntibble(X)\n#> # A tibble: 4 × 1\n#>   X[,1]  [,2]  [,3]\n#>   <int> <int> <int>\n#> 1     1     5     9\n#> 2     2     6    10\n#> 3     3     7    11\n#> 4     4     8    12\nmy.list <- list(a = 1:10, beta = exp(-3:3), \n                logic = c(TRUE,FALSE,FALSE,TRUE))\n\nmy.list\n#> $a\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> $beta\n#> [1]  0.04978707  0.13533528  0.36787944  1.00000000\n#> [5]  2.71828183  7.38905610 20.08553692\n#> \n#> $logic\n#> [1]  TRUE FALSE FALSE  TRUE\ntibble (my.list)\n#> # A tibble: 3 × 1\n#>   my.list     \n#>   <named list>\n#> 1 <int [10]>  \n#> 2 <dbl [7]>   \n#> 3 <lgl [4]>\nmy.dat <- tibble(x = 1:5, y = 1, z = y - x ^ 2)\nmy.dat\n#> # A tibble: 5 × 3\n#>       x     y     z\n#>   <int> <dbl> <dbl>\n#> 1     1     1     0\n#> 2     2     1    -3\n#> 3     3     1    -8\n#> 4     4     1   -15\n#> 5     5     1   -24\nmy.dat[\"y\"]\n#> # A tibble: 5 × 1\n#>       y\n#>   <dbl>\n#> 1     1\n#> 2     1\n#> 3     1\n#> 4     1\n#> 5     1\nmy.dat$x\n#> [1] 1 2 3 4 5\nmy.dat[[\"y\"]]\n#> [1] 1 1 1 1 1\nmy.dat[[3]]\n#> [1]   0  -3  -8 -15 -24\ntibble(a = integer(), b = 1)\n#> # A tibble: 0 × 2\n#> # ℹ 2 variables: a <int>, b <dbl>"},{"path":"data.html","id":"pipe-operator","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.2 Pipe operator","text":"pipe operator, |>, pipes object forward function call expression, something like x |> f, rather \\(f(x)\\). simple example achieve result three commands two intermediate objects, car_data cyl_means created, single call shown :first pipe operator %>% created package magrittr. package automatically loaded tidyverse attached. following call therefore similar outcome:R version 4.1.0 pipe operator |> directly built R can therefore used time without attach another package.dataframe (tibble) piped forward function filter(), .e. telling R variable hp belongs mtcars sub-tibble hp > 100 values, piped forward group_by() function.","code":"\ncar_data <- mtcars[mtcars$hp > 100,]\ncyl_means <- apply(car_data, 2, function(x, cyl) \n                                  { tapply(x, cyl, mean)\n                                  }, cyl=car_data$cyl)\ncyl_means\n#>        mpg cyl     disp       hp     drat       wt     qsec\n#> 4 25.90000   4 108.0500 111.0000 3.940000 2.146500 17.75000\n#> 6 19.74286   6 183.3143 122.2857 3.585714 3.117143 17.97714\n#> 8 15.10000   8 353.1000 209.2143 3.229286 3.999214 16.77214\n#>          vs        am     gear     carb\n#> 4 1.0000000 1.0000000 4.500000 2.000000\n#> 6 0.5714286 0.4285714 3.857143 3.428571\n#> 8 0.0000000 0.1428571 3.285714 3.500000\n  \nmtcars |>\n  filter(hp > 100) |>\n  group_by(cyl) |>\n  summarise(across(everything(), mean))\n#> # A tibble: 3 × 11\n#>     cyl   mpg  disp    hp  drat    wt  qsec    vs    am\n#>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#> 1     4  25.9  108.  111   3.94  2.15  17.8 1     1    \n#> 2     6  19.7  183.  122.  3.59  3.12  18.0 0.571 0.429\n#> 3     8  15.1  353.  209.  3.23  4.00  16.8 0     0.143\n#> # ℹ 2 more variables: gear <dbl>, carb <dbl>\nmtcars %>%\n  filter(hp > 100) %>%\n  group_by(cyl) %>%\n  summarise(across(everything(), mean))\n#> # A tibble: 3 × 11\n#>     cyl   mpg  disp    hp  drat    wt  qsec    vs    am\n#>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n#> 1     4  25.9  108.  111   3.94  2.15  17.8 1     1    \n#> 2     6  19.7  183.  122.  3.59  3.12  18.0 0.571 0.429\n#> 3     8  15.1  353.  209.  3.23  4.00  16.8 0     0.143\n#> # ℹ 2 more variables: gear <dbl>, carb <dbl>"},{"path":"data.html","id":"tidy-data","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.3 Tidy data","text":"Tidy data data every column represents single variable, every row single observation every cell single value. terms ‘variable’ ‘observation’ important – variable contains values measure feature across units; observation contains values single unit, across features. creating tidy data set five main types operations:","code":""},{"path":"data.html","id":"pivotting","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.3.1 Pivotting","text":"functions pivot_longer() pivot_wider() used convert data long wide format respectively. Consider long data set Rabbit package MASS.command , pivots tibble wide format.converse, command pivots wide tibble, rabbit, long format.Note column headings now form single variable. separate combination variables different columns, need following command:","code":"\nlibrary (MASS)\n#> \n#> Attaching package: 'MASS'\n#> The following object is masked from 'package:dplyr':\n#> \n#>     select\ntibble (Rabbit)\n#> # A tibble: 60 × 5\n#>    BPchange   Dose Run   Treatment Animal\n#>       <dbl>  <dbl> <fct> <fct>     <fct> \n#>  1     0.5    6.25 C1    Control   R1    \n#>  2     4.5   12.5  C1    Control   R1    \n#>  3    10     25    C1    Control   R1    \n#>  4    26     50    C1    Control   R1    \n#>  5    37    100    C1    Control   R1    \n#>  6    32    200    C1    Control   R1    \n#>  7     1      6.25 C2    Control   R2    \n#>  8     1.25  12.5  C2    Control   R2    \n#>  9     4     25    C2    Control   R2    \n#> 10    12     50    C2    Control   R2    \n#> # ℹ 50 more rows\nrabbit <- Rabbit |> \n  pivot_wider(names_from = c(Animal, Treatment, Run), values_from = BPchange)\nrabbit\n#> # A tibble: 6 × 11\n#>     Dose R1_Control_C1 R2_Control_C2 R3_Control_C3\n#>    <dbl>         <dbl>         <dbl>         <dbl>\n#> 1   6.25           0.5          1             0.75\n#> 2  12.5            4.5          1.25          3   \n#> 3  25             10            4             3   \n#> 4  50             26           12            14   \n#> 5 100             37           27            22   \n#> 6 200             32           29            24   \n#> # ℹ 7 more variables: R4_Control_C4 <dbl>,\n#> #   R5_Control_C5 <dbl>, R1_MDL_M1 <dbl>, R2_MDL_M2 <dbl>,\n#> #   R3_MDL_M3 <dbl>, R4_MDL_M4 <dbl>, R5_MDL_M5 <dbl>\nrabbit |> pivot_longer(cols = -Dose, names_to = \"Treat.comb\", \n                       values_to = \"BPchange\")\n#> # A tibble: 60 × 3\n#>     Dose Treat.comb    BPchange\n#>    <dbl> <chr>            <dbl>\n#>  1  6.25 R1_Control_C1     0.5 \n#>  2  6.25 R2_Control_C2     1   \n#>  3  6.25 R3_Control_C3     0.75\n#>  4  6.25 R4_Control_C4     1.25\n#>  5  6.25 R5_Control_C5     1.5 \n#>  6  6.25 R1_MDL_M1         1.25\n#>  7  6.25 R2_MDL_M2         1.4 \n#>  8  6.25 R3_MDL_M3         0.75\n#>  9  6.25 R4_MDL_M4         2.6 \n#> 10  6.25 R5_MDL_M5         2.4 \n#> # ℹ 50 more rows\nrabbit |> \n  pivot_longer(cols = -Dose,\n               names_to = c(\"animal\",\"treatment\",\"run\"),\n               names_pattern =\"(.*)_(.*)_(.*)\",\n               values_to = \"BPchange\")\n#> # A tibble: 60 × 5\n#>     Dose animal treatment run   BPchange\n#>    <dbl> <chr>  <chr>     <chr>    <dbl>\n#>  1  6.25 R1     Control   C1        0.5 \n#>  2  6.25 R2     Control   C2        1   \n#>  3  6.25 R3     Control   C3        0.75\n#>  4  6.25 R4     Control   C4        1.25\n#>  5  6.25 R5     Control   C5        1.5 \n#>  6  6.25 R1     MDL       M1        1.25\n#>  7  6.25 R2     MDL       M2        1.4 \n#>  8  6.25 R3     MDL       M3        0.75\n#>  9  6.25 R4     MDL       M4        2.6 \n#> 10  6.25 R5     MDL       M5        2.4 \n#> # ℹ 50 more rows"},{"path":"data.html","id":"rectangling","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.3.2 Rectangling","text":"Rectangling used place lists clean data rectangular format. Consider list :following command places two list items metadata tibble two rows, one Toothless one Dory. three components – species, color films – forms column new tibble.addition function unnest_auto(), functions unnest_wider() unnest_longer() places list components columns rows respectively. unnest_auto() selects appropriate unnest_wider() unnest_longer(). first line output , unnest_auto() function states Using 'unnest_wider(metadata)', indicating wider application used list.function hoist() can used reach multiple layers.Note hoist() also allows us extract certain components.","code":"\ndf <- tibble(\n  character = c(\"Toothless\", \"Dory\"),\n  metadata = list(\n    list(\n      species = \"dragon\",\n      color = \"black\",\n      films = c(\n        \"How to Train Your Dragon\",\n        \"How to Train Your Dragon 2\",\n        \"How to Train Your Dragon: The Hidden World\"\n      )\n    ),\n    list(\n      species = \"blue tang\",\n      color = \"blue\",\n      films = c(\"Finding Nemo\", \"Finding Dory\")\n    )\n  )\n)\ndf\n#> # A tibble: 2 × 2\n#>   character metadata        \n#>   <chr>     <list>          \n#> 1 Toothless <named list [3]>\n#> 2 Dory      <named list [3]>\ndf |> unnest_auto(metadata)\n#> Using `unnest_wider(metadata)`; elements have 3 names in common\n#> # A tibble: 2 × 4\n#>   character species   color films    \n#>   <chr>     <chr>     <chr> <list>   \n#> 1 Toothless dragon    black <chr [3]>\n#> 2 Dory      blue tang blue  <chr [2]>\ndf |> hoist(metadata, \"species\", \n            first_film = list(\"films\", 1L),                \n            third_film = list(\"films\", 3L))\n#> # A tibble: 2 × 5\n#>   character species   first_film     third_film metadata    \n#>   <chr>     <chr>     <chr>          <chr>      <list>      \n#> 1 Toothless dragon    How to Train … How to Tr… <named list>\n#> 2 Dory      blue tang Finding Nemo   <NA>       <named list>"},{"path":"data.html","id":"nesting","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.3.3 Nesting","text":"nesting, tibble lists created. example , create tibble three rows – one species – two columns element second column \\(50 \\times 4\\) matrix four variables measured \\(50\\) samples particular species.can also create tibbles three columns data grouped ‘Petal’ ‘Sepal’ first instance ‘width’ ‘length’ second.function unnest() similar functions discussed 9.12.3.2, can used simultaneously unlist several column simple table containing lists.","code":"\niris |> nest(data = !Species)\n#> # A tibble: 3 × 2\n#>   Species    data             \n#>   <fct>      <list>           \n#> 1 setosa     <tibble [50 × 4]>\n#> 2 versicolor <tibble [50 × 4]>\n#> 3 virginica  <tibble [50 × 4]>\niris |> nest(petal = starts_with(\"Petal\"), sepal = starts_with(\"Sepal\"))\n#> # A tibble: 3 × 3\n#>   Species    petal             sepal            \n#>   <fct>      <list>            <list>           \n#> 1 setosa     <tibble [50 × 2]> <tibble [50 × 2]>\n#> 2 versicolor <tibble [50 × 2]> <tibble [50 × 2]>\n#> 3 virginica  <tibble [50 × 2]> <tibble [50 × 2]>\niris |> nest(width = contains(\"Width\"), length = contains(\"Length\"))\n#> # A tibble: 3 × 3\n#>   Species    width             length           \n#>   <fct>      <list>            <list>           \n#> 1 setosa     <tibble [50 × 2]> <tibble [50 × 2]>\n#> 2 versicolor <tibble [50 × 2]> <tibble [50 × 2]>\n#> 3 virginica  <tibble [50 × 2]> <tibble [50 × 2]>\ndf <- tibble(x = 1:3,\n             y = list(NULL,\n                      tibble(a = 1, b = 2),\n                      tibble(a = 1:3, b = 3:1)))\ndf\n#> # A tibble: 3 × 2\n#>       x y               \n#>   <int> <list>          \n#> 1     1 <NULL>          \n#> 2     2 <tibble [1 × 2]>\n#> 3     3 <tibble [3 × 2]>\n  \ndf |> unnest(y)\n#> # A tibble: 4 × 3\n#>       x     a     b\n#>   <int> <dbl> <dbl>\n#> 1     2     1     2\n#> 2     3     1     3\n#> 3     3     2     2\n#> 4     3     3     1\ndf %>% unnest(y, keep_empty = TRUE)\n#> # A tibble: 5 × 3\n#>       x     a     b\n#>   <int> <dbl> <dbl>\n#> 1     1    NA    NA\n#> 2     2     1     2\n#> 3     3     1     3\n#> 4     3     2     2\n#> 5     3     3     1\n  \ndf <- tibble(a = list(c(\"a\", \"b\"), \"c\"),\n             b = list(1:2, 3),\n             c = c(11, 22))\ndf\n#> # A tibble: 2 × 3\n#>   a         b             c\n#>   <list>    <list>    <dbl>\n#> 1 <chr [2]> <int [2]>    11\n#> 2 <chr [1]> <dbl [1]>    22\n  \ndf |> unnest(c(a, b))\n#> # A tibble: 3 × 3\n#>   a         b     c\n#>   <chr> <dbl> <dbl>\n#> 1 a         1    11\n#> 2 b         2    11\n#> 3 c         3    22\ndf |> unnest(a) %>% unnest(b)\n#> # A tibble: 5 × 3\n#>   a         b     c\n#>   <chr> <dbl> <dbl>\n#> 1 a         1    11\n#> 2 a         2    11\n#> 3 b         1    11\n#> 4 b         2    11\n#> 5 c         3    22"},{"path":"data.html","id":"splitting-and-combining","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.3.4 Splitting and combining","text":"use functions separate() extract() separating columns unite() combine columns single column. function separate() divides data, extract() picks part data.","code":"\ndf <- data.frame(x = c(NA, \"a.b\", \"a.d\", \"b.c\"))\ndf  \n#>      x\n#> 1 <NA>\n#> 2  a.b\n#> 3  a.d\n#> 4  b.c\n  \ndf |> separate(x, c(\"A\", \"B\"))\n#>      A    B\n#> 1 <NA> <NA>\n#> 2    a    b\n#> 3    a    d\n#> 4    b    c\ndf |> separate(x, c(NA, \"B\"))\n#>      B\n#> 1 <NA>\n#> 2    b\n#> 3    d\n#> 4    c\n  \ndf |> extract(x, \"A\")\n#>      A\n#> 1 <NA>\n#> 2    a\n#> 3    a\n#> 4    b\ndf |> extract(x, c(\"A\", \"B\"),\"([[:alnum:]]+).([[:alnum:]]+)\")\n#>      A    B\n#> 1 <NA> <NA>\n#> 2    a    b\n#> 3    a    d\n#> 4    b    c\n  \ndf <- expand_grid(x = c(\"a\", NA), y = c(\"b\", NA))\ndf\n#> # A tibble: 4 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 a     b    \n#> 2 a     <NA> \n#> 3 <NA>  b    \n#> 4 <NA>  <NA>\n  \n  df |> unite(\"z\", x:y, remove = FALSE)\n#> # A tibble: 4 × 3\n#>   z     x     y    \n#>   <chr> <chr> <chr>\n#> 1 a_b   a     b    \n#> 2 a_NA  a     <NA> \n#> 3 NA_b  <NA>  b    \n#> 4 NA_NA <NA>  <NA>\n  df |> unite(\"z\", x:y, na.rm = TRUE, remove = FALSE)\n#> # A tibble: 4 × 3\n#>   z     x     y    \n#>   <chr> <chr> <chr>\n#> 1 \"a_b\" a     b    \n#> 2 \"a\"   a     <NA> \n#> 3 \"b\"   <NA>  b    \n#> 4 \"\"    <NA>  <NA>"},{"path":"data.html","id":"dealing-with-missing-values","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.3.5 Dealing with missing values","text":"functions complete(), drop_na(), fill() replace_na() important treatment missing values.","code":"\ndf <- tibble(group = c(1:2, 1),\n             item_id = c(1:2, 2),\n             item_name = c(\"a\", \"b\", \"b\"),\n             value1 = 1:3,\n             value2 = 4:6)\ndf\n#> # A tibble: 3 × 5\n#>   group item_id item_name value1 value2\n#>   <dbl>   <dbl> <chr>      <int>  <int>\n#> 1     1       1 a              1      4\n#> 2     2       2 b              2      5\n#> 3     1       2 b              3      6\n  \ndf |> complete(group, nesting(item_id, item_name))\n#> # A tibble: 4 × 5\n#>   group item_id item_name value1 value2\n#>   <dbl>   <dbl> <chr>      <int>  <int>\n#> 1     1       1 a              1      4\n#> 2     1       2 b              3      6\n#> 3     2       1 a             NA     NA\n#> 4     2       2 b              2      5\ndf |> complete(group, nesting(item_id, item_name), \n                 fill = list(value1 = 0))\n#> # A tibble: 4 × 5\n#>   group item_id item_name value1 value2\n#>   <dbl>   <dbl> <chr>      <int>  <int>\n#> 1     1       1 a              1      4\n#> 2     1       2 b              3      6\n#> 3     2       1 a              0     NA\n#> 4     2       2 b              2      5\ndf <- tibble(x = c(1, 2, NA), y = c(\"a\", NA, \"b\"))\ndf\n#> # A tibble: 3 × 2\n#>       x y    \n#>   <dbl> <chr>\n#> 1     1 a    \n#> 2     2 <NA> \n#> 3    NA b\n  \ndf |> replace_na(list(x = 0, y = \"unknown\"))\n#> # A tibble: 3 × 2\n#>       x y      \n#>   <dbl> <chr>  \n#> 1     1 a      \n#> 2     2 unknown\n#> 3     0 b\n  \ndf |> drop_na()\n#> # A tibble: 1 × 2\n#>       x y    \n#>   <dbl> <chr>\n#> 1     1 a\ndf |> drop_na(x)\n#> # A tibble: 2 × 2\n#>       x y    \n#>   <dbl> <chr>\n#> 1     1 a    \n#> 2     2 <NA>"},{"path":"data.html","id":"dplyr","chapter":"9 Reading data files into R, formatting and printing","heading":"9.12.4 Package dplyr","text":"main data manipulation functions found package dplyr. functions referred “verbs”, since performs particular operation data manipulation. verbs grouped Table 9.3 according operations columns, rows groups rows.Table 9.3:  Verbs data manipulation dplyr.functioning verbs illustrated UScereal package MASS.function select() allows extracting one columns data set. columns can names referred index. Using function everything() conjunction select() useful sort reorder columns data set.rename() function changes one column names. companion function rename_with() can used apply function column headings, tolower() toupper() change case column headings.New variables can added created existing columns function mutate(). newly formed variables immediately available creating variables. Variables can removed transforming NULL using .keep argument.useful pipe mutated tibble select? comparison, relocate() makes easy move blocks columns.filter() function select rows tibble, based operator evaluates column TRUE / FALSE values equal number rows.verb arrange() refers sorting rows according values one columns.function slice() also allows selection rows works helper functions: slice_head(), slice_tail(), slice_sample(), slice_min() slice_max() select first , last , random sample, rows lowest values rows highest values, respectively.grouped object can formed group_by() function. first glance, appears similar ungrouped tibble, grouping prove useful data manipulations.summarise() function allows computation descriptive statistics. Operating ungrouped object, overall statistic computed, grouped object provide required statistics group.Since function fivenum() return scalar value, vector, output appears tibble . Alternatively, function reframe() can used.","code":"\nlibrary (MASS)\ncereal <- tibble (UScereal)\ncereal\n#> # A tibble: 65 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 N         212.   12.1   3.03   394. 30.3   15.2  18.2 \n#>  2 K         212.   12.1   3.03   788. 27.3   21.2  15.2 \n#>  3 K         100     8     0      280  28     16     0   \n#>  4 G         147.    2.67  2.67   240   2     14    13.3 \n#>  5 K         110     2     0      125   1     11    14   \n#>  6 G         173.    4     2.67   280   2.67  24    10.7 \n#>  7 R         134.    2.99  1.49   299.  5.97  22.4   8.96\n#>  8 P         134.    4.48  0      313.  7.46  19.4   7.46\n#>  9 Q         160     1.33  2.67   293.  0     16    16   \n#> 10 G          88     4.8   1.6    232   1.6   13.6   0.8 \n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\ndplyr::select (cereal, calories)        # select only column calories\n#> # A tibble: 65 × 1\n#>    calories\n#>       <dbl>\n#>  1     212.\n#>  2     212.\n#>  3     100 \n#>  4     147.\n#>  5     110 \n#>  6     173.\n#>  7     134.\n#>  8     134.\n#>  9     160 \n#> 10      88 \n#> # ℹ 55 more rows\ndplyr::select (cereal, calories, fat)   # select two columns\n#> # A tibble: 65 × 2\n#>    calories   fat\n#>       <dbl> <dbl>\n#>  1     212.  3.03\n#>  2     212.  3.03\n#>  3     100   0   \n#>  4     147.  2.67\n#>  5     110   0   \n#>  6     173.  2.67\n#>  7     134.  1.49\n#>  8     134.  0   \n#>  9     160   2.67\n#> 10      88   1.6 \n#> # ℹ 55 more rows\ndplyr::select (cereal, c(5,7:8))        # select by index\n#> # A tibble: 65 × 3\n#>    sodium carbo sugars\n#>     <dbl> <dbl>  <dbl>\n#>  1   394.  15.2  18.2 \n#>  2   788.  21.2  15.2 \n#>  3   280   16     0   \n#>  4   240   14    13.3 \n#>  5   125   11    14   \n#>  6   280   24    10.7 \n#>  7   299.  22.4   8.96\n#>  8   313.  19.4   7.46\n#>  9   293.  16    16   \n#> 10   232   13.6   0.8 \n#> # ℹ 55 more rows\ndplyr::select (cereal, -c(1,9,11))      # select columns to exclude\n#> # A tibble: 65 × 8\n#>    calories protein   fat sodium fibre carbo sugars\n#>       <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1     212.   12.1   3.03   394. 30.3   15.2  18.2 \n#>  2     212.   12.1   3.03   788. 27.3   21.2  15.2 \n#>  3     100     8     0      280  28     16     0   \n#>  4     147.    2.67  2.67   240   2     14    13.3 \n#>  5     110     2     0      125   1     11    14   \n#>  6     173.    4     2.67   280   2.67  24    10.7 \n#>  7     134.    2.99  1.49   299.  5.97  22.4   8.96\n#>  8     134.    4.48  0      313.  7.46  19.4   7.46\n#>  9     160     1.33  2.67   293.  0     16    16   \n#> 10      88     4.8   1.6    232   1.6   13.6   0.8 \n#> # ℹ 55 more rows\n#> # ℹ 1 more variable: potassium <dbl>\ndplyr::select (cereal, calories, fibre, everything()) \n#> # A tibble: 65 × 11\n#>    calories fibre mfr   protein   fat sodium carbo sugars\n#>       <dbl> <dbl> <fct>   <dbl> <dbl>  <dbl> <dbl>  <dbl>\n#>  1     212. 30.3  N       12.1   3.03   394.  15.2  18.2 \n#>  2     212. 27.3  K       12.1   3.03   788.  21.2  15.2 \n#>  3     100  28    K        8     0      280   16     0   \n#>  4     147.  2    G        2.67  2.67   240   14    13.3 \n#>  5     110   1    K        2     0      125   11    14   \n#>  6     173.  2.67 G        4     2.67   280   24    10.7 \n#>  7     134.  5.97 R        2.99  1.49   299.  22.4   8.96\n#>  8     134.  7.46 P        4.48  0      313.  19.4   7.46\n#>  9     160   0    Q        1.33  2.67   293.  16    16   \n#> 10      88   1.6  G        4.8   1.6    232   13.6   0.8 \n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\n      # reorder with calories first, followed by fibre\nrename (cereal, Manufacturer=mfr)\n#> # A tibble: 65 × 11\n#>    Manufacturer calories protein   fat sodium fibre carbo\n#>    <fct>           <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>\n#>  1 N                212.   12.1   3.03   394. 30.3   15.2\n#>  2 K                212.   12.1   3.03   788. 27.3   21.2\n#>  3 K                100     8     0      280  28     16  \n#>  4 G                147.    2.67  2.67   240   2     14  \n#>  5 K                110     2     0      125   1     11  \n#>  6 G                173.    4     2.67   280   2.67  24  \n#>  7 R                134.    2.99  1.49   299.  5.97  22.4\n#>  8 P                134.    4.48  0      313.  7.46  19.4\n#>  9 Q                160     1.33  2.67   293.  0     16  \n#> 10 G                 88     4.8   1.6    232   1.6   13.6\n#> # ℹ 55 more rows\n#> # ℹ 4 more variables: sugars <dbl>, shelf <int>,\n#> #   potassium <dbl>, vitamins <fct>\nrename_with (cereal, toupper, starts_with(\"F\"))\n#> # A tibble: 65 × 11\n#>    mfr   calories protein   FAT sodium FIBRE carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 N         212.   12.1   3.03   394. 30.3   15.2  18.2 \n#>  2 K         212.   12.1   3.03   788. 27.3   21.2  15.2 \n#>  3 K         100     8     0      280  28     16     0   \n#>  4 G         147.    2.67  2.67   240   2     14    13.3 \n#>  5 K         110     2     0      125   1     11    14   \n#>  6 G         173.    4     2.67   280   2.67  24    10.7 \n#>  7 R         134.    2.99  1.49   299.  5.97  22.4   8.96\n#>  8 P         134.    4.48  0      313.  7.46  19.4   7.46\n#>  9 Q         160     1.33  2.67   293.  0     16    16   \n#> 10 G          88     4.8   1.6    232   1.6   13.6   0.8 \n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nmutate (cereal, fat.vs.pr = fat/protein, mfr=NULL) |>\n     dplyr::select (fat.vs.pr, everything())\n#> # A tibble: 65 × 11\n#>    fat.vs.pr calories protein   fat sodium fibre carbo\n#>        <dbl>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>\n#>  1     0.250     212.   12.1   3.03   394. 30.3   15.2\n#>  2     0.250     212.   12.1   3.03   788. 27.3   21.2\n#>  3     0         100     8     0      280  28     16  \n#>  4     1         147.    2.67  2.67   240   2     14  \n#>  5     0         110     2     0      125   1     11  \n#>  6     0.667     173.    4     2.67   280   2.67  24  \n#>  7     0.5       134.    2.99  1.49   299.  5.97  22.4\n#>  8     0         134.    4.48  0      313.  7.46  19.4\n#>  9     2.00      160     1.33  2.67   293.  0     16  \n#> 10     0.333      88     4.8   1.6    232   1.6   13.6\n#> # ℹ 55 more rows\n#> # ℹ 4 more variables: sugars <dbl>, shelf <int>,\n#> #   potassium <dbl>, vitamins <fct>\nmutate (cereal, fat.vs.pr = fat/protein, \n                 comb.var = sodium + fat.vs.pr,\n                 new.var=1:nrow(cereal), .keep=\"used\")\n#> # A tibble: 65 × 6\n#>    protein   fat sodium fat.vs.pr comb.var new.var\n#>      <dbl> <dbl>  <dbl>     <dbl>    <dbl>   <int>\n#>  1   12.1   3.03   394.     0.250     394.       1\n#>  2   12.1   3.03   788.     0.250     788.       2\n#>  3    8     0      280      0         280        3\n#>  4    2.67  2.67   240      1         241        4\n#>  5    2     0      125      0         125        5\n#>  6    4     2.67   280      0.667     281.       6\n#>  7    2.99  1.49   299.     0.5       299.       7\n#>  8    4.48  0      313.     0         313.       8\n#>  9    1.33  2.67   293.     2.00      295.       9\n#> 10    4.8   1.6    232      0.333     232.      10\n#> # ℹ 55 more rows\nrelocate (cereal, shelf)\n#> # A tibble: 65 × 11\n#>    shelf mfr   calories protein   fat sodium fibre carbo\n#>    <int> <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>\n#>  1     3 N         212.   12.1   3.03   394. 30.3   15.2\n#>  2     3 K         212.   12.1   3.03   788. 27.3   21.2\n#>  3     3 K         100     8     0      280  28     16  \n#>  4     1 G         147.    2.67  2.67   240   2     14  \n#>  5     2 K         110     2     0      125   1     11  \n#>  6     3 G         173.    4     2.67   280   2.67  24  \n#>  7     1 R         134.    2.99  1.49   299.  5.97  22.4\n#>  8     3 P         134.    4.48  0      313.  7.46  19.4\n#>  9     2 Q         160     1.33  2.67   293.  0     16  \n#> 10     1 G          88     4.8   1.6    232   1.6   13.6\n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: sugars <dbl>, potassium <dbl>,\n#> #   vitamins <fct>\nrelocate (cereal, cal=calories, .before = fat)\n#> # A tibble: 65 × 11\n#>    mfr   protein   cal   fat sodium fibre carbo sugars shelf\n#>    <fct>   <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl> <int>\n#>  1 N       12.1   212.  3.03   394. 30.3   15.2  18.2      3\n#>  2 K       12.1   212.  3.03   788. 27.3   21.2  15.2      3\n#>  3 K        8     100   0      280  28     16     0        3\n#>  4 G        2.67  147.  2.67   240   2     14    13.3      1\n#>  5 K        2     110   0      125   1     11    14        2\n#>  6 G        4     173.  2.67   280   2.67  24    10.7      3\n#>  7 R        2.99  134.  1.49   299.  5.97  22.4   8.96     1\n#>  8 P        4.48  134.  0      313.  7.46  19.4   7.46     3\n#>  9 Q        1.33  160   2.67   293.  0     16    16        2\n#> 10 G        4.8    88   1.6    232   1.6   13.6   0.8      1\n#> # ℹ 55 more rows\n#> # ℹ 2 more variables: potassium <dbl>, vitamins <fct>\nrelocate(cereal, where(is.factor), .after=last_col())\n#> # A tibble: 65 × 11\n#>    calories protein   fat sodium fibre carbo sugars shelf\n#>       <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl> <int>\n#>  1     212.   12.1   3.03   394. 30.3   15.2  18.2      3\n#>  2     212.   12.1   3.03   788. 27.3   21.2  15.2      3\n#>  3     100     8     0      280  28     16     0        3\n#>  4     147.    2.67  2.67   240   2     14    13.3      1\n#>  5     110     2     0      125   1     11    14        2\n#>  6     173.    4     2.67   280   2.67  24    10.7      3\n#>  7     134.    2.99  1.49   299.  5.97  22.4   8.96     1\n#>  8     134.    4.48  0      313.  7.46  19.4   7.46     3\n#>  9     160     1.33  2.67   293.  0     16    16        2\n#> 10      88     4.8   1.6    232   1.6   13.6   0.8      1\n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: potassium <dbl>, mfr <fct>,\n#> #   vitamins <fct>\nfilter (cereal, fat<1)\n#> # A tibble: 23 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 K         100     8        0   280  28     16     0   \n#>  2 K         110     2        0   125   1     11    14   \n#>  3 P         134.    4.48     0   313.  7.46  19.4   7.46\n#>  4 R         110     2        0   280   0     22     3   \n#>  5 K         100     2        0   290   1     21     2   \n#>  6 K         110     1        0    90   1     13    12   \n#>  7 K         110     2        0   220   1     21     3   \n#>  8 R         133.    2.67     0   253.  1.33  24     6.67\n#>  9 K         147.    1.33     0   267.  1.33  18.7  14.7 \n#> 10 K         125     3.75     0     0   3.75  17.5   8.75\n#> # ℹ 13 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nfilter (cereal, fat<1, mfr==\"K\")\n#> # A tibble: 12 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 K         100     8        0   280  28     16     0   \n#>  2 K         110     2        0   125   1     11    14   \n#>  3 K         100     2        0   290   1     21     2   \n#>  4 K         110     1        0    90   1     13    12   \n#>  5 K         110     2        0   220   1     21     3   \n#>  6 K         147.    1.33     0   267.  1.33  18.7  14.7 \n#>  7 K         125     3.75     0     0   3.75  17.5   8.75\n#>  8 K         179.    4.48     0   358.  7.46  20.9  17.9 \n#>  9 K         100     3        0   320   1     20     3   \n#> 10 K         180     4        0     0   4     30    12   \n#> 11 K         110     2        0   290   0     22     3   \n#> 12 K         110     6        0   230   1     16     3   \n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nfilter (cereal, fat<1 | mfr==\"K\")\n#> # A tibble: 32 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 K         212.   12.1   3.03   788. 27.3   21.2  15.2 \n#>  2 K         100     8     0      280  28     16     0   \n#>  3 K         110     2     0      125   1     11    14   \n#>  4 P         134.    4.48  0      313.  7.46  19.4   7.46\n#>  5 R         110     2     0      280   0     22     3   \n#>  6 K         100     2     0      290   1     21     2   \n#>  7 K         110     1     0       90   1     13    12   \n#>  8 K         220     6     6      280   8     20    14   \n#>  9 K         110     2     0      220   1     21     3   \n#> 10 R         133.    2.67  0      253.  1.33  24     6.67\n#> # ℹ 22 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nfilter(cereal, between(sugars, 10, 20))\n#> # A tibble: 38 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 N         212.   12.1   3.03   394. 30.3   15.2   18.2\n#>  2 K         212.   12.1   3.03   788. 27.3   21.2   15.2\n#>  3 G         147.    2.67  2.67   240   2     14     13.3\n#>  4 K         110     2     0      125   1     11     14  \n#>  5 G         173.    4     2.67   280   2.67  24     10.7\n#>  6 Q         160     1.33  2.67   293.  0     16     16  \n#>  7 G         160     1.33  4      280   0     17.3   12  \n#>  8 G         220     6     4      280   4     26     14  \n#>  9 G         110     1     1      180   0     12     13  \n#> 10 K         110     1     0       90   1     13     12  \n#> # ℹ 28 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\narrange (cereal, fibre)\n#> # A tibble: 65 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 Q        160     1.33  2.67   293.      0  16    16   \n#>  2 G        160     1.33  4      280       0  17.3  12   \n#>  3 G        110     1     1      180       0  12    13   \n#>  4 R        110     2     0      280       0  22     3   \n#>  5 G        110     1     1      180       0  12    13   \n#>  6 P        147.    1.33  1.33   180       0  17.3  16   \n#>  7 P        114.    2.27  0       51.1     0  12.5  17.0 \n#>  8 G        147.    1.33  1.33   373.      0  20    12   \n#>  9 P         82.7   0.752 0      135.      0  10.5   8.27\n#> 10 G         73.3   1.33  0.667  173.      0  14     2   \n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\narrange (cereal, -fibre)\n#> # A tibble: 65 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 N         212.   12.1   3.03   394. 30.3   15.2  18.2 \n#>  2 K         100     8     0      280  28     16     0   \n#>  3 K         212.   12.1   3.03   788. 27.3   21.2  15.2 \n#>  4 P         440    12     0      680  12     68    12   \n#>  5 P         364.    9.09  9.09   227.  9.09  39.4  12.1 \n#>  6 P         179.    4.48  1.49   299.  8.96  16.4  20.9 \n#>  7 K         220     6     6      280   8     20    14   \n#>  8 P         134.    4.48  0      313.  7.46  19.4   7.46\n#>  9 P         179.    4.48  2.99   239.  7.46  17.9  14.9 \n#> 10 K         179.    4.48  0      358.  7.46  20.9  17.9 \n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\narrange (cereal, fat, desc(mfr))\n#> # A tibble: 65 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 R        110     2         0  280    0     22     3   \n#>  2 R        133.    2.67      0  253.   1.33  24     6.67\n#>  3 R         97.3   0.885     0  212.   0     20.4   1.77\n#>  4 Q         50     1         0    0    0     13     0   \n#>  5 P        134.    4.48      0  313.   7.46  19.4   7.46\n#>  6 P        114.    2.27      0   51.1  0     12.5  17.0 \n#>  7 P        440    12         0  680   12     68    12   \n#>  8 P         82.7   0.752     0  135.   0     10.5   8.27\n#>  9 N        134.    4.48      0    0    5.97  28.4   0   \n#> 10 N        134.    4.48      0    0    4.48  29.9   0   \n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nslice (cereal, 10:20)\n#> # A tibble: 11 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 G          88     4.8   1.6    232   1.6   13.6    0.8\n#>  2 G         160     1.33  4      280   0     17.3   12  \n#>  3 G         220     6     4      280   4     26     14  \n#>  4 G         110     1     1      180   0     12     13  \n#>  5 R         110     2     0      280   0     22      3  \n#>  6 K         100     2     0      290   1     21      2  \n#>  7 K         110     1     0       90   1     13     12  \n#>  8 G         110     1     1      180   0     12     13  \n#>  9 K         220     6     6      280   8     20     14  \n#> 10 K         110     2     0      220   1     21      3  \n#> 11 G         133.    2.67  1.33   187.  2.67  14.7   13.3\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nslice (cereal, -(10:20))\n#> # A tibble: 54 × 11\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 N         212.   12.1   3.03   394. 30.3   15.2  18.2 \n#>  2 K         212.   12.1   3.03   788. 27.3   21.2  15.2 \n#>  3 K         100     8     0      280  28     16     0   \n#>  4 G         147.    2.67  2.67   240   2     14    13.3 \n#>  5 K         110     2     0      125   1     11    14   \n#>  6 G         173.    4     2.67   280   2.67  24    10.7 \n#>  7 R         134.    2.99  1.49   299.  5.97  22.4   8.96\n#>  8 P         134.    4.48  0      313.  7.46  19.4   7.46\n#>  9 Q         160     1.33  2.67   293.  0     16    16   \n#> 10 R         133.    2.67  0      253.  1.33  24     6.67\n#> # ℹ 44 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nslice_tail (cereal, n=3)\n#> # A tibble: 3 × 11\n#>   mfr   calories protein   fat sodium fibre carbo sugars\n#>   <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#> 1 R         149.    4.48  1.49   343.  4.48  25.4   4.48\n#> 2 G         100     3     1      200   3     17     3   \n#> 3 G         147.    2.67  1.33   267.  1.33  21.3  10.7 \n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nslice_sample (cereal, n=8)\n#> # A tibble: 8 × 11\n#>   mfr   calories protein   fat sodium fibre carbo sugars\n#>   <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#> 1 P         147.    1.33  1.33   180   0     17.3   16  \n#> 2 G         200     6     4      280   5     21     16  \n#> 3 P         364.    9.09  9.09   227.  9.09  39.4   12.1\n#> 4 G         133.    2.67  1.33   187.  2.67  14.7   13.3\n#> 5 G         173.    4     2.67   280   2.67  24     10.7\n#> 6 G         220     6     4      280   4     26     14  \n#> 7 K         212.   12.1   3.03   788. 27.3   21.2   15.2\n#> 8 K         160     4     1.33   280   6.67  18.7   16  \n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nslice_max (cereal, sodium, n=4)\n#> # A tibble: 4 × 11\n#>   mfr   calories protein   fat sodium fibre carbo sugars\n#>   <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#> 1 K         212.   12.1   3.03   788.  27.3  21.2   15.2\n#> 2 P         440    12     0      680   12    68     12  \n#> 3 N         212.   12.1   3.03   394.  30.3  15.2   18.2\n#> 4 G         147.    1.33  1.33   373.   0    20     12  \n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\ncereal.mfr <- group_by(cereal, mfr)\ncereal.mfr          # looks no different\n#> # A tibble: 65 × 11\n#> # Groups:   mfr [6]\n#>    mfr   calories protein   fat sodium fibre carbo sugars\n#>    <fct>    <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>\n#>  1 N         212.   12.1   3.03   394. 30.3   15.2  18.2 \n#>  2 K         212.   12.1   3.03   788. 27.3   21.2  15.2 \n#>  3 K         100     8     0      280  28     16     0   \n#>  4 G         147.    2.67  2.67   240   2     14    13.3 \n#>  5 K         110     2     0      125   1     11    14   \n#>  6 G         173.    4     2.67   280   2.67  24    10.7 \n#>  7 R         134.    2.99  1.49   299.  5.97  22.4   8.96\n#>  8 P         134.    4.48  0      313.  7.46  19.4   7.46\n#>  9 Q         160     1.33  2.67   293.  0     16    16   \n#> 10 G          88     4.8   1.6    232   1.6   13.6   0.8 \n#> # ℹ 55 more rows\n#> # ℹ 3 more variables: shelf <int>, potassium <dbl>,\n#> #   vitamins <fct>\nclass(cereal)\n#> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\nclass(cereal.mfr)   # but it is a grouped object\n#> [1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\nsummarise(cereal.mfr, mean.cal = mean(calories), \n          median.carbo = median(carbo))\n#> # A tibble: 6 × 3\n#>   mfr   mean.cal median.carbo\n#>   <fct>    <dbl>        <dbl>\n#> 1 G         138.         15.7\n#> 2 K         150.         20  \n#> 3 N         160.         28.4\n#> 4 P         195.         17.3\n#> 5 Q         136.         16  \n#> 6 R         125.         22.4\ngroup_by(cereal, mfr, shelf) |> \n    summarise(mean.cal = mean(calories))\n#> `summarise()` has grouped output by 'mfr'. You can override\n#> using the `.groups` argument.\n#> # A tibble: 15 × 3\n#> # Groups:   mfr [6]\n#>    mfr   shelf mean.cal\n#>    <fct> <int>    <dbl>\n#>  1 G         1    121. \n#>  2 G         2    117. \n#>  3 G         3    165. \n#>  4 K         1    117. \n#>  5 K         2    134. \n#>  6 K         3    174. \n#>  7 N         1    134. \n#>  8 N         3    212. \n#>  9 P         1     98.2\n#> 10 P         2    147. \n#> 11 P         3    235. \n#> 12 Q         2    143. \n#> 13 Q         3    125  \n#> 14 R         1    123. \n#> 15 R         3    133.\nsummarise(cereal, mean.cal = mean(calories), max.fat = max(fat), \n          median.carbo = median(carbo), sum.sugar = tibble(fivenum(sugars)))\n#> Warning: Returning more (or less) than 1 row per `summarise()` group\n#> was deprecated in dplyr 1.1.0.\n#> ℹ Please use `reframe()` instead.\n#> ℹ When switching from `summarise()` to `reframe()`,\n#>   remember that `reframe()` always returns an ungrouped\n#>   data frame and adjust accordingly.\n#> Call `lifecycle::last_lifecycle_warnings()` to see where\n#> this warning was generated.\n#> # A tibble: 5 × 4\n#>   mean.cal max.fat median.carbo sum.sugar$`fivenum(sugars)`\n#>      <dbl>   <dbl>        <dbl>                       <dbl>\n#> 1     149.    9.09         18.7                         0  \n#> 2     149.    9.09         18.7                         4  \n#> 3     149.    9.09         18.7                        12  \n#> 4     149.    9.09         18.7                        14  \n#> 5     149.    9.09         18.7                        20.9\nreframe(cereal, mean.cal = mean(calories), max.fat = max(fat), \n          median.carbo = median(carbo), sum.sugar = fivenum(sugars))\n#> # A tibble: 5 × 4\n#>   mean.cal max.fat median.carbo sum.sugar\n#>      <dbl>   <dbl>        <dbl>     <dbl>\n#> 1     149.    9.09         18.7       0  \n#> 2     149.    9.09         18.7       4  \n#> 3     149.    9.09         18.7      12  \n#> 4     149.    9.09         18.7      14  \n#> 5     149.    9.09         18.7      20.9"},{"path":"data.html","id":"exercise-14","chapter":"9 Reading data files into R, formatting and printing","heading":"9.13 Exercise","text":"Use fish_encounters package tidyr convert wide format fish IDs row variable column station. entries cells ‘1’ fish encounter ‘0’ otherwise.Use fish_encounters package tidyr convert wide format fish IDs row variable column station. entries cells ‘1’ fish encounter ‘0’ otherwise.billboard data set package tidyr contains song rankings billboard top 100 year 2000 columns artist, track, date.enter wk1 - w76 contains ranking song week entered charts.\nCreate long data set listing columns wk1 w76 single column called week associated rank position column called rank. Note songs stayed charts entire 76 weeks. Hint, use values_drop_na = TRUE.\nUse command nest() create tibble one row artist-track combination rank.hist variable cell contains tibble 76 rows (one week) column date.entered, week rank.\nbillboard data set package tidyr contains song rankings billboard top 100 year 2000 columns artist, track, date.enter wk1 - w76 contains ranking song week entered charts.Create long data set listing columns wk1 w76 single column called week associated rank position column called rank. Note songs stayed charts entire 76 weeks. Hint, use values_drop_na = TRUE.Create long data set listing columns wk1 w76 single column called week associated rank position column called rank. Note songs stayed charts entire 76 weeks. Hint, use values_drop_na = TRUE.Use command nest() create tibble one row artist-track combination rank.hist variable cell contains tibble 76 rows (one week) column date.entered, week rank.Use command nest() create tibble one row artist-track combination rank.hist variable cell contains tibble 76 rows (one week) column date.entered, week rank.Another form mutation, join together two separate data sets. Study working functions inner_join(), left_join(), right_join() full_join() together output commands:Another form mutation, join together two separate data sets. Study working functions inner_join(), left_join(), right_join() full_join() together output commands:Use state.x77 package MASS create tibble called USA.states names states first column. Hint: first convert matrix dataframe get neater column names.\nAdd column state.region, also package MASS, USA.states second position.\nSelect columns State, Region, Population, Income, Illiteracy, Life Exp Area, use pipe operator reorder columns Area appears Region Population.\nAdd column Pop.Density Population density number per square miles. Note population values state.x77 represent 1000’s persons. column appear Population Income.\nsingle command, using pipe operator, create tibble called USA.groups :\nselect states area < 500 000 square miles;\norder rows according decreasing population density;\ngroup Region\nCompute mean income median life expectancy per region.\nUse state.x77 package MASS create tibble called USA.states names states first column. Hint: first convert matrix dataframe get neater column names.Add column state.region, also package MASS, USA.states second position.Add column state.region, also package MASS, USA.states second position.Select columns State, Region, Population, Income, Illiteracy, Life Exp Area, use pipe operator reorder columns Area appears Region Population.Select columns State, Region, Population, Income, Illiteracy, Life Exp Area, use pipe operator reorder columns Area appears Region Population.Add column Pop.Density Population density number per square miles. Note population values state.x77 represent 1000’s persons. column appear Population Income.Add column Pop.Density Population density number per square miles. Note population values state.x77 represent 1000’s persons. column appear Population Income.single command, using pipe operator, create tibble called USA.groups :single command, using pipe operator, create tibble called USA.groups :select states area < 500 000 square miles;order rows according decreasing population density;group RegionCompute mean income median life expectancy per region.","code":"\nband_members %>% inner_join(band_instruments)\nband_members %>% left_join(band_instruments)\nband_members %>% right_join(band_instruments)\nband_members %>% full_join(band_instruments)\nband_members %>% full_join(band_instruments2, \n                              by = c(\"name\" = \"artist\"))"},{"path":"graphics2.html","id":"graphics2","chapter":"10 R graphics: Round II","heading":"10 R graphics: Round II","text":"R offers several different types graphics: grid graphics contained package grid; package lattice contains trellis graphics; package ggplot2 introduces ggplot graphics implemented function ggplot(). chapter, aspects known traditional R graphics studied moving ggplot graphics.","code":""},{"path":"graphics2.html","id":"graphics-parameters","chapter":"10 R graphics: Round II","heading":"10.1 Graphics parameters","text":"Study help file par(). Execute par() obtain list current values graphical parameters.Study help file par(). Execute par() obtain list current values graphical parameters.par() used obtain current setting specific graphics parameter e.g. parameter fin?par() used obtain current setting specific graphics parameter e.g. parameter fin?par() used change graphics parameter e.g. mfrow?par() used change graphics parameter e.g. mfrow?reset changed values original values? Note .readonly argument par(). Hint: Study following instructions effects carefully:reset changed values original values? Note .readonly argument par(). Hint: Study following instructions effects carefully:current colour graphics “black”.Change colour graphics “blue”.Temp list parameter(s) change made.Shows colour graphics indeed changed “blue”.sometimes useful use par (ask = TRUE) instruct R ask whether existing graph replaced new one.sometimes useful use par (ask = TRUE) instruct R ask whether existing graph replaced new one.Draw histogram variable Ozone data set airquality class interval randomly represented different colour. happened NA values?Draw histogram variable Ozone data set airquality class interval randomly represented different colour. happened NA values?","code":"\npar(\"fin\")\n#> [1] 6.999999 4.999999\npar('col')\n#> [1] \"black\"\ntemp <- par(col = \"blue\")\ntemp\n#> $col\n#> [1] \"black\"\npar('col')\n#> [1] \"black\""},{"path":"graphics2.html","id":"layout-of-graphics","chapter":"10 R graphics: Round II","heading":"10.2 Layout of graphics","text":"Review Figure 4.1. Note parameters discussed .Review Figure 4.1. Note parameters discussed .Multiple figures one page: graphical parameters mfg mfrow mfcol differ? represented R data sets ldeaths, mdeaths fdeaths? Use mfg mfrow obtain Figure 10.1. Hint: graphics parameters mfg mfrow used together.Multiple figures one page: graphical parameters mfg mfrow mfcol differ? represented R data sets ldeaths, mdeaths fdeaths? Use mfg mfrow obtain Figure 10.1. Hint: graphics parameters mfg mfrow used together.\nFigure 10.1: Plots fdeaths mdeaths data sets\nmfrow setting reserves three rows two columns graphics filled row-wise. mfg setting specifies next graph placed position defined row one column one. graph constructed instructionwill result next graph appear position defined row one column two. Next need instructionrequesting graph window three rows one column next graph appear position row two (one column row two).Note meaning margins changes one figure drawn page make provision outer margin surrounding figures addition margin surrounding separate figure.Note meaning margins changes one figure drawn page make provision outer margin surrounding figures addition margin surrounding separate figure.Study functions split.screen(), screen() close.screen() work explained help facility.Study functions split.screen(), screen() close.screen() work explained help facility.Study usage function layout() detail complicated arrangements graph window. example usage deferred later chapter.Study usage function layout() detail complicated arrangements graph window. example usage deferred later chapter.","code":"\npar (mfrow = c(3, 2), mfg = c(1, 1))\npar (mfg = c(1, 2))\npar (mfrow = c(3, 1), mfg = c(2, 1))"},{"path":"graphics2.html","id":"low-level-plotting-commands","chapter":"10 R graphics: Round II","heading":"10.3 Low-level plotting commands","text":"functions Table 10.1 used edit existing graphs.Study functions carefully.Study right mouse button used R graphs.plotting tasks require combination high-level low-level plotting commands.Table 10.1:  Low-level plotting functions.","code":""},{"path":"graphics2.html","id":"using-the-plotting-commands","chapter":"10 R graphics: Round II","heading":"10.4 Using the plotting commands","text":"","code":""},{"path":"graphics2.html","id":"matplot","chapter":"10 R graphics: Round II","heading":"10.4.1 Multiple lines or groups of points on the same graph","text":"Study function matplot() works. Note functions matlines() matpoints(). Study execute following example:\nFigure 10.2: Three methods performing sort.\n","code":"\nmy.func <- function () \n{ times <- matrix(0,100,3)\n  for(i in 1:100)\n    {  n <- i * 10000\n       s1 <- 1:n\n       s2 <- sample(n)\n       s3 <- rnorm(n)\n       times[i,1] <- system.time(sort(s1))[1]\n       times[i,2] <- system.time(sort(s2))[1]\n       times[i,3] <- system.time(sort(s3))[1]\n     }\n  matplot(x = (1:100)*10000, y= times, type = \"l\", lty = 1:3,\n          col = c(\"black\", \"green\", \"red\"), xlab = \"Length\",  \n          ylab = \"Time in seconds\", main = \"Time for sorting\")  \n}\nmy.func()"},{"path":"graphics2.html","id":"multipleLines","chapter":"10 R graphics: Round II","heading":"10.4.2 Multiple lines or groups of points on the same graph but the lines (points) are not all the same length (number)","text":"technique must followed? First study Cars93 data set package MASS; study execute code . Experiment different values spar.\nFigure 10.3: Plotting multiple lines different lenghts\n\nFigure 10.4: Plotting multiple lines different lenghts\nExplain output generated function call.Explain output generated function call.technique can also followed case point diagrams?technique can also followed case point diagrams?","code":"\nmy.func <- function (spar = 0.9)\n{ require (MASS)                             # What is the effect of require()?\n  oldstate <- par (no.readonly = TRUE)       # Describe object 'oldstate'\n  on.exit (par (oldstate))                   # Of what use is on.exit()?\n\n  cargrp <- Cars93[ , \"Type\"]\n  price <- Cars93[ , \"Price\"]\n  mpg.city <- Cars93[ , \"MPG.city\"]\n  mpg.highway <- Cars93[ , \"MPG.highway\"]\n  plot(price, mpg.city, type = \"n\", ylim = c(0, max(mpg.city)), \n       main = \"Fuel Consumption vs Price for City Drive\", xlab = \"Price\", \n       ylab = \"Miles per Gallon in City\")\n  jj <- 0\n  for(i in levels(cargrp))\n    {  jj <- jj+1\n       lines (smooth.spline (price[cargrp==i], mpg.city[cargrp==i], spar=spar),\n              lty = jj, col = jj, lwd=2)\n    }\n  plot(price, mpg.highway, type = \"n\", ylim = c(0, max(mpg.highway)), \n       main = \"Fuel Consumption vs Price for Highway Drive\", xlab = \"Price\", \n       ylab = \"Miles per Gallon on Highway\")\n  jj <- 0\n  for(i in levels(cargrp))\n    {  jj <- jj+1\n       lines (smooth.spline (price[cargrp==i], mpg.highway[cargrp==i], \n                             spar = spar),\n              lty = jj, col = jj, lwd = 2)\n    }\n}\nmy.func ()\n#> Loading required package: MASS"},{"path":"graphics2.html","id":"Legends","chapter":"10 R graphics: Round II","heading":"10.4.3 Adding legends to a graph","text":"Study function legend() graphical parameter usr work. Study code used obtain Figure 10.5. Revise locator() function.Study function legend() graphical parameter usr work. Study code used obtain Figure 10.5. Revise locator() function.Use facts one USA gallon liquid equal \\(0.83267\\) UK (imperial) gallon liquid one mile equal \\(1.6093\\) kilometres obtain figure similar Figure 10.4.1 kilometres per litre scale right-hand side corresponds miles per gallon (USA) highway scale left-hand side.Use facts one USA gallon liquid equal \\(0.83267\\) UK (imperial) gallon liquid one mile equal \\(1.6093\\) kilometres obtain figure similar Figure 10.4.1 kilometres per litre scale right-hand side corresponds miles per gallon (USA) highway scale left-hand side.\nFigure 10.5: Illustrating adding legend plot.\n","code":"\nmy.func <- function()\n{ require (MASS)  \n  oldstate <- par (no.readonly = TRUE) \n  on.exit (par (oldstate)) \n\n  cargrp <- Cars93[ , \"Type\"]\n  price <- Cars93[ , \"Price\"]\n  mpg.city <- Cars93[ , \"MPG.city\"]\n  plot(price, mpg.city, type = \"n\", ylim = c(0, max(mpg.city)), \n       main = \"Fuel Consumption vs Price for City Drive\", xlab = \"Price\", \n       ylab = \"Miles per Gallon in City\")\n  char <- substring (as.character (cargrp), 1, 2)\n  text (x = price, y = mpg.city, labels = char, pos = 1, cex = 0.75)\n  labs <- paste (substring (levels (cargrp), 1, 2), levels(cargrp), sep=\":  \")\n  legend(x = 40, y = 42, legend = labs)\n}\nmy.func ()"},{"path":"graphics2.html","id":"multAxes","chapter":"10 R graphics: Round II","heading":"10.4.4 Multiple plots with identical axes","text":"can various graphs identical axes obtained? Show can done graphing sorting time three procedures considered 10.4.1 three separate plots graph window.","code":""},{"path":"graphics2.html","id":"providing-a-single-legend-for-multiple-plots","chapter":"10 R graphics: Round II","heading":"10.4.5 Providing a single legend for multiple plots","text":"Suppose two sorting methods three situations described in10.4.1 10.4.4 . can three graphs provided single legend without legend appearing one graphs? Explain detail.","code":""},{"path":"graphics2.html","id":"changing-the-plotting-character-common-plotting-characters-in-r","chapter":"10 R graphics: Round II","heading":"10.4.6 Changing the plotting character: common plotting characters in R","text":"Note use graphical parameters pch mkh. plotting characters available? Study help file par() points(). Study plotting characters displayed Figure 10.6 code used produce figure. can plotting characters made appear legends?\nFigure 10.6: common plotting characters available R.\n","code":"\nplot (x = rep(1:10, 2), y = rep (c(1,2), c(10,10)), pch = 0:19, cex = 2, \n      pty = \"p\", ylim = c(0,3), xlab = \"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\")"},{"path":"graphics2.html","id":"changing-the-colour-in-plots","chapter":"10 R graphics: Round II","heading":"10.4.7 Changing the colour in plots","text":"graphical parameter col allows user specify colour(s) number format given Figure 10.8. full list named colours can obtained command colors() Console.Alternatively, colour can specified hue, saturation value hsv (h = , s = , v = ), hue, chroma luminance hcl (h = , c = , l = ) red, green blue rgb (red = , green = , blue = ). rgb() function argument maxColorValue default value 1 indicates range known gamma-compressed values. Typically, red, green blue values range 0 255 video display 8-bit graphics. select specific shade light blue, following command can used:\nFigure 10.7: Colour selection rgb().\noutput rgb() function hexidemical colour number format, e.g. “#A7E3E3”. function col2rgb() accepts colour name, hexadecimal colour number format colour number provides red, green blue values 0 255 range.\nFigure 10.8: default colour palette available R.\nsequence \\(n\\) colours can generated function colorRampPalette(). example, colour vector used plotting Figure 10.9 generated call colorRampPalette (c (\"red\", \"green\", \"white\", \"gold\"))(20). Study following instructions generate colour sequences: rainbow(), heat.colors(), terrain.colors(), topo.colors(), cm.colors().\nFigure 10.9: User specified colour sequence colorRampPalette().\n","code":"\nplot (ldeaths, col = rgb (red = 167, green = 227, blue = 227, \n                          maxColorValue = 255))"},{"path":"graphics2.html","id":"logarithmic-axes","chapter":"10 R graphics: Round II","heading":"10.4.8 Logarithmic axes","text":"log() function log argument plot() function useful regard. log argument plot() function can specified log=\"x\"; log=\"y\"; log=\"xy\" depending whether x-axis, y-axis, axes plotted logarithmically.","code":""},{"path":"graphics2.html","id":"graphs-with-character-strings-as-the-scale-on-the-axis","chapter":"10 R graphics: Round II","heading":"10.4.9 Graphs with character strings as the ‘scale’ on the axis","text":"Figure 10.10 illustrates user defined character strings can appear calibrations axis. Furthermore, figure illustrates several techniques fine-tune plots. Study code resulting Figure 10.10 detail.\nFigure 10.10: Figures character strings axis calibrations enhancements plots.\n","code":"\nmy.func <- function()\n{ old.state <- par(no.readonly = TRUE)\n  on.exit (par (old.state))\n  area <- state.x77[, \"Area\"]\n  income <- state.x77[, \"Income\"]\n  area.grp <- cut(area, c(0, quantile (area, c(1/3, 2/3, 1))),\n                  labels = c(\"Small\", \"Medium\", \"Large\"))\n  income.grp <- cut(income, c(0, quantile (income, c(1/2, 1))),\n                    labels = c(\"Below Median\", \"Above Median\"))\n  mns <- tapply(state.x77[, \"Illiteracy\"], list(area.grp, income.grp), mean)\n  par(mfrow = c(1, 2))\n  plot(c(0.8, 3.2), range(mns), type = \"n\", xaxt = \"n\", xlab = \"Area Group\", \n       ylab =\"Mean Illiteracy\", sub = \"Function plot() used\")\n  axis(side = 1, at = 1:3, labels = levels(area.grp))\n  lines(1:3, mns[, 1])\n  lines(1:3, mns[, 2], lty = 2)\n  par(usr = c(0, 1, 0, 1))\n  legend(0.56, 0.96, lty = c(1,2), legend = levels(income.grp), cex= 0.5)\n  text(0.63, 0.98, adj = 0, \"Income Group\", cex = 0.5)\n    interaction.plot(area.grp, income.grp, state.x77[,\"Illiteracy\"], \n                     xlab = \"Area Group\", ylab = \"Mean Illiteracy\", \n                     sub = \"Interaction.plot used\", lty = 1:2, xtick = TRUE, \n                     legend = FALSE)\n  par(mfrow = c(1,1))\n  par(new = T)\n  plot(1:10, 1:10, type=\"n\", xlab=\"\", ylab=\"\",axes = FALSE)\n  title(main = \"Illiteracy vs Size for States grouped by Income\")\n}\nmy.func ()"},{"path":"graphics2.html","id":"customizing-bar-charts-and-histograms","chapter":"10 R graphics: Round II","heading":"10.4.10 Customizing bar charts and histograms","text":"can every bar bar chart represented different colour given separate headings?can every bar bar chart represented different colour given separate headings?can line graph without colours obtained?can line graph without colours obtained?can probability density function superimposed histogram?can probability density function superimposed histogram?can bar charts provided user-defined axes?can bar charts provided user-defined axes?Use Cars93 data set answer four questions constructing figure similar one shown Figure 10.11. Note: Mean MPG plot car types used. factor variable subsetted original levels kept although might occurr. Hence might necessary create new factor variable levels needed using factor().\nFigure 10.11: Enhanced bar charts histograms.\n","code":""},{"path":"graphics2.html","id":"three-dimensional-graphical-displays","chapter":"10 R graphics: Round II","heading":"10.4.11 Three-dimensional graphical displays","text":"Study function persp() works.Study function persp() works.Work example code creates Figure 10.12. Apart arrow points maximum, different colours must used highlight different aspects graph.Work example code creates Figure 10.12. Apart arrow points maximum, different colours must used highlight different aspects graph.Provide horizontally vertically rotated views 3D plot.Provide horizontally vertically rotated views 3D plot.\nFigure 10.12: Annotated 3D perspective plot.\n","code":"\nmy.func <- function () \n{ x <- seq(-10, 10, length= 30)\n  y <- x\n  ff <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }\n  z <- outer(x, y, ff)\n  z[is.na(z)] <- 1\n  op <- par(bg = \"white\")\n#  persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = \"lightblue\")\n  res <- persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = \"lightblue\", \n               ltheta = 120, shade = 0.75, ticktype = \"detailed\", xlab = \"X\", \n               ylab = \"Y\", zlab = \"Z\" ) \n  print (round(res, 3))\n  \n  #--- Add to existing persp plot : ---\n  #--- Function trans3d() -------------\n    trans3d <- function(x,y,z, pmat) \n    {\n      tr <- cbind(x,y,z,1) %*% pmat\n    list(x = tr[,1]/tr[,4], y = tr[,2]/tr[,4])\n  }\n  # ----------------------------------\n  z1 <- ff(1e-10, 1e-10)\n  transfrm <- trans3d (c(0,-2.5), c(0,5), c(z1,z1), res)\n  arrows(transfrm$x[1], transfrm$y[1], transfrm$x[2], transfrm$y[2], \n         length = 0.1, code = 1)\n  text(transfrm$x[2], transfrm$y[2]+0.02, \"Maximum occurs here\")\n  return(z1)\n}\nmy.func()#>       [,1]   [,2]   [,3]   [,4]\n#> [1,] 0.087 -0.025  0.043 -0.043\n#> [2,] 0.050  0.043 -0.075  0.075\n#> [3,] 0.000  0.074  0.042 -0.042\n#> [4,] 0.000 -0.273 -2.890  3.890\n#> [1] 10"},{"path":"graphics2.html","id":"diagrams","chapter":"10 R graphics: Round II","heading":"10.4.12 Diagrams","text":"Use R draw simple flow diagram. diagram must contain least one rectangle, one square, one circle one triangle. Furthermore, must straight curved lines well text describing different elements. Hint: Study functions arrows(), lines(), text() symbols() work discussed respective help facilities.","code":""},{"path":"graphics2.html","id":"annotating-graphics-with-special-symbols","chapter":"10 R graphics: Round II","heading":"10.4.13 Annotating graphics with special symbols","text":"Construct graph \\(normal(0, 1)\\) density function. Give title plot expression “Density normal random variable \\(\\mu = 0\\) \\(\\sigma^2 = 1\\).” Hint: Consult help file plotmath(). Within plot draw arrow density label \\(\\frac{1}{\\sqrt{2 \\pi}} e^{-\\frac{1}{2}x^2}\\).","code":""},{"path":"graphics2.html","id":"qqplot","chapter":"10 R graphics: Round II","heading":"10.5 Quantile plots","text":"Consider histogram weight Figure 10.11. variable follow normal distribution? normal quantile plot, shows observations vs corresponding quantiles standard normal distribution. observations correspond normal distribution, approximately form straight line. Use qqline() function add straing line plot.similar manner, quantile-quantile plots probability distributions can constructed function qqplot().","code":"\nqqnorm (Cars93$Weight)\nqqline (Cars93$Weight)\ny <- rexp(200, rate=4)\nqqplot (qexp (seq (from = 0, to = 1, len = 200), rate=4), y)\nqqline(y, distribution = function(p) qexp(p, rate=4))"},{"path":"graphics2.html","id":"density","chapter":"10 R graphics: Round II","heading":"10.6 Estimating a density","text":"histograms Figure 10.13 show 200 observations generated, 100 \\(normal (9,2^2)\\) 100 \\(normal (13,1)\\) distribution. Histograms sensitive choice number bins starting values bins. wider bins show evidence bimodal distribution. Using smaller bins, location bins can suggest either bimodal trimodal distribution.\nFigure 10.13: Histograms different bin sizes bin locations normal mixture data set.\nOne possible solution bin selection problem histograms Average Shifted Histogram (ASH). First define density histogram. Since aim estimate density (integrates one) density histogram normalised area histogram equal one.Consider set bins \\(B_k=[b_k, b_{(k+1)})\\) fixed bin width \\(λ=b_{(k+1)}-b_k\\) \\(∀ k\\), density histogram defined \\(\\hat{f} = \\frac{1}{N\\lambda} \\sum_{=1}^{N}{I_{[b_k,b_{k+1})}(x_i)}\\) \\(x∈B_k\\). Consider collection \\(m\\) histograms \\(\\hat{f}_1, \\hat{f}_2, \\dots, \\hat{f}_m\\) bin width \\(h\\), respective bin origins \\(b_{01}=0, b_{02}=\\frac{h}{m}, b_{03}=\\frac{2h}{m}, \\dots, b_{0m}=\\frac{(m-1)h}{m}\\). average shifted histogram defined \\(\\hat{f}_{ASH} = \\frac{1}{m} \\sum_{=1}^{m}{\\hat{f}_i}\\).\nFigure 10.14: Average shifted histogram normal mixture data.\nASH given Figure 10.14 sophisticated method estimating density kernel density estimate. density histograms replaced smooth kernel function, leading smoother estimate. R function density() provides variety kernels. Using default kernel, Gaussian distribution, kernel density estimate given Figure 10.15.\nFigure 10.15: Guassian kernel density estimate normal mixture data.\nExperiment different kernel function different choices bandwidth (argument bw) controlling amount smoothing.","code":"\nASH <- function (x, b0 = 1, bk = 15, h = 0.5, m = 5) # h=lambda\n{\n  Bvec <- as.vector ((bk - b0)/h+2, \"list\")\n  fhat <- matrix (nrow = m, ncol = (bk-b0)/h+1) \n  for (i in 1:m)\n    { Bvec[[i]] <- seq (from = b0+(i-1)*h/m, to = bk+h+(i-1)*h/m, by = h)\n      fhat[i,] <- hist (x, breaks = Bvec[[i]], right = T, plot = F)$density\n    }\n  fhat.ASH <- apply(fhat, 2, mean)\n  x.vec <- seq (from = b0, to = bk+h,length = length(fhat.ASH))\n  plot (x.vec, fhat.ASH, type=\"l\")\n}\nASH(x, m=20, h=1, b0=-2, bk=18)\nplot(density(x), type=\"l\")"},{"path":"graphics2.html","id":"coplot","chapter":"10 R graphics: Round II","heading":"10.7 A coplot with two conditioning variables","text":"Consider state.x77 data set. section 4.2 coplot() function used construct plot Illiteracy Area conditional Income. can expanded two conditions, example plotting Illiteracy Life expectancy conditional Income Area. Interpret. number panels overlap given intervals can controlled arguments number overlap.","code":"\ncoplot (state.x77 [,\"Illiteracy\"] ~ state.x77 [,\"Life Exp\"] | \n                                   state.x77 [,\"Income\"] + state.x77 [,\"Area\"], \n                                number = c(4,3), overlap=c(0,0.2))"},{"path":"graphics2.html","id":"exact-distances-in-graphics","chapter":"10 R graphics: Round II","heading":"10.8 Exact distances in graphics","text":"Obtain random sample size 50 bivariate normal distribution \\(n(50,20)\\) marginals correlation coefficient 0.90.Present data form scatterplot.Present data form scatterplot.Next, write R function perform following task scatterplot:\nChoose arbitrary point label “”.\nDraw line connecting circle centre exactly 25mm away . diameter circle must exactly 40mm.\nLabel centre point circle “B”.\nUse ruler check length connecting line diameter circle.\nNext, write R function perform following task scatterplot:Choose arbitrary point label “”.Choose arbitrary point label “”.Draw line connecting circle centre exactly 25mm away . diameter circle must exactly 40mm.Draw line connecting circle centre exactly 25mm away . diameter circle must exactly 40mm.Label centre point circle “B”.Label centre point circle “B”.Use ruler check length connecting line diameter circle.Use ruler check length connecting line diameter circle.Obtain print copy graph check lengths .Hint: Study help file function par().Obtain print copy graph check lengths .Hint: Study help file function par().Use R make ruler calibrated centimetres zero 15 cms.","code":""},{"path":"graphics2.html","id":"multiple-graphics-windows-in-r","chapter":"10 R graphics: Round II","heading":"10.9 Multiple graphics windows in R","text":"Study following instructions work control multiple graphics windows R:Study information R gives via execution help.search (\"graph\").","code":"\ndev.new() \ndev.list()  \ndev.set()   \ndev.next()\ndev.cur()   \ndev.copy()  \ndev.prev()\ndev.off()   \ndev.ask()   \ngraphics.off()"},{"path":"graphics2.html","id":"more-complex-layouts","chapter":"10 R graphics: Round II","heading":"10.10 More complex layouts","text":"Study graphical requirements needed constructing Figure 10.16 code requirements.\nFigure 10.16: complex graphics layout.\n","code":"\nmy.func <- function () \n{ old.state <- par (no.readonly = TRUE)\n on.exit (par (old.state))\n   \n par (omd = c(0, 0.66, 0, 1), mfcol = c(2, 1))\n ts.plot (mdeaths, xlab = \"Year\", ylab = \"Male deaths\")\n ts.plot (fdeaths, xlab = \"Year\", ylab = \"Female deaths\")\n\n par (omd = c(0.66, 1, 0, 1), mfcol = c(2, 1), mfg = c(1, 1), new=TRUE)\n hist (mdeaths, xlab = \"Male deaths\", ylab = \"Frequency\", main = \"\")\n hist (fdeaths, xlab = \"Female deaths\", ylab = \"Frequency\", main= \"\")\n\n par (omd = c(0, 1, 0, 1), mfcol = c(1, 1))\n title (\"Line plot and Histogram for male deaths\")\n   \n par(omd = c(0, 1, 0, 0.5), mfcol = c(1, 1))\n title (\"Line plot and Histogram for female deaths\")          \n}\nmy.func ()"},{"path":"graphics2.html","id":"dynamic-3d-graphics-in-r","chapter":"10 R graphics: Round II","heading":"10.11 Dynamic 3D graphics in R","text":"Study R package rgl.Study R package rgl.Attach library rgl search path issue R command example (plot3d). Use mouse buttons rotate zoom rgl graph.Attach library rgl search path issue R command example (plot3d). Use mouse buttons rotate zoom rgl graph.Next, issue R command example (surface3d) interactively explore 3D figure.Next, issue R command example (surface3d) interactively explore 3D figure.","code":""},{"path":"graphics2.html","id":"animation","chapter":"10 R graphics: Round II","heading":"10.12 Animation","text":"Study following two functions detail:Write R function show wheel two spokes moving forward adjustable speed.","code":"\nanim1 <- function (sleep = 0.05) \n { # Press ESC to end animation\n   n <- 40\n   t <- seq (0, 2*pi, length = n)\n   x <- cos(t)\n   y <- sin(t)\n   for (i in 1:n)\n   {  plot.new ()\n      plot.window (c(-1, 1), c(-1, 1), asp = 1)\n      points (x[i], y[i], pch = 16, cex = 2)\n      Sys.sleep(sleep) \n      #Sys.sleep() suspends execution for a given number of seconds\n    }\n   Recall(sleep) \n }\n\nanim2 <- function (sleep = 0.01) \n{ for (i in seq (from = 1, to = 3, by = 0.01))\n  {  plot.new ()\n     plot.window (c (1, 16), c(1, 16), asp = 1)\n     arrows(2*i, 2*i, 4*i, 4*i)\n     Sys.sleep(sleep)\n  }\n  Recall(sleep)\n}"},{"path":"graphics2.html","id":"Ex10","chapter":"10 R graphics: Round II","heading":"10.13 Exercise","text":"many real life situations necessary identify object limited information available. following problem problem can empirically investigated.function persp() used constructing Figure 10.12 requires regular pattern \\(x\\) \\(y\\) coordinates. pattern available necessary interpolate e.g. interp() (available package akima) using available values.Use function expand.grid() create grid regularly spaced \\(x\\) \\(y\\) values evaluate “sombrero” function Figure 10.12 points.Now use sample() randomly sample points grid interp() function interpolate values z throughout grid.Finally, use persp() construct plot interpolated values.fraction data needed sample get good representation true shape data. Hint: since persp() accept NAs replace NAs minimum non-missing z values.Use locator() write function allow placing legend pointing device anywhere existing plot.Use locator() write function allow placing legend pointing device anywhere existing plot.Use state.x77 data set construct scatterplot Illiteracy function Income. Now construct second scatterplot data origin right-hand side x-axis. order complete task necessary values x-axis increase left-hand side right-hand side.Use state.x77 data set construct scatterplot Illiteracy function Income. Now construct second scatterplot data origin right-hand side x-axis. order complete task necessary values x-axis increase left-hand side right-hand side.Consider following dataConsider following dataPlot data two groups form two profiles set axes.\nPlot data Test 1, Test 2, Test 3 Test 4 x-axis.\nscale data Group must appear y-axis left-hand side Group B y-axis right-hand side. detailed legend must provided.","code":""},{"path":"graphics2.html","id":"the-package-ggplot2","chapter":"10 R graphics: Round II","heading":"10.14 The package ggplot2","text":"package ggplot2 based ideas Wickham (2010) described paper “layered grammar graphics” makes use Grammar Graphics Wilkenson (2005).\nFigure 10.17: Layer structure ggplot2 package.\nFigure 10.17() components layer depicted. first essential component data represented graphic. Together data, needs aesthetic mapping, describing variable mapped x-direction, y-direction, size, shape, colour, etc. statistics component optionally transforms data quantities needs plotted. Typically, transformation used summarise data. possible map aesthetics new variables. geometry defines aesthetic displayed, points, lines, boxplots, densities, histograms, etc. geometry can display specific aesthetics, example point position, colour, shape size. Position adjustment needed cases geometric elements overlap, example using jitter scatterplots placing multiple bars stacked side--side barplot.graphic can consist several layers, shown Figure 10.17(b). According grammar graphics, scales component needs specified. scales common across layers describe mapping data aesthetic attributes colour associated level categorical variable. One scale needed aesthetic property used layers. order place geometric objects plotting plane, scale needed. commonly used scale Cartesian axes, others polar coordinates also available.Faceting splits data small multiples different subsets data set. component identify variable(s) splitting splitting arranged. Themes linked data provide instructions aspects titles, labels, fonts, background, gridlines, legends.full specification components ggplot, can cumbersome. Defaults specified, instance geometry default statistic statistic default geometry. can therefore build plot stepwise, fine-tuning detailed aspects required graphic obtained.start simple plots build complicated graphics. use cereal tibble created UScereal data package MASS (see section 9.12.4) illustration.","code":"\nlibrary (MASS)\nlibrary (tidyverse)\n#> ── Attaching core tidyverse packages ──── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n#> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n#> ✔ purrr     1.1.0     \n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ✖ dplyr::select() masks MASS::select()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\ncereal <- tibble (UScereal)"},{"path":"graphics2.html","id":"barplot","chapter":"10 R graphics: Round II","heading":"10.14.1 Barplot","text":"commandproduces simple barplot cereal data mfr x-axis counts level bars. position adjustments made, default colour bars used plot complete data set Cartesian axes default theme.can change colour bars commandNow add aesthetic bars coloured according vitamin enrichment, time, changing orientation. Note previous example, fill colour specified outside function aes(), , specified aesthetic.default stack bars. order position bars side--side use function position_dodge().","code":"\nggplot(data = cereal, \n       mapping = aes(x = mfr)) +   \n       geom_bar()\nggplot(data = cereal, \n       mapping = aes(x = mfr)) +   \n       geom_bar(fill = \"gold\")\nggplot(data = cereal, \n       mapping = aes(y = mfr, fill = vitamins)) +   \n       geom_bar() \nggplot(data = cereal, \n       mapping = aes(y = mfr, fill = vitamins)) +   \n       geom_bar(position = position_dodge())"},{"path":"graphics2.html","id":"scatterplot","chapter":"10 R graphics: Round II","heading":"10.14.2 Scatterplot","text":"simplest call produce scatterplot uses identity statistical transformation position adjustment complete data set default size, shape colour plotting characters.point colours can specified either according categorical variable, spectra based continuous variable.scatterplot smoother can added plot function geom_smooth().smooth function can also linear regression line.add different sizes shapes according shelf mfr, respectively, need commandFinally, since multiple observations zero fat, want jitter observations vertical direction random amount interval \\(±0.05\\).geom_text() geom_label() functions useful replace plotting characters sample names specified label.","code":"\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) +        \n       geom_point()\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = factor(shelf)))\n\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars))\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars)) +\n       geom_smooth()\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~\n#> x'\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars)) +\n       geom_smooth(method = \"lm\")\n#> `geom_smooth()` using formula = 'y ~ x'\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars, \n                                shape = mfr, \n                                size = factor(shelf)))\n#> Warning: Using size for a discrete variable is not advised.\nggplot(data=cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping=aes(colour = sugars),\n                              shape = \"cross\",\n                              position = position_jitter(height=0.05))\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_text(mapping = aes(label=mfr))\n\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_text(mapping=aes(label=mfr), check_overlap=T)\n\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_label(mapping = aes(label=mfr))"},{"path":"graphics2.html","id":"dotplot","chapter":"10 R graphics: Round II","heading":"10.14.3 Dotplot","text":"simple dotplot carbo variable followed another dotplot several tweaks presentation.","code":"\nggplot (data = cereal, mapping = aes(x = carbo)) + \n        geom_dotplot()  \n#> Bin width defaults to 1/30 of the range of the data. Pick\n#> better value with `binwidth`.\n\nggplot (data = cereal, mapping = aes(x = carbo)) + \n        geom_dotplot(binwidth = 2, stackdir = \"center\", \n                     stackratio = 0.8, dotsize = 1.2)  "},{"path":"graphics2.html","id":"boxplot","chapter":"10 R graphics: Round II","heading":"10.14.4 Boxplot","text":"geom_boxplot() function allows us make simple boxplot. However, make several boxplots according vitamin enrichment overlay observed data.","code":"\nggplot (data = cereal, \n        mapping = aes(x = vitamins, y = sodium)) +\n        geom_boxplot() + geom_jitter()\n\nggplot (data = cereal, \n        mapping = aes(x = vitamins, y = sodium)) +\n        geom_boxplot() + geom_jitter()"},{"path":"graphics2.html","id":"line-plot","chapter":"10 R graphics: Round II","heading":"10.14.5 Line plot","text":"illustrate plotting lines ggplot2 create small data set \\(y_a=log(x)\\)⁡ \\(y_b=2log(x)\\) \\(0 < x< 1\\).","code":"\nx <- seq(from = 0.01, to = 0.99, len = 100) \ny <- c(log(x), 2 * log(x))   \nz <- rep(c(\"a\", \"b\"), each = 100) \n\ndat <- tibble(x=rep(x,2), y, z) \ndat\n#> # A tibble: 200 × 3\n#>         x     y z    \n#>     <dbl> <dbl> <chr>\n#>  1 0.01   -4.61 a    \n#>  2 0.0199 -3.92 a    \n#>  3 0.0298 -3.51 a    \n#>  4 0.0397 -3.23 a    \n#>  5 0.0496 -3.00 a    \n#>  6 0.0595 -2.82 a    \n#>  7 0.0694 -2.67 a    \n#>  8 0.0793 -2.53 a    \n#>  9 0.0892 -2.42 a    \n#> 10 0.0991 -2.31 a    \n#> # ℹ 190 more rows\n\nggplot(dat, aes(x = x, y = y)) + \n       geom_line(aes(colour = z))"},{"path":"graphics2.html","id":"density-estimates","chapter":"10 R graphics: Round II","heading":"10.14.6 Density estimates","text":"Non-parametric density estimates useful summarise distribution data. single variable, geom_density() function produces density estimate (see section 10.6). illustrate use two-dimensional density estimate function geom_density_2d() Old Faithful data package datasets. Note call ggplot() written object p1. content p1 plot. Assigning name p1 plot prevents retype full call every subsequent execution.examples, geometry specified, without specification statistical transformations. Although specified explicitly, statistical transformations performed. instance barplot , stat_count() default geom_bar() determine frequencies plotted vertical axis. instances, default stat_xxx() function appropriate particular geom_yyy() function specifying statistical transformations lead non-sensicle calls. calls ggplot(), default stat_xxx() appropriate explicitly specified. , look exceptions.","code":"\np1 <- ggplot (faithful, \n              aes(x = eruptions, y = waiting)) +\n              geom_point() + xlim(0.5,5) + ylim(40,110)\n\np1\n#> Warning: Removed 3 rows containing missing values or values outside\n#> the scale range (`geom_point()`).\np1 + geom_density_2d()\n#> Warning: Removed 3 rows containing non-finite outside the scale\n#> range (`stat_density2d()`).\n#> Removed 3 rows containing missing values or values outside\n#> the scale range (`geom_point()`)."},{"path":"graphics2.html","id":"empirical-cumulative-distribution-function","chapter":"10 R graphics: Round II","heading":"10.14.7 Empirical cumulative distribution function","text":"empirical cumulative distribution function also provide details shape distribution underlying observations can plotted stat_ecdf().","code":"\nn.1.1 <- rnorm(100, 1, 1)\nF.4.9 <- rf(100, 4,9)\ndat <- tibble(n.1.1,F.4.9)\ndat2 <- pivot_longer(dat, cols = everything())\nggplot (dat, aes(x=n.1.1)) + stat_ecdf()\nggplot (dat2, aes(x=value, colour = name)) + stat_ecdf()"},{"path":"graphics2.html","id":"mathematical-functions","chapter":"10 R graphics: Round II","heading":"10.14.8 Mathematical functions","text":"function \\(f(x)\\) can plotted, added plot stat_function(). First plot function \\(f(x)=2e^xcos⁡(x)\\).Next compare empirical cumulative distribution function, cumulative distribution functions Poisson normal distribution. (Remember, normal distribution provides approximation Poisson).","code":"\np2 <- ggplot() + xlim(-5,5)\np2 + geom_function(fun = function(x) 2*exp(x)*cos(x))\nx3 <- rpois(100, 5)\ndat3 <- tibble(x3)\nggplot (dat3, aes(x = x3)) + stat_ecdf() + \n        geom_function(fun = ppois,    \n                args=list(lambda=mean(x3)), col=\"blue\") +\n        geom_function(fun = pnorm, \n               args=list(mean=mean(x3), sd=sqrt(mean(x3))), \n               col=\"red\")"},{"path":"graphics2.html","id":"after_stat-function","chapter":"10 R graphics: Round II","heading":"10.14.9 after_stat() function","text":"constructing histogram, frequencies appear vertical axis. frequencies output function stat_bin() means available front data set . after_stat() function allows us use computed variables, instance scale histogram area \\(=1\\) order compare observed distribution theoretical probability density function.","code":"\nx4 <- rgamma(1000, 5, 3)\ndat4 <- tibble(x4)\nggplot (dat4, aes(x4)) + geom_histogram()\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`.\n  \nggplot(dat4, aes(x4)) +\n       geom_histogram(aes(y=after_stat(density)), \n                      fill=\"pink\") +\n       geom_function (fun = dgamma, \n                      args=list(shape = 5, rate = 3))\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`."},{"path":"graphics2.html","id":"scales","chapter":"10 R graphics: Round II","heading":"10.14.10 Scales","text":"scales link aesthetic attributes colours, plotting characters, line types, axis scales etc. data. Implicitly, calls , default scales specified. wish change defaults, scales need specified explicitly.calldifferent colours assigned points, based content mfr. Since mfr categorical variable six levels, first six default colours used. user can specify colour selection function scale_colour_manual(). However, Brewer palettes convenient colour schemes designed Cynthia Brewer described \nhttp://colorbrewer2.org. qualitative scale used according levels mfr.Next, define gradient fill scaling use continuous variable sugars. default scale ranges light blue dark blue.built colour palettes hcl.colors, hcl.pals, rainbow, heat.colors, terrain.colors, topo.colors cm.colors can selected function scale_colour_gradientn() scale_fill_gradientn().functions scale_colour_gradient() scale_fill_gradient() allows user specify two-colour gradient scale scale_colour_gradient2() scale_fill_gradient2() allows specification three-colour gradient scale.final example scales change vertical axis log scale changing axis markers horizontal scale.","code":"\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = mfr))\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = mfr)) +\n       scale_colour_brewer(type = \"qual\")\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars))\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars))+\n       scale_colour_gradientn(colours = rainbow(21))\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars))+\n       scale_colour_gradient(low = \"black\", \n                             high = \"orange\")\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point(mapping = aes(colour = sugars))+\n       scale_colour_gradient(low = \"black\", \n                             high = \"orange\") +\n       scale_x_continuous(breaks = seq(from = 50, to = 450, by = 50)) + \n       scale_y_continuous(trans = \"log\")\n#> Warning in scale_y_continuous(trans = \"log\"): log-2.718282\n#> transformation introduced infinite values."},{"path":"graphics2.html","id":"coordinates","chapter":"10 R graphics: Round II","heading":"10.14.11 Coordinates","text":"default, plots made Cartesian axes. One alternative use polar coordinate system.plot function \\(f(\\theta)=\\theta sin(\\theta)\\), \\(0 \\le \\theta \\le \\frac{\\pi}{2}\\) need following code:illustrated Exercise 6.2 number 10 sometimes essential keep aspect ratio graphic fixed, usually \\(1:1\\). Classical scaling method produce map given matrix pairwise distances. code , map (subject rotation reflection) cities Europe produce function cmdscale(). order visually assess intercity distances, important one unit horizontal direction equal one unit vertical direction. achieved coord_fixed (ratio = 1).","code":"\n# Hadley's favourite pie chart\ndf <- data.frame(\n  variable = c(\"does not resemble\", \"resembles\"),\n  value = c(20, 80)\n)\n\nggplot(df, aes(x = \"\", y = value, fill = variable)) +\n       geom_col(width = 1) +\n       scale_fill_manual(values = c(\"red\", \"yellow\")) +\n       coord_polar(\"y\", start = pi / 3) +\n       labs(title = \"Pac man\")\ntheta.vec <- seq(from = 0, to = pi/2, len = 200)\nmy.dat <- tibble (theta = theta.vec,\n                  r = theta.vec*sin(theta.vec))\nggplot (my.dat) + geom_line(aes(x = theta, y=r)) +\n                  coord_polar(theta = \"x\")\ncity.coords <- data.frame(city=attr(eurodist,\"Labels\"),\n                          cmdscale(eurodist))\ncolnames(city.coords)[2:3] <- paste(\"dim\",1:2,sep=\"\")\ncity.coords <- tibble(city.coords)\nggplot (city.coords, mapping = aes(x = dim1, y = dim2)) +\n        geom_text(mapping = aes(label=city)) +\n        coord_fixed(ratio = 1)         "},{"path":"graphics2.html","id":"facets","chapter":"10 R graphics: Round II","heading":"10.14.12 Facets","text":"Facets allows grouping data set smaller similar data sets. can plot fat vs calories every manufacturer separately.Although allow comparison across plots, plot can axis range splitting data according two variables.","code":"\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point() +\n       facet_grid (vars(mfr))\n\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point() +\n       facet_wrap (vars(mfr))\nggplot(data = cereal, \n       mapping = aes(x = calories, y = fat)) + \n       geom_point() +\n       facet_wrap (vars(mfr, vitamins), scales = \"free\")"},{"path":"graphics2.html","id":"themes","chapter":"10 R graphics: Round II","heading":"10.14.13 Themes","text":"mentioned , themes disconnected data. Themes allow formatting background, gridlines, titles, etc.","code":"\np3 <- ggplot(data = cereal, \n      mapping = aes(y = mfr, fill = vitamins)) +   \n      geom_bar() + \n      facet_wrap(vars(mfr))\np3\np3 + theme_classic()\np3 + theme_minimal()\np3 + theme(panel.grid.major = element_line(\"gray\", size = 0.5))\n#> Warning: The `size` argument of `element_line()` is deprecated as of\n#> ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n#> This warning is displayed once every 8 hours.\n#> Call `lifecycle::last_lifecycle_warnings()` to see where\n#> this warning was generated.\np3 + theme(axis.text.y = element_text(size = 18))\np3 + ggtitle(\"Heading\") + theme(plot.title = element_text(family = \"serif\"))\n\np4 <- ggplot(data = cereal, \n             mapping = aes(x = calories, y = fat)) + \n             geom_point(mapping = aes(colour = sugars))\np4 + guides(colour = guide_colourbar(barwidth = 0.25, barheight = 20,\n                                        nbin=100))\np4 + guides (col = guide_legend(ncol=2, reverse=TRUE))\np4 + scale_x_continuous(breaks = seq(from = 50, to = 450, by = 25),\n                        guide = guide_axis(n.dodge = 2)) + \n     guides(y = guide_axis(angle = 90), y.sec = guide_axis())"},{"path":"graphics2.html","id":"exercise-15","chapter":"10 R graphics: Round II","heading":"10.15 Exercise","text":"1 () Convert state.region state.x77 data dataframe USA.states construct histogram population. Set bin widths 2000 (thousands).Make boxplot Income region separately.Make boxplot Income region separately.violin plot based boxplot also show probability density data different values, usually smoothed kernel density estimator. Make violin plots Income region separately assign custom scale violin fill values.violin plot based boxplot also show probability density data different values, usually smoothed kernel density estimator. Make violin plots Income region separately assign custom scale violin fill values.Set seed 7453 generate matrix 100 values \\(n(10,2^2)\\) distribution arranged two columns 50 values . Construct data frame numeric variables val1 val2 containing coordinates convex hull around data matrix using function chull(). Now make plot data add convex hull function geom_polygon(). convex hull red fill. Note need two dataframes tibbles, one data points matrix another convex hull.\nSet seed 7453 generate matrix 100 values \\(n(10,2^2)\\) distribution arranged two columns 50 values . Construct data frame numeric variables val1 val2 containing coordinates convex hull around data matrix using function chull(). Now make plot data add convex hull function geom_polygon(). convex hull red fill. Note need two dataframes tibbles, one data points matrix another convex hull.Study code construction rectangles graphic.Use USA.states data (1) construct density plot Frost variable. Set bandwidth bw = 10 determine amount smoothing.\nUse USA.states data (1) construct density plot Frost variable. Set bandwidth bw = 10 determine amount smoothing.Next, construct four density plots set axes four regions, using different colours .Next, construct four density plots set axes four regions, using different colours .Now, make four separate plots using function facet_wrap(). Change line type type 3 line width 1.5.Now, make four separate plots using function facet_wrap(). Change line type type 3 line width 1.5.Set random seed 8359 generate vector length 500 random values \\(n(-1,0.04)\\) distribution. Construct density plot, x-axis range () reverse using function scale_x_reverse() (ii) 0 left -2 right using function xlim().Set random seed 8359 generate vector length 500 random values \\(n(-1,0.04)\\) distribution. Construct density plot, x-axis range () reverse using function scale_x_reverse() (ii) 0 left -2 right using function xlim().data set fujitopo package geomapdata contains list three components: lat (latitude), lon (longitude) z (elevation). Construct tibble three columns lat, lon z use function geom_contour() construct contour plot. Since topographic map, ensure aspect ratio 1.\ndata set fujitopo package geomapdata contains list three components: lat (latitude), lon (longitude) z (elevation). Construct tibble three columns lat, lon z use function geom_contour() construct contour plot. Since topographic map, ensure aspect ratio 1.Repeat exercise 10.13 number 1 using geom_raster() function making contour plots instead 3D plots.\nFirst make contour plot full data set.\nSelect sample size 500 make contour plot.\nRepeat geom_raster ( , interpolate = TRUE).\nRepeat exercise 10.13 number 1 using geom_raster() function making contour plots instead 3D plots.First make contour plot full data set.Select sample size 500 make contour plot.Repeat geom_raster ( , interpolate = TRUE).maps package can used draw world map map specific country region. ggplot2 function map_data() converts data maps package data frame suitable plotting ggplot(). Study maps constructed comment different “projections”.Reproduce plot created section 10.4.2 ggplot().Reproduce plot created section 10.4.2 ggplot().Reproduce plot created section 10.4.3 ggplot().Reproduce plot created section 10.4.3 ggplot().Reproduce left panel plot Figure 10.10 ggplot().Reproduce left panel plot Figure 10.10 ggplot().","code":"\ndf <- data.frame(x = rep(c(2, 5, 7, 9, 12), 2),\n                 y = rep(c(1, 2), each = 5),\n                 z = factor(rep(1:5, each = 2)),\n                 w = rep(diff(c(0, 4, 6, 8, 10, 14)), 2))\nggplot(df, aes(x, y)) + \n       geom_tile(aes(fill = z), colour = \"grey50\")\nggplot(df, aes(x, y, width = w)) +\n       geom_tile(aes(fill = z), colour = \"grey50\")\nggplot(df, aes(xmin = x - w / 2, \n               xmax = x + w / 2, \n               ymin = y, ymax = y + 1)) +\n       geom_rect(aes(fill = z), colour = \"grey50\")\ncrimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)\nlibrary (maps)\n#> \n#> Attaching package: 'maps'\n#> The following object is masked from 'package:purrr':\n#> \n#>     map\nstates_map <- map_data(\"state\")\npp <- ggplot(crimes, aes(map_id = state)) +\n             geom_map(aes(fill = Murder), map = states_map) +\n             expand_limits(x = states_map$long, \n                           y = states_map$lat) \npp + coord_map()\npp + coord_map(\"azequalarea\")\npp + coord_map(\"orthographic\")\n\nusamap <- ggplot(states_map, aes(long, lat, group = group)) +\n                 geom_polygon(fill = \"white\", colour = \"black\")\nusamap\nusamap + coord_map()\nusamap + coord_map(\"azequalarea\")\nusamap + coord_map(\"orthographic\")\nusamap + coord_map(\"orthographic\", orientation = c(90, 0, 90))"},{"path":"modelling.html","id":"modelling","chapter":"11 Statistical modelling with R","heading":"11 Statistical modelling with R","text":"chapter introduction statistical modelling R. substantial number dedicated R modelling packages available. chapter basics statistical modelling R considered. However, thorough understanding principles invaluable aid mastering available R packages statistical modelling related topics.","code":""},{"path":"modelling.html","id":"introduction-1","chapter":"11 Statistical modelling with R","heading":"11.1 Introduction","text":"aims statistical modelling : assessing relative importance set variables relation another variable(s); predicting value dependent variable set predictor variables; defining statistical relationship dependent independent variables.following generic functions considered.Table 11.1:  Generic modelling functions R.","code":""},{"path":"modelling.html","id":"data-for-statistical-models","chapter":"11 Statistical modelling with R","heading":"11.2 Data for statistical models","text":"Note difference factors (categorical classification variables), regressors (continuous numeric variables) frequency data.Note difference factors (categorical classification variables), regressors (continuous numeric variables) frequency data.must data form dataframe statistical modelling carried R?must data form dataframe statistical modelling carried R?functions factor(), .factor() .ordered() used set determine class attributes variables must behave factors analyses? Note especially usage argument 'ordered = ' function factor().functions factor(), .factor() .ordered() used set determine class attributes variables must behave factors analyses? Note especially usage argument 'ordered = ' function factor().","code":""},{"path":"modelling.html","id":"expressing-a-statistical-model-in-r","chapter":"11 Statistical modelling with R","heading":"11.3 Expressing a statistical model in R","text":"role tilde-operator (~) play statistical models R?role tilde-operator (~) play statistical models R?Study operators Table 11.2 work. operators different meaning appear statistical model.Study operators Table 11.2 work. operators different meaning appear statistical model.Table 11.2:  Operators used model formulae ~.order ensure operators Table 11.2 usual meaning appearing right-hand side ~ statistical model use () function e.g. (+b).order ensure operators Table 11.2 usual meaning appearing right-hand side ~ statistical model use () function e.g. (+b).Note regression terms, main effects, interaction effects, higher-order interaction effect, nested effects covariate terms specified.Note regression terms, main effects, interaction effects, higher-order interaction effect, nested effects covariate terms specified.following summary illustrates correspondence model notation R algebraic notation models factors b numeric (continuous) variable x:following summary illustrates correspondence model notation R algebraic notation models factors b numeric (continuous) variable x:Every numeric variable right-hand side ~ generates one coefficient estimated fitted model; level factor variable generates one coefficient estimated fitted model. estimable function?Every numeric variable right-hand side ~ generates one coefficient estimated fitted model; level factor variable generates one coefficient estimated fitted model. estimable function?Note transformation variables can achieved model formulae stored R objects class formula.Note transformation variables can achieved model formulae stored R objects class formula.","code":""},{"path":"modelling.html","id":"common-arguments-to-r-modelling-functions","chapter":"11 Statistical modelling with R","heading":"11.4 Common arguments to R modelling functions","text":"formula argument. Study argument period operator work. dataframe specified argument modelling function period right-hand side ~ indicates additive effects variables dataframe (except used left-hand side ~) included model specification.formula argument. Study argument period operator work. dataframe specified argument modelling function period right-hand side ~ indicates additive effects variables dataframe (except used left-hand side ~) included model specification.data argument. Study argument works. Note argument accept R expression evaluates dataframe. Important: dataframe specified data argument () variables may referred names; (ii) dataframe searched first name global environment rest search path; (iii) existing object can also used variable.data argument. Study argument works. Note argument accept R expression evaluates dataframe. Important: dataframe specified data argument () variables may referred names; (ii) dataframe searched first name global environment rest search path; (iii) existing object can also used variable.subset argument. Note statistical models can fitted subsets data.subset argument. Note statistical models can fitted subsets data.weights argument. Study argument works especially iterative procedures used.weights argument. Study argument works especially iterative procedures used.na.action argument. argument controls missing values handled.na.action argument. argument controls missing values handled.control argument. purpose argument?control argument. purpose argument?","code":""},{"path":"modelling.html","id":"using-the-statistical-modelling-objects","chapter":"11 Statistical modelling with R","heading":"11.5 Using the statistical modelling objects","text":"Note: modelling functions returns object whose class attribute set name function e.g. value lm() set class lm. set generic functions available provide access information contained .see available particular modelling function use methods (class = function) e.g.Table 11.3:  Functions Model Objects.Note: confuse function anova() operates lm object function aov() fitting analysis variance model.Recall: Asterisked functions non-visible. functions can accessed using exampleNote use print(), summary() plot() retrieve information model objects.Note use print(), summary() plot() retrieve information model objects.Study functions used retrieve information model objects modify summed Table 11.3.Study functions used retrieve information model objects modify summed Table 11.3.","code":"\nmethods (class = lm)\n#>  [1] add1           alias          anova         \n#>  [4] case.names     coerce         confint       \n#>  [7] cooks.distance deviance       dfbeta        \n#> [10] dfbetas        drop1          dummy.coef    \n#> [13] effects        extractAIC     family        \n#> [16] formula        hatvalues      influence     \n#> [19] initialize     kappa          labels        \n#> [22] logLik         model.frame    model.matrix  \n#> [25] nobs           plot           predict       \n#> [28] print          proj           qr            \n#> [31] residuals      rstandard      rstudent      \n#> [34] show           simulate       slotsFromS3   \n#> [37] summary        variable.names vcov          \n#> see '?methods' for accessing help and source code\ngetAnywhere(add1.lm)"},{"path":"modelling.html","id":"usage-of-the-function-with","chapter":"11 Statistical modelling with R","heading":"11.6 Usage of the function with()","text":"Study help file function () take note specifically usage calling lm().","code":""},{"path":"modelling.html","id":"lmAnova","chapter":"11 Statistical modelling with R","heading":"11.7 Linear regression and anova","text":"Consider Cars93 data set available package MASS. Use lm() function perform regression analysis MPG.city function constant term, Length, (Rev.per.mile)\\(^{–1}\\), Weight, RPM (Horsepower)\\({–1}\\). Note function update() works. Illustrate use functions drop1() add1():object <- .data.frame(matA) identical object a1 <- data.frame(matA)?object <- .data.frame(matA) identical object a1 <- data.frame(matA)?, consider Cars93 data set: Consider cars manufactured Buick, Chevrolet, Oldsmobile Pontiac. Use median Weight create two car weight groups.\nConstruct interaction plot study interaction Manufacturer Weight respect highway fuel consumption. Interpret graph.\nUse function aov() perform two-way anova highway fuel consumption dependent variable independent (explanatory) variables weight-group manufacturer.\nconclude main effects interaction effects?\nRepeat using lm().\n, consider Cars93 data set: Consider cars manufactured Buick, Chevrolet, Oldsmobile Pontiac. Use median Weight create two car weight groups.Construct interaction plot study interaction Manufacturer Weight respect highway fuel consumption. Interpret graph.Use function aov() perform two-way anova highway fuel consumption dependent variable independent (explanatory) variables weight-group manufacturer.conclude main effects interaction effects?Repeat using lm().Study help file whiteside data set available package MASS. Plot gas consumption function temperature. Use different plotting characters colours two levels factor variable Insul. Add regression lines gas consumption temperature two levels Insul graph . conclude? Now test parallelism two regression lines using lm() terms Insul, Temp Insul:Temp. Discuss results analysis.Study help file whiteside data set available package MASS. Plot gas consumption function temperature. Use different plotting characters colours two levels factor variable Insul. Add regression lines gas consumption temperature two levels Insul graph . conclude? Now test parallelism two regression lines using lm() terms Insul, Temp Insul:Temp. Discuss results analysis.","code":"\nlibrary (MASS)\nlm.city <- lm (MPG.city ~ 1+ Length + I(1/Rev.per.mile)+ Weight + RPM +\n                 I(1/Horsepower), data=Cars93)\nsummary (lm.city)\n#> \n#> Call:\n#> lm(formula = MPG.city ~ 1 + Length + I(1/Rev.per.mile) + Weight + \n#>     RPM + I(1/Horsepower), data = Cars93)\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -5.2344 -1.4863 -0.1570  0.8975 14.0030 \n#> \n#> Coefficients:\n#>                     Estimate Std. Error t value Pr(>|t|)\n#> (Intercept)       -2.913e+00  1.076e+01  -0.271 0.787288\n#> Length             4.115e-02  3.393e-02   1.213 0.228518\n#> I(1/Rev.per.mile)  7.439e+03  4.760e+03   1.563 0.121750\n#> Weight            -3.345e-03  1.221e-03  -2.740 0.007448\n#> RPM                2.750e-03  7.812e-04   3.521 0.000688\n#> I(1/Horsepower)    1.287e+03  2.379e+02   5.410 5.48e-07\n#>                      \n#> (Intercept)          \n#> Length               \n#> I(1/Rev.per.mile)    \n#> Weight            ** \n#> RPM               ***\n#> I(1/Horsepower)   ***\n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 2.677 on 87 degrees of freedom\n#> Multiple R-squared:  0.7855, Adjusted R-squared:  0.7732 \n#> F-statistic: 63.72 on 5 and 87 DF,  p-value: < 2.2e-16\n# update() is used here to restrict the model fitted in lm.city to cars with \n# front wheel drives\nlm.city.front <- update (lm.city, subset = DriveTrain==\"Front\")\nsummary (lm.city.front)\n#> \n#> Call:\n#> lm(formula = MPG.city ~ 1 + Length + I(1/Rev.per.mile) + Weight + \n#>     RPM + I(1/Horsepower), data = Cars93, subset = DriveTrain == \n#>     \"Front\")\n#> \n#> Residuals:\n#>     Min      1Q  Median      3Q     Max \n#> -5.6598 -1.4476  0.0102  0.9468 13.7023 \n#> \n#> Coefficients:\n#>                     Estimate Std. Error t value Pr(>|t|)\n#> (Intercept)        1.599e+00  1.418e+01   0.113 0.910571\n#> Length             2.711e-02  4.875e-02   0.556 0.580093\n#> I(1/Rev.per.mile)  7.895e+03  6.518e+03   1.211 0.230462\n#> Weight            -3.808e-03  1.707e-03  -2.230 0.029406\n#> RPM                2.672e-03  1.016e-03   2.630 0.010784\n#> I(1/Horsepower)    1.246e+03  3.070e+02   4.058 0.000143\n#>                      \n#> (Intercept)          \n#> Length               \n#> I(1/Rev.per.mile)    \n#> Weight            *  \n#> RPM               *  \n#> I(1/Horsepower)   ***\n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 2.93 on 61 degrees of freedom\n#> Multiple R-squared:  0.7656, Adjusted R-squared:  0.7464 \n#> F-statistic: 39.85 on 5 and 61 DF,  p-value: < 2.2e-16\n\n# drop1 (lm object, scope) shows the effect of dropping the Length term from \n# the fitted model\ndrop1 (lm.city, . ~ Length)\n#> Single term deletions\n#> \n#> Model:\n#> MPG.city ~ 1 + Length + I(1/Rev.per.mile) + Weight + RPM + I(1/Horsepower)\n#>        Df Sum of Sq    RSS    AIC\n#> <none>              623.27 188.92\n#> Length  1    10.536 633.80 188.48\n\n# Shows the effect of dropping each term in turn from the fitted model \ndrop1 (lm.city)\n#> Single term deletions\n#> \n#> Model:\n#> MPG.city ~ 1 + Length + I(1/Rev.per.mile) + Weight + RPM + I(1/Horsepower)\n#>                   Df Sum of Sq    RSS    AIC\n#> <none>                         623.27 188.92\n#> Length             1    10.536 633.80 188.48\n#> I(1/Rev.per.mile)  1    17.495 640.76 189.50\n#> Weight             1    53.796 677.06 194.62\n#> RPM                1    88.801 712.07 199.31\n#> I(1/Horsepower)    1   209.659 832.93 213.89\n\nlm.city.const <- lm (MPG.city ~ 1, data=Cars93)\nanova (lm.city.const)\n#> Analysis of Variance Table\n#> \n#> Response: MPG.city\n#>           Df Sum Sq Mean Sq F value Pr(>F)\n#> Residuals 92 2905.6  31.582\n\n# add1 (lm object, scope) shows the effect of adding the terms in scope \n# individually in turn to the model in lm object \nadd1 (lm.city.const, . ~ Length + I(1/Rev.per.mile) + Weight + RPM + \n       I(1/Horsepower))\n#> Single term additions\n#> \n#> Model:\n#> MPG.city ~ 1\n#>                   Df Sum of Sq     RSS    AIC\n#> <none>                         2905.57 322.09\n#> Length             1   1289.71 1615.86 269.52\n#> I(1/Rev.per.mile)  1   1090.68 1814.89 280.32\n#> Weight             1   2065.52  840.05 208.68\n#> RPM                1    382.96 2522.61 310.94\n#> I(1/Horsepower)    1   1927.30  978.27 222.85"},{"path":"modelling.html","id":"regression-diagnostics","chapter":"11 Statistical modelling with R","heading":"11.8 Regression diagnostics","text":"Study help file lm.influence() information return values.Study help file lm.influence() information return values.Standardized residuals well jackknife residuals \\(stdres = \\frac{\\hat{e}_i}{s\\sqrt{1-h_{ii}}}\\) \\(studres = \\frac{y_i-\\hat{y}_{()}}{\\sqrt{var(y_i-\\hat{y}_{()})}}\\) can obtained help following functions: stdres() studres() available package MASS. Study help files functions.Standardized residuals well jackknife residuals \\(stdres = \\frac{\\hat{e}_i}{s\\sqrt{1-h_{ii}}}\\) \\(studres = \\frac{y_i-\\hat{y}_{()}}{\\sqrt{var(y_i-\\hat{y}_{()})}}\\) can obtained help following functions: stdres() studres() available package MASS. Study help files functions.Study predict() fitted() work.Study predict() fitted() work.Stepwise model selection: study use step().Stepwise model selection: study use step().returned function dfbetas()?returned function dfbetas()?Discuss output ofDiscuss output ofCalculate interpret dfbetas associated object lm.city.front created Section 11.7.Calculate interpret dfbetas associated object lm.city.front created Section 11.7.Continuing (f): obtain graph standardized residuals y-axis fitted y-values x-axis interpret graph.Continuing (f): obtain graph standardized residuals y-axis fitted y-values x-axis interpret graph.Continuing (f): obtain histogram studentized residuals. Interpret.Continuing (f): obtain histogram studentized residuals. Interpret.Consider object lm.city created section 11.7. Verify assumption normally distributed residuals function qqnorm(). See section 10.5.Consider object lm.city created section 11.7. Verify assumption normally distributed residuals function qqnorm(). See section 10.5.","code":"\nstep (lm (MPG.highway ~ Length + Width + Weight + EngineSize + RPM + \n            Rev.per.mile, data = Cars93))\n#> Start:  AIC=210.55\n#> MPG.highway ~ Length + Width + Weight + EngineSize + RPM + Rev.per.mile\n#> \n#>                Df Sum of Sq     RSS    AIC\n#> - RPM           1      1.58  771.32 208.74\n#> - EngineSize    1     10.36  780.10 209.79\n#> - Width         1     13.91  783.64 210.22\n#> <none>                       769.74 210.55\n#> - Rev.per.mile  1     17.66  787.39 210.66\n#> - Length        1     50.29  820.02 214.44\n#> - Weight        1    687.78 1457.52 267.93\n#> \n#> Step:  AIC=208.74\n#> MPG.highway ~ Length + Width + Weight + EngineSize + Rev.per.mile\n#> \n#>                Df Sum of Sq     RSS    AIC\n#> - EngineSize    1      9.19  780.50 207.84\n#> - Width         1     12.56  783.87 208.24\n#> <none>                       771.32 208.74\n#> - Rev.per.mile  1     18.36  789.67 208.93\n#> - Length        1     50.39  821.71 212.63\n#> - Weight        1    699.81 1471.13 266.79\n#> \n#> Step:  AIC=207.84\n#> MPG.highway ~ Length + Width + Weight + Rev.per.mile\n#> \n#>                Df Sum of Sq     RSS    AIC\n#> - Rev.per.mile  1     10.79  791.29 207.12\n#> <none>                       780.50 207.84\n#> - Width         1     21.50  802.00 208.37\n#> - Length        1     56.14  836.64 212.30\n#> - Weight        1    710.64 1491.14 266.05\n#> \n#> Step:  AIC=207.12\n#> MPG.highway ~ Length + Width + Weight\n#> \n#>          Df Sum of Sq     RSS    AIC\n#> - Width   1     13.71  805.00 206.72\n#> <none>                 791.29 207.12\n#> - Length  1     52.31  843.61 211.07\n#> - Weight  1    749.41 1540.70 267.09\n#> \n#> Step:  AIC=206.72\n#> MPG.highway ~ Length + Weight\n#> \n#>          Df Sum of Sq     RSS    AIC\n#> <none>                 805.00 206.72\n#> - Length  1     91.62  896.62 214.74\n#> - Weight  1   1039.48 1844.48 281.82\n#> \n#> Call:\n#> lm(formula = MPG.highway ~ Length + Weight, data = Cars93)\n#> \n#> Coefficients:\n#> (Intercept)       Length       Weight  \n#>   37.521781     0.115526    -0.009633"},{"path":"modelling.html","id":"non-parametric-regression","chapter":"11 Statistical modelling with R","heading":"11.9 Non-parametric regression","text":"Inspect help file stackloss data set.Inspect help file stackloss data set.Execute following R code:Execute following R code:Describe briefly understood Local regression model using help file function loess().Describe briefly understood Local regression model using help file function loess().Execute following R code:Execute following R code:Comment results.Alternatively, splines can used fit nonparametric regression model. package splines provides fitting B-splines bs() function natural cubic splines ns() function.Alternatively, splines can used fit nonparametric regression model. package splines provides fitting B-splines bs() function natural cubic splines ns() function.Study help files bs() ns() functions.Study help files bs() ns() functions.Inspect help file ethanol data set available package lattice.\nPlot NOx versus E.\nUse lm() fit straight line data. Add line plot made . necessary order observations?\nInspect help file ethanol data set available package lattice.Plot NOx versus E.Plot NOx versus E.Use lm() fit straight line data. Add line plot made . necessary order observations?Use lm() fit straight line data. Add line plot made . necessary order observations?Use lm() fit third degree polynomial data. Also add line plot ().Use loess() default span = 0.75 fit local regression function data add line plot.Use bs() fit B-spline default degree = 3 knots = NULL. Notice third degree polynomial fitted, similar (iii).Use bs() fit cubic B-spline 7 degrees freedom.Compare number knots two fits (v) (vi).Experiment different values span loess() function df argument bs() function.producing coplot (refer section 10.7) helpful draw lines curves dependency panels, make relationship easier appreciate. Use panel argument coplot() draw panel\nstraight line representing linear regression variables;\ncurve representing polynomial regression;\nspline using smooth.spline().\nproducing coplot (refer section 10.7) helpful draw lines curves dependency panels, make relationship easier appreciate. Use panel argument coplot() draw panela straight line representing linear regression variables;curve representing polynomial regression;spline using smooth.spline().Hint: Graphical arguments passed coplot() writing suitable panel function ‘value’ argument panel coplot(). Study examples panel functions :example","code":"\nstack.data <- data.frame (stackloss)\nnames (stack.data) <- c(\"AirFlow\", \"WaterTemp\", \"AcidConc\", \"Loss\")\nstack.loess <- loess(Loss ~ AirFlow * WaterTemp, data = stack.data)\nsummary(stack.loess)\n#> Call:\n#> loess(formula = Loss ~ AirFlow * WaterTemp, data = stack.data)\n#> \n#> Number of Observations: 21 \n#> Equivalent Number of Parameters: 8.86 \n#> Residual Standard Error: 2.986 \n#> Trace of smoother matrix: 10.53  (exact)\n#> \n#> Control settings:\n#>   span     :  0.75 \n#>   degree   :  2 \n#>   family   :  gaussian\n#>   surface  :  interpolate      cell = 0.2\n#>   normalize:  TRUE\n#>  parametric:  FALSE FALSE\n#> drop.square:  FALSE FALSE\nnames(stack.loess)\n#>  [1] \"n\"         \"fitted\"    \"residuals\" \"enp\"      \n#>  [5] \"s\"         \"one.delta\" \"two.delta\" \"trace.hat\"\n#>  [9] \"divisor\"   \"robust\"    \"pars\"      \"kd\"       \n#> [13] \"call\"      \"terms\"     \"xnames\"    \"x\"        \n#> [17] \"y\"         \"weights\"\n\nstack.loess$x\n#>    AirFlow WaterTemp\n#> 1       80        27\n#> 2       80        27\n#> 3       75        25\n#> 4       62        24\n#> 5       62        22\n#> 6       62        23\n#> 7       62        24\n#> 8       62        24\n#> 9       58        23\n#> 10      58        18\n#> 11      58        18\n#> 12      58        17\n#> 13      58        18\n#> 14      58        19\n#> 15      50        18\n#> 16      50        18\n#> 17      50        19\n#> 18      50        19\n#> 19      50        20\n#> 20      56        20\n#> 21      70        20\ncoplot (stack.loess$y ~ stack.loess$x[,\"AirFlow\"] | stack.loess$x[,\"WaterTemp\"],\n       panel = points)\ncoplot (stack.loess$y ~ stack.loess$x[,\"WaterTemp\"] | stack.loess$x[,\"AirFlow\"],\n        panel=points)\ny <- ethanol$NOx [order (ethanol$E)]\nx <- ethanol$E [order (ethanol$E)]\nyhat <- fitted (lm (y ~ x))\nlines (x, yhat, col = \"blue\")\nyhat <- fitted (lm (y ~ x + I(x^2) + I(x^3)))\nlines (x, yhat, col = \"magenta\")\nyhat <- fitted (loess (y ~ x))\nlines (x, yhat, col = \"green\")\nyhat <- fitted (lm (y ~ bs(x, degree=3)))\nlines (x, yhat, col = \"gold\")\nyhat <- fitted (lm (y ~ bs(x, df=7)))\nlines (x, yhat, col=\"red\")\nattr (bs(x), \"knots\")\nattr(bs(x), \"Boundary.knots\")\nattr(bs(x, df=7), \"knots\")\nattr(bs(x, df=7), \"Boundary.knots\")\npanel.straight.line <- function(x, y, col = par(\"col\"), bg = NA, \n                                pch = par(\"pch\"), cex = 1, col.smooth = \"red\")\n{ datmat <- cbind (x, y)\n  datmat <- datmat [order (datmat[, 1]),  ]\n  points (datmat[, 1], datmat[, 2], pch = pch, col = col, bg = bg, cex = cex)\n  lines (datmat[, 1], fitted (lm (datmat[, 2] ~ datmat[, 1])), col = col.smooth)\n}\n\npanel.poly <- function(x, y, col = par(\"col\"), bg = NA, pch = par(\"pch\"), \n                       cex = 1, col.smooth = \"red\")\n{ datmat <- cbind(x, y)\n  datmat <- datmat [order (datmat[, 1]),  ]\n  points (datmat[, 1], datmat[, 2], pch = pch, col = col, bg = bg, cex = cex)\n  lines (datmat[, 1], fitted (lm (datmat[, 2] ~ poly (datmat[, 1], 2))), \n         col = col.smooth)\n}\n               \npanel.smooth <- function (x, y, col = par(\"col\"), bg = NA, pch = par(\"pch\"), \n                          cex = 1, col.smooth = \"red\", span = 2/3, iter = 3, \n                          ...) \n{ points(x, y, pch = pch, col = col, bg = bg, cex = cex)\n  ok <- is.finite (x) & is.finite (y)\n  if (any (ok)) \n  lines (stats::lowess(x[ok], y[ok], f = span, iter = iter), \n         col = col.smooth, ...)\n}\ncoplot (Illiteracy ~ Life.Exp | Income * Area, data = state, \n        given = list (co.intervals (state$Income, 4), \n                      co.intervals (state$Area, 4)), \n        panel = panel.straight.line)\ncoplot (Illiteracy ~ Life.Exp | Income * Area, data = state, \n        given = list (co.intervals (state$Income, 4), \n                      co.intervals (state$Area, 4)), \n        panel = panel.poly)\ncoplot (Illiteracy ~ Life.Exp | Income * Area, data = state, \n        given = list (co.intervals (state$Income, 4), \n                      co.intervals (state$Area, 4)), \n        panel = panel.smooth)"},{"path":"modelling.html","id":"the-function-glm","chapter":"11 Statistical modelling with R","heading":"11.10 The function glm()","text":"Consider following data frame treatmentsWhy two-way anova appropriate ?GLM extends linear model two ways: () expected value replaced expected value, called link function (b) assumption observations Gaussian distribution extended include distributions exponential family probability distributions.Use glm() family = poisson() fit following generalized linear models data: Counts ~ TreatA + TreatB Counts ~ TreatA * TreatB.conclusions?","code":""},{"path":"modelling.html","id":"the-function-gam","chapter":"11 Statistical modelling with R","heading":"11.11 The function gam()","text":"Describe briefly understood generalized additive model.require (gam)\nstack.gam <- gam::gam(Loss~s(AirFlow) + s(WaterTemp) + s(AcidConc), control=gam.control(bf.maxit=50), data=stack.data)\nsummary(stack.gam)\npar(mfrow=c(3,1))\nplot(stack.gam)\nComment results.\nReturn ethanol data set available package lattice.\nUse gam() package mgcv fit B-spline data. following code can used :\ndetach(‘package:gam’)\nrequire(mgcv)\nrequire(lattice)\nrequire(splines)<- mgcv::gam(NOx ~ bs(E, df=7), data=ethanol)\nstr()","code":""},{"path":"data-must-be-sorted-according-to-e-values.html","id":"data-must-be-sorted-according-to-e-values","chapter":"12 data must be sorted according to E values","heading":"12 data must be sorted according to E values","text":"data.temp <- data.frame(ethanol[,c(1,3)],\nfitted = fitted())\ndata.ordered <- (data.temp, data.temp[order(E),])(data.ordered, plot(x=E, y=NOx, pch=15, col=‘blue’)\n(data.ordered, lines(x=E, y=fitted, col=‘red’, lwd=2)domain predictor divided knots B-spline generates set piecewise polynomials restricted continuous knots. Execute following command:plot (range(ethanol\\(E),c(0,1),type=\"n\")\napply(bs(ethanol\\)E, df=7), 2, function(y, x)\nlines(x[order(x)],y[order(x)]), x=ethanol$E)\nknot.vec <- attr(bs(x, df=7), “knots”)\n(knot.vec) lines (rep(,2),c(0,1),lty=2)Figure 11.11.1: Cubic B-spline basis functions 4 interior knots.set 7 basis functions generated, degree 3 polynomial interval \n7 - 3 = 4 interior knots. Experiment specifying either different degree polynomials, different numbers knots. specific knots can also specified, e.g. \n> bs(ethanol$E, knots=c(0.7, 0.9, 1.1))fit <- rpart(Kyphosis ~ Age + Number + Start,\ndata=kyphosis)\nplot(fit)\ntext(fit, use.n=TRUE,xpd=NA)\nComment results.\npackage partykit() provides toolkit recursive partitioning. informative tree diagram compared (c) can obtained code:\nlibrary (partykit)\nfit2 <- .party(fit)\nplot(fit2)asymptotic regression model form:\ny=α+βe^γx\n > 0,  < 0  < 0 model becomes Mistcherlich’s model law diminishing returns. According law diminishing returns yield, y, initially increases quickly increasing values x, yield slows finally levels just value . parameters  > 0,  < 0  < 0 following meaning:\n represents upper asymptote yield\n difference value y x = 0 upper asymptote\nasymptotic regression model may reparameterized  replaced  -   represents yield x = 0. special case asymptotic regression model occurs  = 0 :\ny=α-αeγx=α(1-eγx )\nasymptotic regression model represents nonlinear regression model general closed form solution exists estimating parameters. R function nls() can used estimate parameters model. function nls() employed starting values iterative estimating procedure necessary.\nChoosing starting values\nstarting value  can found looking scatterplot y function x chooses starting value just larger largest value y.\n difference value y x = 0 upper asymptote. reasonable starting value minimum value y minus .\n can roughly initially estimated negative slope two “well separated” points plot.\nStudy help file nls(). Notice carefully nls() called.\ndata Yield product chemical treatment different time duration. Three replicates made treatment time.Time (Hrs) Rep1 Rep2 Rep3\n0 0 0 0\n3 0.0846 0.0556 0.0501\n6 0.1072 0.0604 0.0545\n12 0.1255 0.059 0.0705\n18 0.1671 0.0799 0.0687\n24 0.1988 0.0958 0.0655\n48 0.2927 0.1739 0.1075\n72 0.3713 0.1910 0.1418\n96 0.4773 0.2669 0.1725\n168 0.6158 0.3584 0.3224\n336 0.7297 0.4339 0.3322\n504 0.8083 0.4816 0.3309\n672 0.7019 0.4497 0.3798\n840 0.6038 0.4851 0.3757\n1008 0.7386 0.5332 0.3798\nPlot data.\nplot suggests relationship form:\ny=α-αeγx=α(1-eγx )\nExplain term: nonlinear regression. Use nls() estimate parameters   model. effect changing start values result nls()? Experiment different start values parameters. Add estimated line plot (b) interpret graph.","code":"It has been shown that B-splines can exhibit erratic behavior beyond the boundary knots. Repeat the fits and plots above, replacing the B-splines with natural cubic splines with the function ns(). Natural cubic splines constrain the basis functions to be linear beyond the boundary knots. As a result, a natural cubic spline with K knots is represented by K basis functions.\n\nSelecting the position and number of knots can be subjective. Smoothing splines solves the knot selection problem by making each observation a knot and controlling the overfitting with a single penalty parameter. Repeat the fits and plots in (i), replacing the B-splines with smoothing splines with the function s(), similar to the fit in (a).\n\nThe function rpart()\nDescribe briefly what is understood by Regression and Classification Trees using the help file of the function rpart() in package rpart.\nStudy the help file of the kyphosis data set available in package MASS.\nExecute the following R code:Nonlinear regression and the function nls()"},{"path":"optimisation.html","id":"optimisation","chapter":"13 Introduction to Optimisation","heading":"13 Introduction to Optimisation","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
